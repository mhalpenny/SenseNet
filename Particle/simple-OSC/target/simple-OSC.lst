
/Users/Matthew/Developer/Particle/simple-OSC/target/simple-OSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f58  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3f70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000090  20000300  080a3f74  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000073c  20000390  20000390  00030390  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a4004  080a4004  00024004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a402c  080a402c  0002402c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b22d3  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001099c  00000000  00000000  000d6303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014656  00000000  00000000  000e6c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002180  00000000  00000000  000fb2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003648  00000000  00000000  000fd475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027483  00000000  00000000  00100abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000260e9  00000000  00000000  00127f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009ba07  00000000  00000000  0014e029  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bcf0  00000000  00000000  001e9a30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	f8 39 0a 08                                         .9..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fc79 	bl	80a3924 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fc7e 	bl	80a393a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3f74 	.word	0x080a3f74
 80a004c:	20000390 	.word	0x20000390
 80a0050:	20000390 	.word	0x20000390
 80a0054:	20000acc 	.word	0x20000acc
 80a0058:	20000acc 	.word	0x20000acc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fadd 	bl	80a261c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3f30 	.word	0x080a3f30
 80a0084:	080a3f6c 	.word	0x080a3f6c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bbf4 	b.w	80a0874 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fd75 	bl	80a0b7c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 ba83 	b.w	80a25a0 <_post_loop>

080a009a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009a:	f001 bc95 	b.w	80a19c8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bc9b 	b.w	80a19d8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN19Adafruit_FXAS21002CD1Ev>:
      int16_t y;
      int16_t z;
    } gyroRawData_t;
/*=========================================================================*/

class Adafruit_FXAS21002C : public Adafruit_Sensor
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t>:
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_FXAS21002C::getEvent(sensors_event_t* event)
{
 80a00b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a00bc:	460c      	mov	r4, r1
 80a00be:	4605      	mov	r5, r0
  bool readingValid = false;

  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 80a00c0:	2624      	movs	r6, #36	; 0x24
 80a00c2:	4632      	mov	r2, r6
 80a00c4:	2100      	movs	r1, #0
 80a00c6:	4620      	mov	r0, r4
 80a00c8:	f003 fc37 	bl	80a393a <memset>

  /* Clear the raw data placeholder */
  raw.x = 0;
 80a00cc:	2300      	movs	r3, #0
 80a00ce:	80eb      	strh	r3, [r5, #6]
  raw.y = 0;
 80a00d0:	812b      	strh	r3, [r5, #8]
  raw.z = 0;
 80a00d2:	816b      	strh	r3, [r5, #10]

  event->version   = sizeof(sensors_event_t);
 80a00d4:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 80a00d6:	692b      	ldr	r3, [r5, #16]
 80a00d8:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_GYROSCOPE;
 80a00da:	2304      	movs	r3, #4
 80a00dc:	60a3      	str	r3, [r4, #8]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00de:	f001 fabd 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 80a00e2:	6120      	str	r0, [r4, #16]

  /* Read 7 bytes from the sensor */
  Wire.beginTransmission((byte)FXAS21002C_ADDRESS);
 80a00e4:	f002 fb2c 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a00e8:	2121      	movs	r1, #33	; 0x21
 80a00ea:	f001 fce1 	bl	80a1ab0 <_ZN7TwoWire17beginTransmissionEh>
  #if ARDUINO >= 100
    Wire.write(GYRO_REGISTER_STATUS | 0x80);
 80a00ee:	f002 fb27 	bl	80a2740 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a00f2:	6803      	ldr	r3, [r0, #0]
 80a00f4:	2180      	movs	r1, #128	; 0x80
 80a00f6:	689b      	ldr	r3, [r3, #8]
 80a00f8:	4798      	blx	r3
  #else
    Wire.send(GYRO_REGISTER_STATUS | 0x80);
  #endif
  Wire.endTransmission();
 80a00fa:	f002 fb21 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a00fe:	f001 fce2 	bl	80a1ac6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FXAS21002C_ADDRESS, (byte)7);
 80a0102:	f002 fb1d 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0106:	2207      	movs	r2, #7
 80a0108:	2121      	movs	r1, #33	; 0x21
 80a010a:	f001 fcce 	bl	80a1aaa <_ZN7TwoWire11requestFromEhh>

  #if ARDUINO >= 100
    uint8_t status = Wire.read();
 80a010e:	f002 fb17 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0112:	6803      	ldr	r3, [r0, #0]
 80a0114:	695b      	ldr	r3, [r3, #20]
 80a0116:	4798      	blx	r3
    uint8_t xhi = Wire.read();
 80a0118:	f002 fb12 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a011c:	6803      	ldr	r3, [r0, #0]
 80a011e:	695b      	ldr	r3, [r3, #20]
 80a0120:	4798      	blx	r3
 80a0122:	4606      	mov	r6, r0
    uint8_t xlo = Wire.read();
 80a0124:	f002 fb0c 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0128:	6803      	ldr	r3, [r0, #0]
 80a012a:	695b      	ldr	r3, [r3, #20]
 80a012c:	4798      	blx	r3
 80a012e:	4607      	mov	r7, r0
    uint8_t yhi = Wire.read();
 80a0130:	f002 fb06 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0134:	6803      	ldr	r3, [r0, #0]
    uint8_t zhi = Wire.receive();
    uint8_t zlo = Wire.receive();
  #endif

  /* Shift values to create properly formed integer */
  event->gyro.x = (int16_t)((xhi << 8) | xlo);
 80a0136:	b2ff      	uxtb	r7, r7

  #if ARDUINO >= 100
    uint8_t status = Wire.read();
    uint8_t xhi = Wire.read();
    uint8_t xlo = Wire.read();
    uint8_t yhi = Wire.read();
 80a0138:	695b      	ldr	r3, [r3, #20]
 80a013a:	4798      	blx	r3
 80a013c:	4683      	mov	fp, r0
    uint8_t ylo = Wire.read();
 80a013e:	f002 faff 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0142:	6803      	ldr	r3, [r0, #0]
    uint8_t zhi = Wire.receive();
    uint8_t zlo = Wire.receive();
  #endif

  /* Shift values to create properly formed integer */
  event->gyro.x = (int16_t)((xhi << 8) | xlo);
 80a0144:	ea47 2606 	orr.w	r6, r7, r6, lsl #8
  #if ARDUINO >= 100
    uint8_t status = Wire.read();
    uint8_t xhi = Wire.read();
    uint8_t xlo = Wire.read();
    uint8_t yhi = Wire.read();
    uint8_t ylo = Wire.read();
 80a0148:	695b      	ldr	r3, [r3, #20]
 80a014a:	4798      	blx	r3
 80a014c:	4681      	mov	r9, r0
    uint8_t zhi = Wire.read();
 80a014e:	f002 faf7 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0152:	6803      	ldr	r3, [r0, #0]
    uint8_t zhi = Wire.receive();
    uint8_t zlo = Wire.receive();
  #endif

  /* Shift values to create properly formed integer */
  event->gyro.x = (int16_t)((xhi << 8) | xlo);
 80a0154:	b236      	sxth	r6, r6
    uint8_t status = Wire.read();
    uint8_t xhi = Wire.read();
    uint8_t xlo = Wire.read();
    uint8_t yhi = Wire.read();
    uint8_t ylo = Wire.read();
    uint8_t zhi = Wire.read();
 80a0156:	695b      	ldr	r3, [r3, #20]
 80a0158:	4798      	blx	r3
 80a015a:	4682      	mov	sl, r0
    uint8_t zlo = Wire.read();
 80a015c:	f002 faf0 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0160:	6803      	ldr	r3, [r0, #0]
 80a0162:	695b      	ldr	r3, [r3, #20]
 80a0164:	4798      	blx	r3
 80a0166:	4680      	mov	r8, r0
    uint8_t zhi = Wire.receive();
    uint8_t zlo = Wire.receive();
  #endif

  /* Shift values to create properly formed integer */
  event->gyro.x = (int16_t)((xhi << 8) | xlo);
 80a0168:	4630      	mov	r0, r6
 80a016a:	f003 f98d 	bl	80a3488 <__aeabi_i2f>
 80a016e:	6160      	str	r0, [r4, #20]
  event->gyro.y = (int16_t)((yhi << 8) | ylo);
 80a0170:	fa5f f089 	uxtb.w	r0, r9
 80a0174:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
 80a0178:	b200      	sxth	r0, r0
 80a017a:	f003 f985 	bl	80a3488 <__aeabi_i2f>
 80a017e:	61a0      	str	r0, [r4, #24]
  event->gyro.z = (int16_t)((zhi << 8) | zlo);
 80a0180:	fa5f f088 	uxtb.w	r0, r8
 80a0184:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 80a0188:	b200      	sxth	r0, r0
 80a018a:	f003 f97d 	bl	80a3488 <__aeabi_i2f>
 80a018e:	61e0      	str	r0, [r4, #28]

  /* Assign raw values in case someone needs them */
  raw.x = event->gyro.x;
 80a0190:	80ee      	strh	r6, [r5, #6]
  raw.y = event->gyro.y;
 80a0192:	69a0      	ldr	r0, [r4, #24]
 80a0194:	f003 fb92 	bl	80a38bc <__aeabi_f2iz>
 80a0198:	8128      	strh	r0, [r5, #8]
  raw.z = event->gyro.z;
 80a019a:	69e0      	ldr	r0, [r4, #28]
 80a019c:	f003 fb8e 	bl	80a38bc <__aeabi_f2iz>

  /* Compensate values depending on the resolution */
  switch(_range)
 80a01a0:	89ab      	ldrh	r3, [r5, #12]
  event->gyro.z = (int16_t)((zhi << 8) | zlo);

  /* Assign raw values in case someone needs them */
  raw.x = event->gyro.x;
  raw.y = event->gyro.y;
  raw.z = event->gyro.z;
 80a01a2:	8168      	strh	r0, [r5, #10]

  /* Compensate values depending on the resolution */
  switch(_range)
 80a01a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a01a8:	d026      	beq.n	80a01f8 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x140>
 80a01aa:	d810      	bhi.n	80a01ce <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x116>
 80a01ac:	2bfa      	cmp	r3, #250	; 0xfa
 80a01ae:	d144      	bne.n	80a023a <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x182>
  {
    case GYRO_RANGE_250DPS:
      event->gyro.x *= GYRO_SENSITIVITY_250DPS;
 80a01b0:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
 80a01b4:	6960      	ldr	r0, [r4, #20]
 80a01b6:	f003 f9bb 	bl	80a3530 <__aeabi_fmul>
      event->gyro.y *= GYRO_SENSITIVITY_250DPS;
 80a01ba:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000

  /* Compensate values depending on the resolution */
  switch(_range)
  {
    case GYRO_RANGE_250DPS:
      event->gyro.x *= GYRO_SENSITIVITY_250DPS;
 80a01be:	6160      	str	r0, [r4, #20]
      event->gyro.y *= GYRO_SENSITIVITY_250DPS;
 80a01c0:	69a0      	ldr	r0, [r4, #24]
 80a01c2:	f003 f9b5 	bl	80a3530 <__aeabi_fmul>
      event->gyro.z *= GYRO_SENSITIVITY_250DPS;
 80a01c6:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
  /* Compensate values depending on the resolution */
  switch(_range)
  {
    case GYRO_RANGE_250DPS:
      event->gyro.x *= GYRO_SENSITIVITY_250DPS;
      event->gyro.y *= GYRO_SENSITIVITY_250DPS;
 80a01ca:	61a0      	str	r0, [r4, #24]
 80a01cc:	e031      	b.n	80a0232 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x17a>
  raw.x = event->gyro.x;
  raw.y = event->gyro.y;
  raw.z = event->gyro.z;

  /* Compensate values depending on the resolution */
  switch(_range)
 80a01ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a01d2:	d020      	beq.n	80a0216 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x15e>
 80a01d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80a01d8:	d12f      	bne.n	80a023a <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x182>
      event->gyro.x *= GYRO_SENSITIVITY_1000DPS;
      event->gyro.y *= GYRO_SENSITIVITY_1000DPS;
      event->gyro.z *= GYRO_SENSITIVITY_1000DPS;
      break;
    case GYRO_RANGE_2000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_2000DPS;
 80a01da:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a01de:	6960      	ldr	r0, [r4, #20]
 80a01e0:	f003 f9a6 	bl	80a3530 <__aeabi_fmul>
      event->gyro.y *= GYRO_SENSITIVITY_2000DPS;
 80a01e4:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
      event->gyro.x *= GYRO_SENSITIVITY_1000DPS;
      event->gyro.y *= GYRO_SENSITIVITY_1000DPS;
      event->gyro.z *= GYRO_SENSITIVITY_1000DPS;
      break;
    case GYRO_RANGE_2000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_2000DPS;
 80a01e8:	6160      	str	r0, [r4, #20]
      event->gyro.y *= GYRO_SENSITIVITY_2000DPS;
 80a01ea:	69a0      	ldr	r0, [r4, #24]
 80a01ec:	f003 f9a0 	bl	80a3530 <__aeabi_fmul>
      event->gyro.z *= GYRO_SENSITIVITY_2000DPS;
 80a01f0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
      event->gyro.y *= GYRO_SENSITIVITY_1000DPS;
      event->gyro.z *= GYRO_SENSITIVITY_1000DPS;
      break;
    case GYRO_RANGE_2000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_2000DPS;
      event->gyro.y *= GYRO_SENSITIVITY_2000DPS;
 80a01f4:	61a0      	str	r0, [r4, #24]
 80a01f6:	e01c      	b.n	80a0232 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x17a>
      event->gyro.x *= GYRO_SENSITIVITY_250DPS;
      event->gyro.y *= GYRO_SENSITIVITY_250DPS;
      event->gyro.z *= GYRO_SENSITIVITY_250DPS;
      break;
    case GYRO_RANGE_500DPS:
      event->gyro.x *= GYRO_SENSITIVITY_500DPS;
 80a01f8:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
 80a01fc:	6960      	ldr	r0, [r4, #20]
 80a01fe:	f003 f997 	bl	80a3530 <__aeabi_fmul>
      event->gyro.y *= GYRO_SENSITIVITY_500DPS;
 80a0202:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
      event->gyro.x *= GYRO_SENSITIVITY_250DPS;
      event->gyro.y *= GYRO_SENSITIVITY_250DPS;
      event->gyro.z *= GYRO_SENSITIVITY_250DPS;
      break;
    case GYRO_RANGE_500DPS:
      event->gyro.x *= GYRO_SENSITIVITY_500DPS;
 80a0206:	6160      	str	r0, [r4, #20]
      event->gyro.y *= GYRO_SENSITIVITY_500DPS;
 80a0208:	69a0      	ldr	r0, [r4, #24]
 80a020a:	f003 f991 	bl	80a3530 <__aeabi_fmul>
      event->gyro.z *= GYRO_SENSITIVITY_500DPS;
 80a020e:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
      event->gyro.y *= GYRO_SENSITIVITY_250DPS;
      event->gyro.z *= GYRO_SENSITIVITY_250DPS;
      break;
    case GYRO_RANGE_500DPS:
      event->gyro.x *= GYRO_SENSITIVITY_500DPS;
      event->gyro.y *= GYRO_SENSITIVITY_500DPS;
 80a0212:	61a0      	str	r0, [r4, #24]
 80a0214:	e00d      	b.n	80a0232 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x17a>
      event->gyro.z *= GYRO_SENSITIVITY_500DPS;
      break;
    case GYRO_RANGE_1000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_1000DPS;
 80a0216:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
 80a021a:	6960      	ldr	r0, [r4, #20]
 80a021c:	f003 f988 	bl	80a3530 <__aeabi_fmul>
      event->gyro.y *= GYRO_SENSITIVITY_1000DPS;
 80a0220:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
      event->gyro.x *= GYRO_SENSITIVITY_500DPS;
      event->gyro.y *= GYRO_SENSITIVITY_500DPS;
      event->gyro.z *= GYRO_SENSITIVITY_500DPS;
      break;
    case GYRO_RANGE_1000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_1000DPS;
 80a0224:	6160      	str	r0, [r4, #20]
      event->gyro.y *= GYRO_SENSITIVITY_1000DPS;
 80a0226:	69a0      	ldr	r0, [r4, #24]
 80a0228:	f003 f982 	bl	80a3530 <__aeabi_fmul>
      event->gyro.z *= GYRO_SENSITIVITY_1000DPS;
 80a022c:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
      event->gyro.y *= GYRO_SENSITIVITY_500DPS;
      event->gyro.z *= GYRO_SENSITIVITY_500DPS;
      break;
    case GYRO_RANGE_1000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_1000DPS;
      event->gyro.y *= GYRO_SENSITIVITY_1000DPS;
 80a0230:	61a0      	str	r0, [r4, #24]
      event->gyro.z *= GYRO_SENSITIVITY_1000DPS;
      break;
    case GYRO_RANGE_2000DPS:
      event->gyro.x *= GYRO_SENSITIVITY_2000DPS;
      event->gyro.y *= GYRO_SENSITIVITY_2000DPS;
      event->gyro.z *= GYRO_SENSITIVITY_2000DPS;
 80a0232:	69e0      	ldr	r0, [r4, #28]
 80a0234:	f003 f97c 	bl	80a3530 <__aeabi_fmul>
 80a0238:	61e0      	str	r0, [r4, #28]
      break;
  }

  /* Convert values to rad/s */
  event->gyro.x *= SENSORS_DPS_TO_RADS;
 80a023a:	6960      	ldr	r0, [r4, #20]
 80a023c:	4908      	ldr	r1, [pc, #32]	; (80a0260 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x1a8>)
 80a023e:	f003 f977 	bl	80a3530 <__aeabi_fmul>
  event->gyro.y *= SENSORS_DPS_TO_RADS;
 80a0242:	4907      	ldr	r1, [pc, #28]	; (80a0260 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x1a8>)
      event->gyro.z *= GYRO_SENSITIVITY_2000DPS;
      break;
  }

  /* Convert values to rad/s */
  event->gyro.x *= SENSORS_DPS_TO_RADS;
 80a0244:	6160      	str	r0, [r4, #20]
  event->gyro.y *= SENSORS_DPS_TO_RADS;
 80a0246:	69a0      	ldr	r0, [r4, #24]
 80a0248:	f003 f972 	bl	80a3530 <__aeabi_fmul>
  event->gyro.z *= SENSORS_DPS_TO_RADS;
 80a024c:	4904      	ldr	r1, [pc, #16]	; (80a0260 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t+0x1a8>)
      break;
  }

  /* Convert values to rad/s */
  event->gyro.x *= SENSORS_DPS_TO_RADS;
  event->gyro.y *= SENSORS_DPS_TO_RADS;
 80a024e:	61a0      	str	r0, [r4, #24]
  event->gyro.z *= SENSORS_DPS_TO_RADS;
 80a0250:	69e0      	ldr	r0, [r4, #28]
 80a0252:	f003 f96d 	bl	80a3530 <__aeabi_fmul>
 80a0256:	61e0      	str	r0, [r4, #28]

  return true;
}
 80a0258:	2001      	movs	r0, #1
 80a025a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a025e:	bf00      	nop
 80a0260:	3c8efa35 	.word	0x3c8efa35

080a0264 <_ZN19Adafruit_FXAS21002CD0Ev>:
 80a0264:	b510      	push	{r4, lr}
 80a0266:	4604      	mov	r4, r0
 80a0268:	f7ff ff19 	bl	80a009e <_ZdlPv>
 80a026c:	4620      	mov	r0, r4
 80a026e:	bd10      	pop	{r4, pc}

080a0270 <_ZN19Adafruit_FXAS21002C9getSensorEP8sensor_t>:
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void  Adafruit_FXAS21002C::getSensor(sensor_t* sensor)
{
 80a0270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0272:	460c      	mov	r4, r1
 80a0274:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a0276:	2100      	movs	r1, #0
 80a0278:	2228      	movs	r2, #40	; 0x28
 80a027a:	4620      	mov	r0, r4
 80a027c:	f003 fb5d 	bl	80a393a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "FXAS21002C", sizeof(sensor->name) - 1);
 80a0280:	4b17      	ldr	r3, [pc, #92]	; (80a02e0 <_ZN19Adafruit_FXAS21002C9getSensorEP8sensor_t+0x70>)
 80a0282:	681a      	ldr	r2, [r3, #0]
 80a0284:	6022      	str	r2, [r4, #0]
 80a0286:	685a      	ldr	r2, [r3, #4]
 80a0288:	6062      	str	r2, [r4, #4]
 80a028a:	891a      	ldrh	r2, [r3, #8]
 80a028c:	7a9b      	ldrb	r3, [r3, #10]
 80a028e:	8122      	strh	r2, [r4, #8]
 80a0290:	72a3      	strb	r3, [r4, #10]
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
 80a0292:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "FXAS21002C", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a0294:	2300      	movs	r3, #0
 80a0296:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 80a0298:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 80a029a:	692a      	ldr	r2, [r5, #16]
  sensor->type        = SENSOR_TYPE_GYROSCOPE;
  sensor->min_delay   = 0;
 80a029c:	6263      	str	r3, [r4, #36]	; 0x24

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "FXAS21002C", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 80a029e:	6122      	str	r2, [r4, #16]
  sensor->type        = SENSOR_TYPE_GYROSCOPE;
 80a02a0:	2204      	movs	r2, #4
 80a02a2:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = (float)this->_range * SENSORS_DPS_TO_RADS;
 80a02a4:	89a8      	ldrh	r0, [r5, #12]
 80a02a6:	f003 f8eb 	bl	80a3480 <__aeabi_ui2f>
 80a02aa:	490e      	ldr	r1, [pc, #56]	; (80a02e4 <_ZN19Adafruit_FXAS21002C9getSensorEP8sensor_t+0x74>)
 80a02ac:	f003 f940 	bl	80a3530 <__aeabi_fmul>
 80a02b0:	61a0      	str	r0, [r4, #24]
  sensor->min_value   = (this->_range * -1.0) * SENSORS_DPS_TO_RADS;
 80a02b2:	89a8      	ldrh	r0, [r5, #12]
 80a02b4:	f002 fd3e 	bl	80a2d34 <__aeabi_i2d>
 80a02b8:	a307      	add	r3, pc, #28	; (adr r3, 80a02d8 <_ZN19Adafruit_FXAS21002C9getSensorEP8sensor_t+0x68>)
 80a02ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02be:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 80a02c2:	4639      	mov	r1, r7
 80a02c4:	f002 fd9c 	bl	80a2e00 <__aeabi_dmul>
 80a02c8:	f002 ffd4 	bl	80a3274 <__aeabi_d2f>
  sensor->resolution  = 0.0F; // TBD
 80a02cc:	2300      	movs	r3, #0
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
  sensor->type        = SENSOR_TYPE_GYROSCOPE;
  sensor->min_delay   = 0;
  sensor->max_value   = (float)this->_range * SENSORS_DPS_TO_RADS;
  sensor->min_value   = (this->_range * -1.0) * SENSORS_DPS_TO_RADS;
 80a02ce:	61e0      	str	r0, [r4, #28]
  sensor->resolution  = 0.0F; // TBD
 80a02d0:	6223      	str	r3, [r4, #32]
 80a02d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a02d4:	f3af 8000 	nop.w
 80a02d8:	a0000000 	.word	0xa0000000
 80a02dc:	3f91df46 	.word	0x3f91df46
 80a02e0:	080a3a0c 	.word	0x080a3a0c
 80a02e4:	3c8efa35 	.word	0x3c8efa35

080a02e8 <_ZN19Adafruit_FXAS21002C6write8Ehh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
void Adafruit_FXAS21002C::write8(byte reg, byte value)
{
 80a02e8:	b538      	push	{r3, r4, r5, lr}
 80a02ea:	4614      	mov	r4, r2
 80a02ec:	460d      	mov	r5, r1
  Wire.beginTransmission(FXAS21002C_ADDRESS);
 80a02ee:	f002 fa27 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a02f2:	2121      	movs	r1, #33	; 0x21
 80a02f4:	f001 fbe0 	bl	80a1ab8 <_ZN7TwoWire17beginTransmissionEi>
  #if ARDUINO >= 100
    Wire.write((uint8_t)reg);
 80a02f8:	f002 fa22 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a02fc:	6803      	ldr	r3, [r0, #0]
 80a02fe:	4629      	mov	r1, r5
 80a0300:	689b      	ldr	r3, [r3, #8]
 80a0302:	4798      	blx	r3
    Wire.write((uint8_t)value);
 80a0304:	f002 fa1c 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0308:	6803      	ldr	r3, [r0, #0]
 80a030a:	4621      	mov	r1, r4
 80a030c:	689b      	ldr	r3, [r3, #8]
 80a030e:	4798      	blx	r3
  #else
    Wire.send(reg);
    Wire.send(value);
  #endif
  Wire.endTransmission();
 80a0310:	f002 fa16 	bl	80a2740 <_Z19__fetch_global_Wirev>
}
 80a0314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.write((uint8_t)value);
  #else
    Wire.send(reg);
    Wire.send(value);
  #endif
  Wire.endTransmission();
 80a0318:	f001 bbd5 	b.w	80a1ac6 <_ZN7TwoWire15endTransmissionEv>

080a031c <_ZN19Adafruit_FXAS21002C5read8Eh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
byte Adafruit_FXAS21002C::read8(byte reg)
{
 80a031c:	b510      	push	{r4, lr}
 80a031e:	460c      	mov	r4, r1
  byte value;

  Wire.beginTransmission((byte)FXAS21002C_ADDRESS);
 80a0320:	f002 fa0e 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0324:	2121      	movs	r1, #33	; 0x21
 80a0326:	f001 fbc3 	bl	80a1ab0 <_ZN7TwoWire17beginTransmissionEh>
  #if ARDUINO >= 100
    Wire.write((uint8_t)reg);
 80a032a:	f002 fa09 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a032e:	6803      	ldr	r3, [r0, #0]
 80a0330:	4621      	mov	r1, r4
 80a0332:	689b      	ldr	r3, [r3, #8]
 80a0334:	4798      	blx	r3
  #else
    Wire.send(reg);
  #endif
  if (Wire.endTransmission(false) != 0) return 0;
 80a0336:	f002 fa03 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a033a:	2100      	movs	r1, #0
 80a033c:	f001 fbbf 	bl	80a1abe <_ZN7TwoWire15endTransmissionEh>
 80a0340:	b960      	cbnz	r0, 80a035c <_ZN19Adafruit_FXAS21002C5read8Eh+0x40>
  Wire.requestFrom((byte)FXAS21002C_ADDRESS, (byte)1);
 80a0342:	f002 f9fd 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0346:	2201      	movs	r2, #1
 80a0348:	2121      	movs	r1, #33	; 0x21
 80a034a:	f001 fbae 	bl	80a1aaa <_ZN7TwoWire11requestFromEhh>
  #if ARDUINO >= 100
    value = Wire.read();
 80a034e:	f002 f9f7 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0352:	6803      	ldr	r3, [r0, #0]
 80a0354:	695b      	ldr	r3, [r3, #20]
 80a0356:	4798      	blx	r3
 80a0358:	b2c0      	uxtb	r0, r0
 80a035a:	bd10      	pop	{r4, pc}
  #if ARDUINO >= 100
    Wire.write((uint8_t)reg);
  #else
    Wire.send(reg);
  #endif
  if (Wire.endTransmission(false) != 0) return 0;
 80a035c:	2000      	movs	r0, #0
  #else
    value = Wire.receive();
  #endif

  return value;
}
 80a035e:	bd10      	pop	{r4, pc}

080a0360 <_ZN19Adafruit_FXAS21002CC1El>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_FXAS21002C class
*/
/**************************************************************************/
Adafruit_FXAS21002C::Adafruit_FXAS21002C(int32_t sensorID) {
 80a0360:	4a01      	ldr	r2, [pc, #4]	; (80a0368 <_ZN19Adafruit_FXAS21002CC1El+0x8>)
  _sensorID = sensorID;
 80a0362:	6101      	str	r1, [r0, #16]
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_FXAS21002C class
*/
/**************************************************************************/
Adafruit_FXAS21002C::Adafruit_FXAS21002C(int32_t sensorID) {
 80a0364:	6002      	str	r2, [r0, #0]
  _sensorID = sensorID;
}
 80a0366:	4770      	bx	lr
 80a0368:	080a3a20 	.word	0x080a3a20

080a036c <_ZN19Adafruit_FXAS21002C5beginE11gyroRange_t>:
/*!
    @brief  Setups the HW
*/
/**************************************************************************/
bool Adafruit_FXAS21002C::begin(gyroRange_t rng)
{
 80a036c:	b538      	push	{r3, r4, r5, lr}
 80a036e:	4605      	mov	r5, r0
 80a0370:	460c      	mov	r4, r1
  /* Enable I2C */
  Wire.begin();
 80a0372:	f002 f9e5 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0376:	f001 fb89 	bl	80a1a8c <_ZN7TwoWire5beginEv>

  /* Set the range the an appropriate value */
  _range = rng;
 80a037a:	81ac      	strh	r4, [r5, #12]

  /* Clear the raw sensor data */
  raw.x = 0;
 80a037c:	2400      	movs	r4, #0
 80a037e:	80ec      	strh	r4, [r5, #6]
  raw.y = 0;
 80a0380:	812c      	strh	r4, [r5, #8]
  raw.z = 0;
 80a0382:	816c      	strh	r4, [r5, #10]

  /* Make sure we have the correct chip ID since this checks
     for correct address and that the IC is properly connected */
  uint8_t id = read8(GYRO_REGISTER_WHO_AM_I);
 80a0384:	210c      	movs	r1, #12
 80a0386:	4628      	mov	r0, r5
 80a0388:	f7ff ffc8 	bl	80a031c <_ZN19Adafruit_FXAS21002C5read8Eh>
  // Serial.print("WHO AM I? 0x"); Serial.println(id, HEX);
  if (id != FXAS21002C_ID)
 80a038c:	28d7      	cmp	r0, #215	; 0xd7
 80a038e:	d113      	bne.n	80a03b8 <_ZN19Adafruit_FXAS21002C5beginE11gyroRange_t+0x4c>
                  111 = 12.5 Hz
     1  ACTIVE    Standby(0)/Active(1)                                0
     0  READY     Standby(0)/Ready(1)                                 0

  /* Reset then switch to active mode with 100Hz output */
  write8(GYRO_REGISTER_CTRL_REG1, 0x00);
 80a0390:	4622      	mov	r2, r4
 80a0392:	4628      	mov	r0, r5
 80a0394:	2113      	movs	r1, #19
 80a0396:	f7ff ffa7 	bl	80a02e8 <_ZN19Adafruit_FXAS21002C6write8Ehh>
  write8(GYRO_REGISTER_CTRL_REG1, (1<<6));
 80a039a:	4628      	mov	r0, r5
 80a039c:	2240      	movs	r2, #64	; 0x40
 80a039e:	2113      	movs	r1, #19
 80a03a0:	f7ff ffa2 	bl	80a02e8 <_ZN19Adafruit_FXAS21002C6write8Ehh>
  write8(GYRO_REGISTER_CTRL_REG1, 0x0E);
 80a03a4:	220e      	movs	r2, #14
 80a03a6:	2113      	movs	r1, #19
 80a03a8:	4628      	mov	r0, r5
 80a03aa:	f7ff ff9d 	bl	80a02e8 <_ZN19Adafruit_FXAS21002C6write8Ehh>
  delay(100); // 60 ms + 1/ODR
 80a03ae:	2064      	movs	r0, #100	; 0x64
 80a03b0:	f001 fb22 	bl	80a19f8 <delay>
  /* ------------------------------------------------------------------ */

  return true;
 80a03b4:	2001      	movs	r0, #1
 80a03b6:	bd38      	pop	{r3, r4, r5, pc}
     for correct address and that the IC is properly connected */
  uint8_t id = read8(GYRO_REGISTER_WHO_AM_I);
  // Serial.print("WHO AM I? 0x"); Serial.println(id, HEX);
  if (id != FXAS21002C_ID)
  {
    return false;
 80a03b8:	4620      	mov	r0, r4
  write8(GYRO_REGISTER_CTRL_REG1, 0x0E);
  delay(100); // 60 ms + 1/ODR
  /* ------------------------------------------------------------------ */

  return true;
}
 80a03ba:	bd38      	pop	{r3, r4, r5, pc}

080a03bc <_GLOBAL__sub_I__ZN19Adafruit_FXAS21002C6write8Ehh>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a03bc:	f001 b956 	b.w	80a166c <HAL_Pin_Map>

080a03c0 <_ZN17Adafruit_FXOS8700D1Ev>:
      int16_t y;
      int16_t z;
    } fxos8700RawData_t;
/*=========================================================================*/

class Adafruit_FXOS8700 : public Adafruit_Sensor
 80a03c0:	4770      	bx	lr

080a03c2 <_ZN17Adafruit_FXOS8700D0Ev>:
 80a03c2:	b510      	push	{r4, lr}
 80a03c4:	4604      	mov	r4, r0
 80a03c6:	f7ff fe6a 	bl	80a009e <_ZdlPv>
 80a03ca:	4620      	mov	r0, r4
 80a03cc:	bd10      	pop	{r4, pc}

080a03ce <_ZN17Adafruit_FXOS87006write8Ehh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
void Adafruit_FXOS8700::write8(byte reg, byte value)
{
 80a03ce:	b538      	push	{r3, r4, r5, lr}
 80a03d0:	4614      	mov	r4, r2
 80a03d2:	460d      	mov	r5, r1
  Wire.beginTransmission(FXOS8700_ADDRESS);
 80a03d4:	f002 f9b4 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a03d8:	211f      	movs	r1, #31
 80a03da:	f001 fb6d 	bl	80a1ab8 <_ZN7TwoWire17beginTransmissionEi>
  #if ARDUINO >= 100
    Wire.write((uint8_t)reg);
 80a03de:	f002 f9af 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a03e2:	6803      	ldr	r3, [r0, #0]
 80a03e4:	4629      	mov	r1, r5
 80a03e6:	689b      	ldr	r3, [r3, #8]
 80a03e8:	4798      	blx	r3
    Wire.write((uint8_t)value);
 80a03ea:	f002 f9a9 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a03ee:	6803      	ldr	r3, [r0, #0]
 80a03f0:	4621      	mov	r1, r4
 80a03f2:	689b      	ldr	r3, [r3, #8]
 80a03f4:	4798      	blx	r3
  #else
    Wire.send(reg);
    Wire.send(value);
  #endif
  Wire.endTransmission();
 80a03f6:	f002 f9a3 	bl	80a2740 <_Z19__fetch_global_Wirev>
}
 80a03fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.write((uint8_t)value);
  #else
    Wire.send(reg);
    Wire.send(value);
  #endif
  Wire.endTransmission();
 80a03fe:	f001 bb62 	b.w	80a1ac6 <_ZN7TwoWire15endTransmissionEv>

080a0402 <_ZN17Adafruit_FXOS87005read8Eh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
byte Adafruit_FXOS8700::read8(byte reg)
{
 80a0402:	b510      	push	{r4, lr}
 80a0404:	460c      	mov	r4, r1
  byte value;

  Wire.beginTransmission((byte)FXOS8700_ADDRESS);
 80a0406:	f002 f99b 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a040a:	211f      	movs	r1, #31
 80a040c:	f001 fb50 	bl	80a1ab0 <_ZN7TwoWire17beginTransmissionEh>
  #if ARDUINO >= 100
    Wire.write((uint8_t)reg);
 80a0410:	f002 f996 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0414:	6803      	ldr	r3, [r0, #0]
 80a0416:	4621      	mov	r1, r4
 80a0418:	689b      	ldr	r3, [r3, #8]
 80a041a:	4798      	blx	r3
  #else
    Wire.send(reg);
  #endif
  if (Wire.endTransmission(false) != 0) return 0;
 80a041c:	f002 f990 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0420:	2100      	movs	r1, #0
 80a0422:	f001 fb4c 	bl	80a1abe <_ZN7TwoWire15endTransmissionEh>
 80a0426:	b960      	cbnz	r0, 80a0442 <_ZN17Adafruit_FXOS87005read8Eh+0x40>
  Wire.requestFrom((byte)FXOS8700_ADDRESS, (byte)1);
 80a0428:	f002 f98a 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a042c:	2201      	movs	r2, #1
 80a042e:	211f      	movs	r1, #31
 80a0430:	f001 fb3b 	bl	80a1aaa <_ZN7TwoWire11requestFromEhh>
  #if ARDUINO >= 100
    value = Wire.read();
 80a0434:	f002 f984 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0438:	6803      	ldr	r3, [r0, #0]
 80a043a:	695b      	ldr	r3, [r3, #20]
 80a043c:	4798      	blx	r3
 80a043e:	b2c0      	uxtb	r0, r0
 80a0440:	bd10      	pop	{r4, pc}
  #if ARDUINO >= 100
    Wire.write((uint8_t)reg);
  #else
    Wire.send(reg);
  #endif
  if (Wire.endTransmission(false) != 0) return 0;
 80a0442:	2000      	movs	r0, #0
  #else
    value = Wire.receive();
  #endif

  return value;
}
 80a0444:	bd10      	pop	{r4, pc}
	...

080a0448 <_ZN17Adafruit_FXOS8700C1Ell>:
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_FXOS8700 class
*/
/**************************************************************************/
Adafruit_FXOS8700::Adafruit_FXOS8700(int32_t accelSensorID, int32_t magSensorID)
 80a0448:	b510      	push	{r4, lr}
 80a044a:	4c02      	ldr	r4, [pc, #8]	; (80a0454 <_ZN17Adafruit_FXOS8700C1Ell+0xc>)
{
  _accelSensorID = accelSensorID;
 80a044c:	6141      	str	r1, [r0, #20]
/**************************************************************************/
/*!
    @brief  Instantiates a new Adafruit_FXOS8700 class
*/
/**************************************************************************/
Adafruit_FXOS8700::Adafruit_FXOS8700(int32_t accelSensorID, int32_t magSensorID)
 80a044e:	6004      	str	r4, [r0, #0]
{
  _accelSensorID = accelSensorID;
  _magSensorID = magSensorID;
 80a0450:	6182      	str	r2, [r0, #24]
}
 80a0452:	bd10      	pop	{r4, pc}
 80a0454:	080a3a48 	.word	0x080a3a48

080a0458 <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t>:
/*!
    @brief  Setups the HW
*/
/**************************************************************************/
bool Adafruit_FXOS8700::begin(fxos8700AccelRange_t rng)
{
 80a0458:	b538      	push	{r3, r4, r5, lr}
 80a045a:	4604      	mov	r4, r0
 80a045c:	460d      	mov	r5, r1
  /* Enable I2C */
  Wire.begin();
 80a045e:	f002 f96f 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0462:	f001 fb13 	bl	80a1a8c <_ZN7TwoWire5beginEv>

  /* Set the range the an appropriate value */
  _range = rng;
 80a0466:	74a5      	strb	r5, [r4, #18]

  /* Clear the raw sensor data */
  accel_raw.x = 0;
 80a0468:	2500      	movs	r5, #0
 80a046a:	80e5      	strh	r5, [r4, #6]
  accel_raw.y = 0;
 80a046c:	8125      	strh	r5, [r4, #8]
  accel_raw.z = 0;
 80a046e:	8165      	strh	r5, [r4, #10]
  mag_raw.x = 0;
 80a0470:	81a5      	strh	r5, [r4, #12]
  mag_raw.y = 0;
 80a0472:	81e5      	strh	r5, [r4, #14]
  mag_raw.z = 0;
 80a0474:	8225      	strh	r5, [r4, #16]

  /* Make sure we have the correct chip ID since this checks
     for correct address and that the IC is properly connected */
  uint8_t id = read8(FXOS8700_REGISTER_WHO_AM_I);
 80a0476:	210d      	movs	r1, #13
 80a0478:	4620      	mov	r0, r4
 80a047a:	f7ff ffc2 	bl	80a0402 <_ZN17Adafruit_FXOS87005read8Eh>
  if (id != FXOS8700_ID)
 80a047e:	28c7      	cmp	r0, #199	; 0xc7
 80a0480:	d126      	bne.n	80a04d0 <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t+0x78>
  {
    return false;
  }

  /* Set to standby mode (required to make changes to this register) */
  write8(FXOS8700_REGISTER_CTRL_REG1, 0);
 80a0482:	462a      	mov	r2, r5
 80a0484:	212a      	movs	r1, #42	; 0x2a
 80a0486:	4620      	mov	r0, r4
 80a0488:	f7ff ffa1 	bl	80a03ce <_ZN17Adafruit_FXOS87006write8Ehh>

  /* Configure the accelerometer */
  switch (_range) {
 80a048c:	7ca2      	ldrb	r2, [r4, #18]
 80a048e:	2a01      	cmp	r2, #1
 80a0490:	d004      	beq.n	80a049c <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t+0x44>
 80a0492:	d302      	bcc.n	80a049a <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t+0x42>
 80a0494:	2a02      	cmp	r2, #2
 80a0496:	d001      	beq.n	80a049c <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t+0x44>
 80a0498:	e004      	b.n	80a04a4 <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t+0x4c>
      case (ACCEL_RANGE_2G):
        write8(FXOS8700_REGISTER_XYZ_DATA_CFG, 0x00);
 80a049a:	462a      	mov	r2, r5
      break;
      case (ACCEL_RANGE_4G):
        write8(FXOS8700_REGISTER_XYZ_DATA_CFG, 0x01);
      break;
      case (ACCEL_RANGE_8G):
        write8(FXOS8700_REGISTER_XYZ_DATA_CFG, 0x02);
 80a049c:	210e      	movs	r1, #14
 80a049e:	4620      	mov	r0, r4
 80a04a0:	f7ff ff95 	bl	80a03ce <_ZN17Adafruit_FXOS87006write8Ehh>
      break;
  }
  /* High resolution */
  write8(FXOS8700_REGISTER_CTRL_REG2, 0x02);
 80a04a4:	4620      	mov	r0, r4
 80a04a6:	2202      	movs	r2, #2
 80a04a8:	212b      	movs	r1, #43	; 0x2b
 80a04aa:	f7ff ff90 	bl	80a03ce <_ZN17Adafruit_FXOS87006write8Ehh>
  /* Active, Normal Mode, Low Noise, 100Hz in Hybrid Mode */
  write8(FXOS8700_REGISTER_CTRL_REG1, 0x15);
 80a04ae:	4620      	mov	r0, r4
 80a04b0:	2215      	movs	r2, #21
 80a04b2:	212a      	movs	r1, #42	; 0x2a
 80a04b4:	f7ff ff8b 	bl	80a03ce <_ZN17Adafruit_FXOS87006write8Ehh>

  /* Configure the magnetometer */
  /* Hybrid Mode, Over Sampling Rate = 16 */
  write8(FXOS8700_REGISTER_MCTRL_REG1, 0x1F);
 80a04b8:	4620      	mov	r0, r4
 80a04ba:	221f      	movs	r2, #31
 80a04bc:	215b      	movs	r1, #91	; 0x5b
 80a04be:	f7ff ff86 	bl	80a03ce <_ZN17Adafruit_FXOS87006write8Ehh>
  /* Jump to reg 0x33 after reading 0x06 */
  write8(FXOS8700_REGISTER_MCTRL_REG2, 0x20);
 80a04c2:	4620      	mov	r0, r4
 80a04c4:	2220      	movs	r2, #32
 80a04c6:	215c      	movs	r1, #92	; 0x5c
 80a04c8:	f7ff ff81 	bl	80a03ce <_ZN17Adafruit_FXOS87006write8Ehh>

  return true;
 80a04cc:	2001      	movs	r0, #1
 80a04ce:	bd38      	pop	{r3, r4, r5, pc}
  /* Make sure we have the correct chip ID since this checks
     for correct address and that the IC is properly connected */
  uint8_t id = read8(FXOS8700_REGISTER_WHO_AM_I);
  if (id != FXOS8700_ID)
  {
    return false;
 80a04d0:	4628      	mov	r0, r5
  write8(FXOS8700_REGISTER_MCTRL_REG1, 0x1F);
  /* Jump to reg 0x33 after reading 0x06 */
  write8(FXOS8700_REGISTER_MCTRL_REG2, 0x20);

  return true;
}
 80a04d2:	bd38      	pop	{r3, r4, r5, pc}

080a04d4 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_>:
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_FXOS8700::getEvent(sensors_event_t* accelEvent, sensors_event_t* magEvent)
{
 80a04d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a04d8:	460c      	mov	r4, r1
 80a04da:	4615      	mov	r5, r2
 80a04dc:	4606      	mov	r6, r0
  /* Clear the event */
  memset(accelEvent, 0, sizeof(sensors_event_t));
 80a04de:	2724      	movs	r7, #36	; 0x24
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_FXOS8700::getEvent(sensors_event_t* accelEvent, sensors_event_t* magEvent)
{
 80a04e0:	b089      	sub	sp, #36	; 0x24
  /* Clear the event */
  memset(accelEvent, 0, sizeof(sensors_event_t));
 80a04e2:	463a      	mov	r2, r7
 80a04e4:	2100      	movs	r1, #0
 80a04e6:	4620      	mov	r0, r4
 80a04e8:	f003 fa27 	bl	80a393a <memset>
  memset(magEvent, 0, sizeof(sensors_event_t));
 80a04ec:	463a      	mov	r2, r7
 80a04ee:	2100      	movs	r1, #0
 80a04f0:	4628      	mov	r0, r5
 80a04f2:	f003 fa22 	bl	80a393a <memset>

  /* Clear the raw data placeholder */
  accel_raw.x = 0;
 80a04f6:	2300      	movs	r3, #0
 80a04f8:	80f3      	strh	r3, [r6, #6]
  accel_raw.y = 0;
 80a04fa:	8133      	strh	r3, [r6, #8]
  accel_raw.z = 0;
 80a04fc:	8173      	strh	r3, [r6, #10]
  mag_raw.x = 0;
 80a04fe:	81b3      	strh	r3, [r6, #12]
  mag_raw.y = 0;
 80a0500:	81f3      	strh	r3, [r6, #14]
  mag_raw.z = 0;
 80a0502:	8233      	strh	r3, [r6, #16]

  /* Set the static metadata */
  accelEvent->version   = sizeof(sensors_event_t);
 80a0504:	6027      	str	r7, [r4, #0]
  accelEvent->sensor_id = _accelSensorID;
 80a0506:	6973      	ldr	r3, [r6, #20]
 80a0508:	6063      	str	r3, [r4, #4]
  accelEvent->type      = SENSOR_TYPE_ACCELEROMETER;
 80a050a:	2301      	movs	r3, #1
 80a050c:	60a3      	str	r3, [r4, #8]

  magEvent->version   = sizeof(sensors_event_t);
 80a050e:	602f      	str	r7, [r5, #0]
  magEvent->sensor_id = _magSensorID;
 80a0510:	69b3      	ldr	r3, [r6, #24]
 80a0512:	606b      	str	r3, [r5, #4]
  magEvent->type      = SENSOR_TYPE_MAGNETIC_FIELD;
 80a0514:	2302      	movs	r3, #2
 80a0516:	60ab      	str	r3, [r5, #8]

  /* Read 13 bytes from the sensor */
  Wire.beginTransmission((byte)FXOS8700_ADDRESS);
 80a0518:	f002 f912 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a051c:	211f      	movs	r1, #31
 80a051e:	f001 fac7 	bl	80a1ab0 <_ZN7TwoWire17beginTransmissionEh>
  #if ARDUINO >= 100
    Wire.write(FXOS8700_REGISTER_STATUS | 0x80);
 80a0522:	f002 f90d 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0526:	6803      	ldr	r3, [r0, #0]
 80a0528:	2180      	movs	r1, #128	; 0x80
 80a052a:	689b      	ldr	r3, [r3, #8]
 80a052c:	4798      	blx	r3
  #else
    Wire.send(FXOS8700_REGISTER_STATUS | 0x80);
  #endif
  Wire.endTransmission();
 80a052e:	f002 f907 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0532:	f001 fac8 	bl	80a1ac6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)FXOS8700_ADDRESS, (byte)13);
 80a0536:	f002 f903 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a053a:	220d      	movs	r2, #13
 80a053c:	211f      	movs	r1, #31
 80a053e:	f001 fab4 	bl	80a1aaa <_ZN7TwoWire11requestFromEhh>

  /* ToDo: Check status first! */
  #if ARDUINO >= 100
    uint8_t status = Wire.read();
 80a0542:	f002 f8fd 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0546:	6803      	ldr	r3, [r0, #0]
 80a0548:	695b      	ldr	r3, [r3, #20]
 80a054a:	4798      	blx	r3
    uint8_t axhi = Wire.read();
 80a054c:	f002 f8f8 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0550:	6803      	ldr	r3, [r0, #0]
 80a0552:	695b      	ldr	r3, [r3, #20]
 80a0554:	4798      	blx	r3
 80a0556:	4681      	mov	r9, r0
    uint8_t axlo = Wire.read();
 80a0558:	f002 f8f2 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a055c:	6803      	ldr	r3, [r0, #0]
 80a055e:	695b      	ldr	r3, [r3, #20]
 80a0560:	4798      	blx	r3
 80a0562:	4680      	mov	r8, r0
    uint8_t ayhi = Wire.read();
 80a0564:	f002 f8ec 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0568:	6803      	ldr	r3, [r0, #0]
 80a056a:	695b      	ldr	r3, [r3, #20]
 80a056c:	4798      	blx	r3
 80a056e:	4682      	mov	sl, r0
    uint8_t aylo = Wire.read();
 80a0570:	f002 f8e6 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0574:	6803      	ldr	r3, [r0, #0]
 80a0576:	695b      	ldr	r3, [r3, #20]
 80a0578:	4798      	blx	r3
 80a057a:	4607      	mov	r7, r0
    uint8_t azhi = Wire.read();
 80a057c:	f002 f8e0 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0580:	6803      	ldr	r3, [r0, #0]
 80a0582:	695b      	ldr	r3, [r3, #20]
 80a0584:	4798      	blx	r3
 80a0586:	9001      	str	r0, [sp, #4]
    uint8_t azlo = Wire.read();
 80a0588:	f002 f8da 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a058c:	6803      	ldr	r3, [r0, #0]
 80a058e:	695b      	ldr	r3, [r3, #20]
 80a0590:	4798      	blx	r3
 80a0592:	9002      	str	r0, [sp, #8]
    uint8_t mxhi = Wire.read();
 80a0594:	f002 f8d4 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a0598:	6803      	ldr	r3, [r0, #0]
 80a059a:	695b      	ldr	r3, [r3, #20]
 80a059c:	4798      	blx	r3
 80a059e:	9003      	str	r0, [sp, #12]
    uint8_t mxlo = Wire.read();
 80a05a0:	f002 f8ce 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a05a4:	6803      	ldr	r3, [r0, #0]
 80a05a6:	695b      	ldr	r3, [r3, #20]
 80a05a8:	4798      	blx	r3
 80a05aa:	9004      	str	r0, [sp, #16]
    uint8_t myhi = Wire.read();
 80a05ac:	f002 f8c8 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a05b0:	6803      	ldr	r3, [r0, #0]
 80a05b2:	695b      	ldr	r3, [r3, #20]
 80a05b4:	4798      	blx	r3
 80a05b6:	4683      	mov	fp, r0
    uint8_t mylo = Wire.read();
 80a05b8:	f002 f8c2 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a05bc:	6803      	ldr	r3, [r0, #0]
 80a05be:	695b      	ldr	r3, [r3, #20]
 80a05c0:	4798      	blx	r3
 80a05c2:	9007      	str	r0, [sp, #28]
    uint8_t mzhi = Wire.read();
 80a05c4:	f002 f8bc 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a05c8:	6803      	ldr	r3, [r0, #0]
 80a05ca:	695b      	ldr	r3, [r3, #20]
 80a05cc:	4798      	blx	r3
 80a05ce:	9006      	str	r0, [sp, #24]
    uint8_t mzlo = Wire.read();
 80a05d0:	f002 f8b6 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a05d4:	6803      	ldr	r3, [r0, #0]
 80a05d6:	695b      	ldr	r3, [r3, #20]
 80a05d8:	4798      	blx	r3
 80a05da:	9005      	str	r0, [sp, #20]
 80a05dc:	f001 f83e 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    uint8_t mzhi = Wire.receive();
    uint8_t mzlo = Wire.receive();
  #endif

  /* Set the timestamps */
  accelEvent->timestamp = millis();
 80a05e0:	6120      	str	r0, [r4, #16]
  magEvent->timestamp = accelEvent->timestamp;
 80a05e2:	6128      	str	r0, [r5, #16]

  /* Shift values to create properly formed integers */
  /* Note, accel data is 14-bit and left-aligned, so we shift two bit right */
  accelEvent->acceleration.x = (int16_t)((axhi << 8) | axlo) >> 2;
 80a05e4:	fa5f f088 	uxtb.w	r0, r8
 80a05e8:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 80a05ec:	f340 008d 	sbfx	r0, r0, #2, #14
 80a05f0:	f002 ff4a 	bl	80a3488 <__aeabi_i2f>
 80a05f4:	6160      	str	r0, [r4, #20]
  accelEvent->acceleration.y = (int16_t)((ayhi << 8) | aylo) >> 2;
 80a05f6:	b2f8      	uxtb	r0, r7
 80a05f8:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 80a05fc:	f340 008d 	sbfx	r0, r0, #2, #14
 80a0600:	f002 ff42 	bl	80a3488 <__aeabi_i2f>
  accelEvent->acceleration.z = (int16_t)((azhi << 8) | azlo) >> 2;
 80a0604:	9b01      	ldr	r3, [sp, #4]
  magEvent->timestamp = accelEvent->timestamp;

  /* Shift values to create properly formed integers */
  /* Note, accel data is 14-bit and left-aligned, so we shift two bit right */
  accelEvent->acceleration.x = (int16_t)((axhi << 8) | axlo) >> 2;
  accelEvent->acceleration.y = (int16_t)((ayhi << 8) | aylo) >> 2;
 80a0606:	61a0      	str	r0, [r4, #24]
  accelEvent->acceleration.z = (int16_t)((azhi << 8) | azlo) >> 2;
 80a0608:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a060c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80a0610:	f340 008d 	sbfx	r0, r0, #2, #14
 80a0614:	f002 ff38 	bl	80a3488 <__aeabi_i2f>
  magEvent->magnetic.x = (int16_t)((mxhi << 8) | mxlo);
 80a0618:	9b03      	ldr	r3, [sp, #12]

  /* Shift values to create properly formed integers */
  /* Note, accel data is 14-bit and left-aligned, so we shift two bit right */
  accelEvent->acceleration.x = (int16_t)((axhi << 8) | axlo) >> 2;
  accelEvent->acceleration.y = (int16_t)((ayhi << 8) | aylo) >> 2;
  accelEvent->acceleration.z = (int16_t)((azhi << 8) | azlo) >> 2;
 80a061a:	61e0      	str	r0, [r4, #28]
  magEvent->magnetic.x = (int16_t)((mxhi << 8) | mxlo);
 80a061c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80a0620:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80a0624:	b200      	sxth	r0, r0
 80a0626:	f002 ff2f 	bl	80a3488 <__aeabi_i2f>
  magEvent->magnetic.y = (int16_t)((myhi << 8) | mylo);
 80a062a:	9a07      	ldr	r2, [sp, #28]
  /* Shift values to create properly formed integers */
  /* Note, accel data is 14-bit and left-aligned, so we shift two bit right */
  accelEvent->acceleration.x = (int16_t)((axhi << 8) | axlo) >> 2;
  accelEvent->acceleration.y = (int16_t)((ayhi << 8) | aylo) >> 2;
  accelEvent->acceleration.z = (int16_t)((azhi << 8) | azlo) >> 2;
  magEvent->magnetic.x = (int16_t)((mxhi << 8) | mxlo);
 80a062c:	6168      	str	r0, [r5, #20]
  magEvent->magnetic.y = (int16_t)((myhi << 8) | mylo);
 80a062e:	b2d0      	uxtb	r0, r2
 80a0630:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
 80a0634:	b200      	sxth	r0, r0
 80a0636:	f002 ff27 	bl	80a3488 <__aeabi_i2f>
  magEvent->magnetic.z = (int16_t)((mzhi << 8) | mzlo);
 80a063a:	9b05      	ldr	r3, [sp, #20]
 80a063c:	9906      	ldr	r1, [sp, #24]
  /* Note, accel data is 14-bit and left-aligned, so we shift two bit right */
  accelEvent->acceleration.x = (int16_t)((axhi << 8) | axlo) >> 2;
  accelEvent->acceleration.y = (int16_t)((ayhi << 8) | aylo) >> 2;
  accelEvent->acceleration.z = (int16_t)((azhi << 8) | azlo) >> 2;
  magEvent->magnetic.x = (int16_t)((mxhi << 8) | mxlo);
  magEvent->magnetic.y = (int16_t)((myhi << 8) | mylo);
 80a063e:	61a8      	str	r0, [r5, #24]
  magEvent->magnetic.z = (int16_t)((mzhi << 8) | mzlo);
 80a0640:	b2d8      	uxtb	r0, r3
 80a0642:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80a0646:	b200      	sxth	r0, r0
 80a0648:	f002 ff1e 	bl	80a3488 <__aeabi_i2f>
 80a064c:	61e8      	str	r0, [r5, #28]

  /* Assign raw values in case someone needs them */
  accel_raw.x = accelEvent->acceleration.x;
 80a064e:	6960      	ldr	r0, [r4, #20]
 80a0650:	f003 f934 	bl	80a38bc <__aeabi_f2iz>
 80a0654:	80f0      	strh	r0, [r6, #6]
  accel_raw.y = accelEvent->acceleration.y;
 80a0656:	69a0      	ldr	r0, [r4, #24]
 80a0658:	f003 f930 	bl	80a38bc <__aeabi_f2iz>
 80a065c:	8130      	strh	r0, [r6, #8]
  accel_raw.z = accelEvent->acceleration.z;
 80a065e:	69e0      	ldr	r0, [r4, #28]
 80a0660:	f003 f92c 	bl	80a38bc <__aeabi_f2iz>
 80a0664:	8170      	strh	r0, [r6, #10]
  mag_raw.x = magEvent->magnetic.x;
 80a0666:	6968      	ldr	r0, [r5, #20]
 80a0668:	f003 f928 	bl	80a38bc <__aeabi_f2iz>
 80a066c:	81b0      	strh	r0, [r6, #12]
  mag_raw.y = magEvent->magnetic.y;
 80a066e:	69a8      	ldr	r0, [r5, #24]
 80a0670:	f003 f924 	bl	80a38bc <__aeabi_f2iz>
 80a0674:	81f0      	strh	r0, [r6, #14]
  mag_raw.z = magEvent->magnetic.z;
 80a0676:	69e8      	ldr	r0, [r5, #28]
 80a0678:	f003 f920 	bl	80a38bc <__aeabi_f2iz>

  /* Convert accel values to m/s^2 */
  switch (_range) {
 80a067c:	7cb3      	ldrb	r3, [r6, #18]
  accel_raw.x = accelEvent->acceleration.x;
  accel_raw.y = accelEvent->acceleration.y;
  accel_raw.z = accelEvent->acceleration.z;
  mag_raw.x = magEvent->magnetic.x;
  mag_raw.y = magEvent->magnetic.y;
  mag_raw.z = magEvent->magnetic.z;
 80a067e:	8230      	strh	r0, [r6, #16]

  /* Convert accel values to m/s^2 */
  switch (_range) {
 80a0680:	2b01      	cmp	r3, #1
 80a0682:	d01a      	beq.n	80a06ba <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x1e6>
 80a0684:	d30d      	bcc.n	80a06a2 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x1ce>
 80a0686:	2b02      	cmp	r3, #2
 80a0688:	d126      	bne.n	80a06d8 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x204>
          accelEvent->acceleration.x *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.z *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_8G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a068a:	491d      	ldr	r1, [pc, #116]	; (80a0700 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x22c>)
 80a068c:	6960      	ldr	r0, [r4, #20]
 80a068e:	f002 ff4f 	bl	80a3530 <__aeabi_fmul>
          accelEvent->acceleration.y *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a0692:	491b      	ldr	r1, [pc, #108]	; (80a0700 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x22c>)
          accelEvent->acceleration.x *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.z *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_8G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a0694:	6160      	str	r0, [r4, #20]
          accelEvent->acceleration.y *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a0696:	69a0      	ldr	r0, [r4, #24]
 80a0698:	f002 ff4a 	bl	80a3530 <__aeabi_fmul>
          accelEvent->acceleration.z *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a069c:	4918      	ldr	r1, [pc, #96]	; (80a0700 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x22c>)
          accelEvent->acceleration.y *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.z *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_8G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a069e:	61a0      	str	r0, [r4, #24]
 80a06a0:	e016      	b.n	80a06d0 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x1fc>
  mag_raw.z = magEvent->magnetic.z;

  /* Convert accel values to m/s^2 */
  switch (_range) {
      case (ACCEL_RANGE_2G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a06a2:	4918      	ldr	r1, [pc, #96]	; (80a0704 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x230>)
 80a06a4:	6960      	ldr	r0, [r4, #20]
 80a06a6:	f002 ff43 	bl	80a3530 <__aeabi_fmul>
          accelEvent->acceleration.y *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a06aa:	4916      	ldr	r1, [pc, #88]	; (80a0704 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x230>)
  mag_raw.z = magEvent->magnetic.z;

  /* Convert accel values to m/s^2 */
  switch (_range) {
      case (ACCEL_RANGE_2G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a06ac:	6160      	str	r0, [r4, #20]
          accelEvent->acceleration.y *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a06ae:	69a0      	ldr	r0, [r4, #24]
 80a06b0:	f002 ff3e 	bl	80a3530 <__aeabi_fmul>
          accelEvent->acceleration.z *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a06b4:	4913      	ldr	r1, [pc, #76]	; (80a0704 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x230>)

  /* Convert accel values to m/s^2 */
  switch (_range) {
      case (ACCEL_RANGE_2G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a06b6:	61a0      	str	r0, [r4, #24]
 80a06b8:	e00a      	b.n	80a06d0 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x1fc>
          accelEvent->acceleration.z *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_4G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a06ba:	4913      	ldr	r1, [pc, #76]	; (80a0708 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x234>)
 80a06bc:	6960      	ldr	r0, [r4, #20]
 80a06be:	f002 ff37 	bl	80a3530 <__aeabi_fmul>
          accelEvent->acceleration.y *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a06c2:	4911      	ldr	r1, [pc, #68]	; (80a0708 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x234>)
          accelEvent->acceleration.x *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.z *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_4G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a06c4:	6160      	str	r0, [r4, #20]
          accelEvent->acceleration.y *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a06c6:	69a0      	ldr	r0, [r4, #24]
 80a06c8:	f002 ff32 	bl	80a3530 <__aeabi_fmul>
          accelEvent->acceleration.z *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a06cc:	490e      	ldr	r1, [pc, #56]	; (80a0708 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x234>)
          accelEvent->acceleration.y *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.z *= ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_4G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a06ce:	61a0      	str	r0, [r4, #24]
          accelEvent->acceleration.z *= ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_8G):
          accelEvent->acceleration.x *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.y *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
          accelEvent->acceleration.z *= ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a06d0:	69e0      	ldr	r0, [r4, #28]
 80a06d2:	f002 ff2d 	bl	80a3530 <__aeabi_fmul>
 80a06d6:	61e0      	str	r0, [r4, #28]
      break;
  }


  /* Convert mag values to uTesla */
  magEvent->magnetic.x *= MAG_UT_LSB;
 80a06d8:	6968      	ldr	r0, [r5, #20]
 80a06da:	490c      	ldr	r1, [pc, #48]	; (80a070c <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x238>)
 80a06dc:	f002 ff28 	bl	80a3530 <__aeabi_fmul>
  magEvent->magnetic.y *= MAG_UT_LSB;
 80a06e0:	490a      	ldr	r1, [pc, #40]	; (80a070c <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x238>)
      break;
  }


  /* Convert mag values to uTesla */
  magEvent->magnetic.x *= MAG_UT_LSB;
 80a06e2:	6168      	str	r0, [r5, #20]
  magEvent->magnetic.y *= MAG_UT_LSB;
 80a06e4:	69a8      	ldr	r0, [r5, #24]
 80a06e6:	f002 ff23 	bl	80a3530 <__aeabi_fmul>
  magEvent->magnetic.z *= MAG_UT_LSB;
 80a06ea:	4908      	ldr	r1, [pc, #32]	; (80a070c <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_+0x238>)
  }


  /* Convert mag values to uTesla */
  magEvent->magnetic.x *= MAG_UT_LSB;
  magEvent->magnetic.y *= MAG_UT_LSB;
 80a06ec:	61a8      	str	r0, [r5, #24]
  magEvent->magnetic.z *= MAG_UT_LSB;
 80a06ee:	69e8      	ldr	r0, [r5, #28]
 80a06f0:	f002 ff1e 	bl	80a3530 <__aeabi_fmul>
 80a06f4:	61e8      	str	r0, [r5, #28]

  return true;
}
 80a06f6:	2001      	movs	r0, #1
 80a06f8:	b009      	add	sp, #36	; 0x24
 80a06fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a06fe:	bf00      	nop
 80a0700:	3c1cd0e7 	.word	0x3c1cd0e7
 80a0704:	3b1cd0e7 	.word	0x3b1cd0e7
 80a0708:	3b9cd0e7 	.word	0x3b9cd0e7
 80a070c:	3dcccccd 	.word	0x3dcccccd

080a0710 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_t>:
}

/* To keep Adafruit_Sensor happy we need a single sensor interface */
/* When only one sensor is requested, return accel data */
bool Adafruit_FXOS8700::getEvent(sensors_event_t* accelEvent)
{
 80a0710:	b500      	push	{lr}
 80a0712:	b08b      	sub	sp, #44	; 0x2c
    sensors_event_t mag;

    return getEvent(accelEvent, &mag);
 80a0714:	aa01      	add	r2, sp, #4
 80a0716:	f7ff fedd 	bl	80a04d4 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_>
}
 80a071a:	b00b      	add	sp, #44	; 0x2c
 80a071c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0720 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_>:
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void  Adafruit_FXOS8700::getSensor(sensor_t* accelSensor, sensor_t* magSensor)
{
 80a0720:	b570      	push	{r4, r5, r6, lr}
 80a0722:	460c      	mov	r4, r1
 80a0724:	4615      	mov	r5, r2
 80a0726:	4606      	mov	r6, r0
  /* Clear the sensor_t object */
  memset(accelSensor, 0, sizeof(sensor_t));
 80a0728:	2228      	movs	r2, #40	; 0x28
 80a072a:	2100      	movs	r1, #0
 80a072c:	4620      	mov	r0, r4
 80a072e:	f003 f904 	bl	80a393a <memset>
  memset(magSensor, 0, sizeof(sensor_t));
 80a0732:	2228      	movs	r2, #40	; 0x28
 80a0734:	2100      	movs	r1, #0
 80a0736:	4628      	mov	r0, r5
 80a0738:	f003 f8ff 	bl	80a393a <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (accelSensor->name, "FXOS8700", sizeof(accelSensor->name) - 1);
 80a073c:	220b      	movs	r2, #11
 80a073e:	491c      	ldr	r1, [pc, #112]	; (80a07b0 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x90>)
 80a0740:	4620      	mov	r0, r4
 80a0742:	f003 f945 	bl	80a39d0 <strncpy>
  accelSensor->name[sizeof(accelSensor->name) - 1] = 0;
 80a0746:	2300      	movs	r3, #0
  accelSensor->version     = 1;
 80a0748:	2201      	movs	r2, #1
  memset(accelSensor, 0, sizeof(sensor_t));
  memset(magSensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (accelSensor->name, "FXOS8700", sizeof(accelSensor->name) - 1);
  accelSensor->name[sizeof(accelSensor->name) - 1] = 0;
 80a074a:	72e3      	strb	r3, [r4, #11]
  accelSensor->version     = 1;
 80a074c:	60e2      	str	r2, [r4, #12]
  accelSensor->sensor_id   = _accelSensorID;
 80a074e:	6971      	ldr	r1, [r6, #20]
  accelSensor->type        = SENSOR_TYPE_ACCELEROMETER;
 80a0750:	6162      	str	r2, [r4, #20]

  /* Insert the sensor name in the fixed length char array */
  strncpy (accelSensor->name, "FXOS8700", sizeof(accelSensor->name) - 1);
  accelSensor->name[sizeof(accelSensor->name) - 1] = 0;
  accelSensor->version     = 1;
  accelSensor->sensor_id   = _accelSensorID;
 80a0752:	6121      	str	r1, [r4, #16]
  accelSensor->type        = SENSOR_TYPE_ACCELEROMETER;
  accelSensor->min_delay   = 0.01F; // 100Hz
 80a0754:	6263      	str	r3, [r4, #36]	; 0x24
  switch (_range) {
 80a0756:	7cb3      	ldrb	r3, [r6, #18]
 80a0758:	4293      	cmp	r3, r2
 80a075a:	d00e      	beq.n	80a077a <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x5a>
 80a075c:	d307      	bcc.n	80a076e <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x4e>
 80a075e:	2b02      	cmp	r3, #2
 80a0760:	d111      	bne.n	80a0786 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x66>
          accelSensor->max_value   = 4.0F * SENSORS_GRAVITY_STANDARD;
          accelSensor->min_value   = -3.998F * SENSORS_GRAVITY_STANDARD;
          accelSensor->resolution  = ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
      break;
      case (ACCEL_RANGE_8G):
          accelSensor->max_value   = 8.0F * SENSORS_GRAVITY_STANDARD;
 80a0762:	4b14      	ldr	r3, [pc, #80]	; (80a07b4 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x94>)
 80a0764:	61a3      	str	r3, [r4, #24]
          accelSensor->min_value   = -7.996F * SENSORS_GRAVITY_STANDARD;
 80a0766:	4b14      	ldr	r3, [pc, #80]	; (80a07b8 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x98>)
 80a0768:	61e3      	str	r3, [r4, #28]
          accelSensor->resolution  = ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a076a:	4b14      	ldr	r3, [pc, #80]	; (80a07bc <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x9c>)
 80a076c:	e00a      	b.n	80a0784 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x64>
  accelSensor->sensor_id   = _accelSensorID;
  accelSensor->type        = SENSOR_TYPE_ACCELEROMETER;
  accelSensor->min_delay   = 0.01F; // 100Hz
  switch (_range) {
      case (ACCEL_RANGE_2G):
          accelSensor->max_value   = 2.0F * SENSORS_GRAVITY_STANDARD;
 80a076e:	4b14      	ldr	r3, [pc, #80]	; (80a07c0 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xa0>)
 80a0770:	61a3      	str	r3, [r4, #24]
          accelSensor->min_value   = -1.999F * SENSORS_GRAVITY_STANDARD;
 80a0772:	4b14      	ldr	r3, [pc, #80]	; (80a07c4 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xa4>)
 80a0774:	61e3      	str	r3, [r4, #28]
          accelSensor->resolution  = ACCEL_MG_LSB_2G * SENSORS_GRAVITY_STANDARD;
 80a0776:	4b14      	ldr	r3, [pc, #80]	; (80a07c8 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xa8>)
 80a0778:	e004      	b.n	80a0784 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x64>
      break;
      case (ACCEL_RANGE_4G):
          accelSensor->max_value   = 4.0F * SENSORS_GRAVITY_STANDARD;
 80a077a:	4b14      	ldr	r3, [pc, #80]	; (80a07cc <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xac>)
 80a077c:	61a3      	str	r3, [r4, #24]
          accelSensor->min_value   = -3.998F * SENSORS_GRAVITY_STANDARD;
 80a077e:	4b14      	ldr	r3, [pc, #80]	; (80a07d0 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xb0>)
 80a0780:	61e3      	str	r3, [r4, #28]
          accelSensor->resolution  = ACCEL_MG_LSB_4G * SENSORS_GRAVITY_STANDARD;
 80a0782:	4b14      	ldr	r3, [pc, #80]	; (80a07d4 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xb4>)
      break;
      case (ACCEL_RANGE_8G):
          accelSensor->max_value   = 8.0F * SENSORS_GRAVITY_STANDARD;
          accelSensor->min_value   = -7.996F * SENSORS_GRAVITY_STANDARD;
          accelSensor->resolution  = ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
 80a0784:	6223      	str	r3, [r4, #32]
      break;
  }

  strncpy (magSensor->name, "FXOS8700", sizeof(magSensor->name) - 1);
 80a0786:	220b      	movs	r2, #11
 80a0788:	4909      	ldr	r1, [pc, #36]	; (80a07b0 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0x90>)
 80a078a:	4628      	mov	r0, r5
 80a078c:	f003 f920 	bl	80a39d0 <strncpy>
  magSensor->name[sizeof(magSensor->name) - 1] = 0;
 80a0790:	2300      	movs	r3, #0
  magSensor->version     = 1;
 80a0792:	2201      	movs	r2, #1
          accelSensor->resolution  = ACCEL_MG_LSB_8G * SENSORS_GRAVITY_STANDARD;
      break;
  }

  strncpy (magSensor->name, "FXOS8700", sizeof(magSensor->name) - 1);
  magSensor->name[sizeof(magSensor->name) - 1] = 0;
 80a0794:	72eb      	strb	r3, [r5, #11]
  magSensor->version     = 1;
 80a0796:	60ea      	str	r2, [r5, #12]
  magSensor->sensor_id   = _magSensorID;
 80a0798:	69b2      	ldr	r2, [r6, #24]
  magSensor->type        = SENSOR_TYPE_MAGNETIC_FIELD;
  magSensor->min_delay   = 0.01F; // 100Hz
 80a079a:	626b      	str	r3, [r5, #36]	; 0x24
  magSensor->max_value   = 1200.0F;
 80a079c:	4b0e      	ldr	r3, [pc, #56]	; (80a07d8 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xb8>)
  }

  strncpy (magSensor->name, "FXOS8700", sizeof(magSensor->name) - 1);
  magSensor->name[sizeof(magSensor->name) - 1] = 0;
  magSensor->version     = 1;
  magSensor->sensor_id   = _magSensorID;
 80a079e:	612a      	str	r2, [r5, #16]
  magSensor->type        = SENSOR_TYPE_MAGNETIC_FIELD;
  magSensor->min_delay   = 0.01F; // 100Hz
  magSensor->max_value   = 1200.0F;
 80a07a0:	61ab      	str	r3, [r5, #24]
  magSensor->min_value   = -1200.0F;
 80a07a2:	4b0e      	ldr	r3, [pc, #56]	; (80a07dc <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xbc>)

  strncpy (magSensor->name, "FXOS8700", sizeof(magSensor->name) - 1);
  magSensor->name[sizeof(magSensor->name) - 1] = 0;
  magSensor->version     = 1;
  magSensor->sensor_id   = _magSensorID;
  magSensor->type        = SENSOR_TYPE_MAGNETIC_FIELD;
 80a07a4:	2202      	movs	r2, #2
  magSensor->min_delay   = 0.01F; // 100Hz
  magSensor->max_value   = 1200.0F;
  magSensor->min_value   = -1200.0F;
 80a07a6:	61eb      	str	r3, [r5, #28]
  magSensor->resolution  = 0.1F;
 80a07a8:	4b0d      	ldr	r3, [pc, #52]	; (80a07e0 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_+0xc0>)

  strncpy (magSensor->name, "FXOS8700", sizeof(magSensor->name) - 1);
  magSensor->name[sizeof(magSensor->name) - 1] = 0;
  magSensor->version     = 1;
  magSensor->sensor_id   = _magSensorID;
  magSensor->type        = SENSOR_TYPE_MAGNETIC_FIELD;
 80a07aa:	616a      	str	r2, [r5, #20]
  magSensor->min_delay   = 0.01F; // 100Hz
  magSensor->max_value   = 1200.0F;
  magSensor->min_value   = -1200.0F;
  magSensor->resolution  = 0.1F;
 80a07ac:	622b      	str	r3, [r5, #32]
 80a07ae:	bd70      	pop	{r4, r5, r6, pc}
 80a07b0:	080a3a34 	.word	0x080a3a34
 80a07b4:	429ce80a 	.word	0x429ce80a
 80a07b8:	c29cd3f4 	.word	0xc29cd3f4
 80a07bc:	3c1cd0e7 	.word	0x3c1cd0e7
 80a07c0:	419ce80a 	.word	0x419ce80a
 80a07c4:	c19cd3f4 	.word	0xc19cd3f4
 80a07c8:	3b1cd0e7 	.word	0x3b1cd0e7
 80a07cc:	421ce80a 	.word	0x421ce80a
 80a07d0:	c21cd3f4 	.word	0xc21cd3f4
 80a07d4:	3b9cd0e7 	.word	0x3b9cd0e7
 80a07d8:	44960000 	.word	0x44960000
 80a07dc:	c4960000 	.word	0xc4960000
 80a07e0:	3dcccccd 	.word	0x3dcccccd

080a07e4 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_t>:
}

/* To keep Adafruit_Sensor happy we need a single sensor interface */
/* When only one sensor is requested, return accel data */
void  Adafruit_FXOS8700::getSensor(sensor_t* accelSensor)
{
 80a07e4:	b500      	push	{lr}
 80a07e6:	b08b      	sub	sp, #44	; 0x2c
    sensor_t mag;

    return getSensor(accelSensor, &mag);
 80a07e8:	466a      	mov	r2, sp
 80a07ea:	f7ff ff99 	bl	80a0720 <_ZN17Adafruit_FXOS87009getSensorEP8sensor_tS1_>
}
 80a07ee:	b00b      	add	sp, #44	; 0x2c
 80a07f0:	f85d fb04 	ldr.w	pc, [sp], #4

080a07f4 <_GLOBAL__sub_I__ZN17Adafruit_FXOS87006write8Ehh>:
 80a07f4:	f000 bf3a 	b.w	80a166c <HAL_Pin_Map>

080a07f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a07f8:	4770      	bx	lr
	...

080a07fc <_Z4PINGR10OSCMessage>:
// Serial.println(WiFi.localIP());
delay(10);
}

void PING(OSCMessage &inMessage)
{
 80a07fc:	b508      	push	{r3, lr}
    Serial.println("MATT HAL ");
 80a07fe:	f001 fe25 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0802:	4903      	ldr	r1, [pc, #12]	; (80a0810 <_Z4PINGR10OSCMessage+0x14>)
 80a0804:	f001 fa0d 	bl	80a1c22 <_ZN5Print7printlnEPKc>
    recievedFlex1 = true;
 80a0808:	4b02      	ldr	r3, [pc, #8]	; (80a0814 <_Z4PINGR10OSCMessage+0x18>)
 80a080a:	2201      	movs	r2, #1
 80a080c:	701a      	strb	r2, [r3, #0]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080a3a5c 	.word	0x080a3a5c
 80a0814:	20000544 	.word	0x20000544

080a0818 <_Z5PING2R10OSCMessage>:
}

void PING2(OSCMessage &inMessage)
{
 80a0818:	b508      	push	{r3, lr}
    Serial.println("MATT HAL 2");
 80a081a:	f001 fe17 	bl	80a244c <_Z16_fetch_usbserialv>
 80a081e:	4903      	ldr	r1, [pc, #12]	; (80a082c <_Z5PING2R10OSCMessage+0x14>)
 80a0820:	f001 f9ff 	bl	80a1c22 <_ZN5Print7printlnEPKc>
    recievedFlex2 = true;
 80a0824:	4b02      	ldr	r3, [pc, #8]	; (80a0830 <_Z5PING2R10OSCMessage+0x18>)
 80a0826:	2201      	movs	r2, #1
 80a0828:	701a      	strb	r2, [r3, #0]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	080a3a66 	.word	0x080a3a66
 80a0830:	20000545 	.word	0x20000545

080a0834 <_ZN3UDPD1Ev>:



public:
	UDP();
        virtual ~UDP() { stop(); releaseBuffer(); }
 80a0834:	b510      	push	{r4, lr}
 80a0836:	4604      	mov	r4, r0
 80a0838:	4b05      	ldr	r3, [pc, #20]	; (80a0850 <_ZN3UDPD1Ev+0x1c>)
 80a083a:	6003      	str	r3, [r0, #0]
 80a083c:	3364      	adds	r3, #100	; 0x64
 80a083e:	6103      	str	r3, [r0, #16]
 80a0840:	f001 fba2 	bl	80a1f88 <_ZN3UDP4stopEv>
 80a0844:	4620      	mov	r0, r4
 80a0846:	f001 fcdb 	bl	80a2200 <_ZN3UDP13releaseBufferEv>
 80a084a:	4620      	mov	r0, r4
 80a084c:	bd10      	pop	{r4, pc}
 80a084e:	bf00      	nop
 80a0850:	080a3df8 	.word	0x080a3df8

080a0854 <_ZN9IPAddressD0Ev>:
 80a0854:	b510      	push	{r4, lr}
 80a0856:	4604      	mov	r4, r0
 80a0858:	f7ff fc21 	bl	80a009e <_ZdlPv>
 80a085c:	4620      	mov	r0, r4
 80a085e:	bd10      	pop	{r4, pc}

080a0860 <_ZN3UDPD0Ev>:
 80a0860:	b510      	push	{r4, lr}
 80a0862:	4604      	mov	r4, r0
 80a0864:	f7ff ffe6 	bl	80a0834 <_ZN3UDPD1Ev>
 80a0868:	4620      	mov	r0, r4
 80a086a:	f7ff fc18 	bl	80a009e <_ZdlPv>
 80a086e:	4620      	mov	r0, r4
 80a0870:	bd10      	pop	{r4, pc}
	...

080a0874 <setup>:

void PING(OSCMessage &inMessage);
void PING2(OSCMessage &inMessage);

void setup()
{
 80a0874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0878:	b0a5      	sub	sp, #148	; 0x94
    Serial.begin(115200);
 80a087a:	f001 fde7 	bl	80a244c <_Z16_fetch_usbserialv>
 80a087e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0882:	f001 fdc3 	bl	80a240c <_ZN9USBSerial5beginEl>

    while(!Serial);
 80a0886:	f001 fde1 	bl	80a244c <_Z16_fetch_usbserialv>
 80a088a:	f001 fdc6 	bl	80a241a <_ZN9USBSerialcvbEv>
 80a088e:	2800      	cmp	r0, #0
 80a0890:	d0f9      	beq.n	80a0886 <setup+0x12>

      Serial.println("FXOS8700 Test"); Serial.println("");
 80a0892:	f001 fddb 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0896:	495e      	ldr	r1, [pc, #376]	; (80a0a10 <setup+0x19c>)
 80a0898:	f001 f9c3 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a089c:	f001 fdd6 	bl	80a244c <_Z16_fetch_usbserialv>
 80a08a0:	495c      	ldr	r1, [pc, #368]	; (80a0a14 <setup+0x1a0>)
 80a08a2:	f001 f9be 	bl	80a1c22 <_ZN5Print7printlnEPKc>

  /* Initialise the sensor */
  if(!accelmag.begin(ACCEL_RANGE_4G))
 80a08a6:	2101      	movs	r1, #1
 80a08a8:	485b      	ldr	r0, [pc, #364]	; (80a0a18 <setup+0x1a4>)
 80a08aa:	f7ff fdd5 	bl	80a0458 <_ZN17Adafruit_FXOS87005beginE20fxos8700AccelRange_t>
 80a08ae:	b928      	cbnz	r0, 80a08bc <setup+0x48>
  {
    /* There was a problem detecting the FXOS8700 ... check your connections */
    Serial.println("Ooops, no FXOS8700 detected ... Check your wiring!");
 80a08b0:	f001 fdcc 	bl	80a244c <_Z16_fetch_usbserialv>
 80a08b4:	4959      	ldr	r1, [pc, #356]	; (80a0a1c <setup+0x1a8>)
 80a08b6:	f001 f9b4 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a08ba:	e7fe      	b.n	80a08ba <setup+0x46>
    while(1);
  }
    Serial.println("Gyroscope Test"); Serial.println("");
 80a08bc:	f001 fdc6 	bl	80a244c <_Z16_fetch_usbserialv>
 80a08c0:	4957      	ldr	r1, [pc, #348]	; (80a0a20 <setup+0x1ac>)
 80a08c2:	f001 f9ae 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a08c6:	f001 fdc1 	bl	80a244c <_Z16_fetch_usbserialv>
 80a08ca:	4952      	ldr	r1, [pc, #328]	; (80a0a14 <setup+0x1a0>)
 80a08cc:	f001 f9a9 	bl	80a1c22 <_ZN5Print7printlnEPKc>

  /* Initialise the sensor */
  if(!gyro.begin())
 80a08d0:	21fa      	movs	r1, #250	; 0xfa
 80a08d2:	4854      	ldr	r0, [pc, #336]	; (80a0a24 <setup+0x1b0>)
 80a08d4:	f7ff fd4a 	bl	80a036c <_ZN19Adafruit_FXAS21002C5beginE11gyroRange_t>
 80a08d8:	b928      	cbnz	r0, 80a08e6 <setup+0x72>
  {
    /* There was a problem detecting the FXAS21002C ... check your connections */
    Serial.println("Ooops, no FXAS21002C detected ... Check your wiring!");
 80a08da:	f001 fdb7 	bl	80a244c <_Z16_fetch_usbserialv>
 80a08de:	4952      	ldr	r1, [pc, #328]	; (80a0a28 <setup+0x1b4>)
 80a08e0:	f001 f99f 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a08e4:	e7fe      	b.n	80a08e4 <setup+0x70>
    while(1);
  }

    pinMode(DEEBUG, OUTPUT);
 80a08e6:	2101      	movs	r1, #1
 80a08e8:	2007      	movs	r0, #7
 80a08ea:	f001 fee7 	bl	80a26bc <pinMode>
    Serial.println("INIT");
 80a08ee:	f001 fdad 	bl	80a244c <_Z16_fetch_usbserialv>
 80a08f2:	494e      	ldr	r1, [pc, #312]	; (80a0a2c <setup+0x1b8>)
 80a08f4:	f001 f995 	bl	80a1c22 <_ZN5Print7printlnEPKc>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a08f8:	2300      	movs	r3, #0
 80a08fa:	461a      	mov	r2, r3
 80a08fc:	4619      	mov	r1, r3
 80a08fe:	4618      	mov	r0, r3
 80a0900:	f001 f842 	bl	80a1988 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0904:	2200      	movs	r2, #0
 80a0906:	4611      	mov	r1, r2
 80a0908:	4610      	mov	r0, r2
 80a090a:	f001 f845 	bl	80a1998 <network_ready>
    /* IF NOT CONFIGURED FOR ROUTER - THEN THIS */
    //WiFi.setCredentials("My_Router", "mypasswordishuge");

    /* IF ALREADY CONFIGURED FOR SPECFIC ROUTER - THEN THIS */
    WiFi.connect();
    while(!WiFi.ready());
 80a090e:	2800      	cmp	r0, #0
 80a0910:	d0f8      	beq.n	80a0904 <setup+0x90>
    //IPAddress gateway(10,0,1,1);
    //IPAddress dns(10,0,1,1);

    /* SET IT UP */
    //WiFi.setStaticIP(myAddress, netmask, gateway, dns);
    udp.begin(localPort);
 80a0912:	4b47      	ldr	r3, [pc, #284]	; (80a0a30 <setup+0x1bc>)
 80a0914:	2200      	movs	r2, #0
 80a0916:	8819      	ldrh	r1, [r3, #0]
 80a0918:	4846      	ldr	r0, [pc, #280]	; (80a0a34 <setup+0x1c0>)
 80a091a:	f001 fb0f 	bl	80a1f3c <_ZN3UDP5beginEtm>
        return setHostname(hostname.c_str());
    }

    int setHostname(const char* hostname)
    {
        return network_set_hostname(*this, 0, hostname, nullptr);
 80a091e:	2300      	movs	r3, #0
 80a0920:	4619      	mov	r1, r3
 80a0922:	4618      	mov	r0, r3
 80a0924:	4a44      	ldr	r2, [pc, #272]	; (80a0a38 <setup+0x1c4>)
 80a0926:	f001 f83f 	bl	80a19a8 <network_set_hostname>
    //Udp.joinMulticast(multicastAddress);
    /* SET HOSTNAME */
    WiFi.setHostname("rev3");
    Serial.println(WiFi.hostname());
 80a092a:	f001 fd8f 	bl	80a244c <_Z16_fetch_usbserialv>
 80a092e:	4605      	mov	r5, r0

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a0930:	2400      	movs	r4, #0
    int getCredentials(WiFiAccessPoint* results, size_t result_count);

    String hostname()
    {
        const size_t maxHostname = 64;
        char buf[maxHostname] = {0};
 80a0932:	2240      	movs	r2, #64	; 0x40
 80a0934:	2100      	movs	r1, #0
 80a0936:	a814      	add	r0, sp, #80	; 0x50
 80a0938:	f002 ffff 	bl	80a393a <memset>
        network_get_hostname(*this, 0, buf, maxHostname, nullptr);
 80a093c:	2340      	movs	r3, #64	; 0x40
 80a093e:	aa14      	add	r2, sp, #80	; 0x50
 80a0940:	9400      	str	r4, [sp, #0]
 80a0942:	4621      	mov	r1, r4
 80a0944:	4620      	mov	r0, r4
 80a0946:	f001 f837 	bl	80a19b8 <network_get_hostname>
        return String(buf);
 80a094a:	a914      	add	r1, sp, #80	; 0x50
 80a094c:	a80b      	add	r0, sp, #44	; 0x2c
 80a094e:	f001 fa2d 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a0952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a0954:	4628      	mov	r0, r5
 80a0956:	f001 f964 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a095a:	a80b      	add	r0, sp, #44	; 0x2c
 80a095c:	f001 f9df 	bl	80a1d1e <_ZN6StringD1Ev>
    Serial.println(WiFi.localIP());
 80a0960:	f001 fd74 	bl	80a244c <_Z16_fetch_usbserialv>
    operator network_handle_t() {
        return 0;
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 80a0964:	4622      	mov	r2, r4
 80a0966:	4605      	mov	r5, r0
 80a0968:	4621      	mov	r1, r4
 80a096a:	4620      	mov	r0, r4
 80a096c:	f001 f804 	bl	80a1978 <network_config>


pinMode(myntOnePowerPin, OUTPUT);
 80a0970:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0a4c <setup+0x1d8>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 80a0974:	1c81      	adds	r1, r0, #2
 80a0976:	a814      	add	r0, sp, #80	; 0x50
 80a0978:	f001 f8d4 	bl	80a1b24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
pinMode(myntOnePlusPin, OUTPUT);
 80a097c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80a0a50 <setup+0x1dc>
    udp.begin(localPort);
    //Udp.joinMulticast(multicastAddress);
    /* SET HOSTNAME */
    WiFi.setHostname("rev3");
    Serial.println(WiFi.hostname());
    Serial.println(WiFi.localIP());
 80a0980:	a914      	add	r1, sp, #80	; 0x50
 80a0982:	4628      	mov	r0, r5
 80a0984:	f001 f957 	bl	80a1c36 <_ZN5Print7printlnERK9Printable>


pinMode(myntOnePowerPin, OUTPUT);
pinMode(myntOnePlusPin, OUTPUT);
pinMode(myntOneMinusPin, OUTPUT);
 80a0988:	4f2c      	ldr	r7, [pc, #176]	; (80a0a3c <setup+0x1c8>)
    WiFi.setHostname("rev3");
    Serial.println(WiFi.hostname());
    Serial.println(WiFi.localIP());


pinMode(myntOnePowerPin, OUTPUT);
 80a098a:	f8b9 0000 	ldrh.w	r0, [r9]
 80a098e:	2101      	movs	r1, #1
 80a0990:	f001 fe94 	bl	80a26bc <pinMode>
pinMode(myntOnePlusPin, OUTPUT);
pinMode(myntOneMinusPin, OUTPUT);
pinMode(myntTwoPowerPin, OUTPUT);
 80a0994:	4e2a      	ldr	r6, [pc, #168]	; (80a0a40 <setup+0x1cc>)
    Serial.println(WiFi.hostname());
    Serial.println(WiFi.localIP());


pinMode(myntOnePowerPin, OUTPUT);
pinMode(myntOnePlusPin, OUTPUT);
 80a0996:	f8b8 0000 	ldrh.w	r0, [r8]
 80a099a:	2101      	movs	r1, #1
 80a099c:	f001 fe8e 	bl	80a26bc <pinMode>
pinMode(myntOneMinusPin, OUTPUT);
pinMode(myntTwoPowerPin, OUTPUT);
pinMode(myntTwoPlusPin, OUTPUT);
 80a09a0:	4d28      	ldr	r5, [pc, #160]	; (80a0a44 <setup+0x1d0>)
    Serial.println(WiFi.localIP());


pinMode(myntOnePowerPin, OUTPUT);
pinMode(myntOnePlusPin, OUTPUT);
pinMode(myntOneMinusPin, OUTPUT);
 80a09a2:	8838      	ldrh	r0, [r7, #0]
 80a09a4:	2101      	movs	r1, #1
 80a09a6:	f001 fe89 	bl	80a26bc <pinMode>
pinMode(myntTwoPowerPin, OUTPUT);
pinMode(myntTwoPlusPin, OUTPUT);
pinMode(myntTwoMinusPin, OUTPUT);
 80a09aa:	4c27      	ldr	r4, [pc, #156]	; (80a0a48 <setup+0x1d4>)


pinMode(myntOnePowerPin, OUTPUT);
pinMode(myntOnePlusPin, OUTPUT);
pinMode(myntOneMinusPin, OUTPUT);
pinMode(myntTwoPowerPin, OUTPUT);
 80a09ac:	8830      	ldrh	r0, [r6, #0]
 80a09ae:	2101      	movs	r1, #1
 80a09b0:	f001 fe84 	bl	80a26bc <pinMode>
pinMode(myntTwoPlusPin, OUTPUT);
 80a09b4:	8828      	ldrh	r0, [r5, #0]
 80a09b6:	2101      	movs	r1, #1
 80a09b8:	f001 fe80 	bl	80a26bc <pinMode>
pinMode(myntTwoMinusPin, OUTPUT);
 80a09bc:	8820      	ldrh	r0, [r4, #0]
 80a09be:	2101      	movs	r1, #1
 80a09c0:	f001 fe7c 	bl	80a26bc <pinMode>

digitalWrite(myntOnePowerPin, HIGH);
 80a09c4:	f8b9 0000 	ldrh.w	r0, [r9]
 80a09c8:	2101      	movs	r1, #1
 80a09ca:	f001 fe88 	bl	80a26de <digitalWrite>
digitalWrite(myntOnePlusPin, HIGH);
 80a09ce:	f8b8 0000 	ldrh.w	r0, [r8]
 80a09d2:	2101      	movs	r1, #1
 80a09d4:	f001 fe83 	bl	80a26de <digitalWrite>
digitalWrite(myntOneMinusPin, HIGH);
 80a09d8:	8838      	ldrh	r0, [r7, #0]
 80a09da:	2101      	movs	r1, #1
 80a09dc:	f001 fe7f 	bl	80a26de <digitalWrite>
digitalWrite(myntTwoPowerPin, HIGH);
 80a09e0:	8830      	ldrh	r0, [r6, #0]
 80a09e2:	2101      	movs	r1, #1
 80a09e4:	f001 fe7b 	bl	80a26de <digitalWrite>
digitalWrite(myntTwoPlusPin, HIGH);
 80a09e8:	8828      	ldrh	r0, [r5, #0]
 80a09ea:	2101      	movs	r1, #1
 80a09ec:	f001 fe77 	bl	80a26de <digitalWrite>
digitalWrite(myntTwoMinusPin, HIGH);
 80a09f0:	8820      	ldrh	r0, [r4, #0]
 80a09f2:	2101      	movs	r1, #1
 80a09f4:	f001 fe73 	bl	80a26de <digitalWrite>

  //init sensor events  
  sensors_event_t aevent, mevent;

  /* Get a new sensor event */
  accelmag.getEvent(&aevent, &mevent);
 80a09f8:	aa0b      	add	r2, sp, #44	; 0x2c
 80a09fa:	a902      	add	r1, sp, #8
 80a09fc:	4806      	ldr	r0, [pc, #24]	; (80a0a18 <setup+0x1a4>)
 80a09fe:	f7ff fd69 	bl	80a04d4 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_>
  
/* Get a new sensor event */
  sensors_event_t event;
  gyro.getEvent(&event);
 80a0a02:	a914      	add	r1, sp, #80	; 0x50
 80a0a04:	4807      	ldr	r0, [pc, #28]	; (80a0a24 <setup+0x1b0>)
 80a0a06:	f7ff fb57 	bl	80a00b8 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t>


}
 80a0a0a:	b025      	add	sp, #148	; 0x94
 80a0a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0a10:	080a3a71 	.word	0x080a3a71
 80a0a14:	080a3ce6 	.word	0x080a3ce6
 80a0a18:	200004e8 	.word	0x200004e8
 80a0a1c:	080a3a7f 	.word	0x080a3a7f
 80a0a20:	080a3ab2 	.word	0x080a3ab2
 80a0a24:	20000508 	.word	0x20000508
 80a0a28:	080a3ac1 	.word	0x080a3ac1
 80a0a2c:	080a3af6 	.word	0x080a3af6
 80a0a30:	20000310 	.word	0x20000310
 80a0a34:	20000394 	.word	0x20000394
 80a0a38:	080a3afc 	.word	0x080a3afc
 80a0a3c:	20000308 	.word	0x20000308
 80a0a40:	20000318 	.word	0x20000318
 80a0a44:	20000320 	.word	0x20000320
 80a0a48:	2000030c 	.word	0x2000030c
 80a0a4c:	20000324 	.word	0x20000324
 80a0a50:	20000314 	.word	0x20000314

080a0a54 <_Z4bangf>:
    Serial.println("MATT HAL 2");
    recievedFlex2 = true;
}

void bang(float val)
{
 80a0a54:	b530      	push	{r4, r5, lr}
 80a0a56:	4604      	mov	r4, r0
 80a0a58:	b0a5      	sub	sp, #148	; 0x94
/* COLLATE AND SEND TO MAX */
IPAddress inout(192,168,1,100);
 80a0a5a:	2364      	movs	r3, #100	; 0x64
 80a0a5c:	22a8      	movs	r2, #168	; 0xa8
 80a0a5e:	9300      	str	r3, [sp, #0]
 80a0a60:	21c0      	movs	r1, #192	; 0xc0
 80a0a62:	2301      	movs	r3, #1
 80a0a64:	a803      	add	r0, sp, #12
 80a0a66:	f001 f87d 	bl	80a1b64 <_ZN9IPAddressC1Ehhhh>
OSCMessage outMessage("/rev3");
 80a0a6a:	4911      	ldr	r1, [pc, #68]	; (80a0ab0 <_Z4bangf+0x5c>)
 80a0a6c:	a80f      	add	r0, sp, #60	; 0x3c
 80a0a6e:	f000 fc0f 	bl	80a1290 <_ZN10OSCMessageC1EPKc>
/* OSC DATA */ 
int convert = int(val);
outMessage.addString("a");
 80a0a72:	4910      	ldr	r1, [pc, #64]	; (80a0ab4 <_Z4bangf+0x60>)
 80a0a74:	a80f      	add	r0, sp, #60	; 0x3c
 80a0a76:	f000 fd0b 	bl	80a1490 <_ZN10OSCMessage9addStringEPKc>
outMessage.addInt(convert);
 80a0a7a:	4620      	mov	r0, r4
 80a0a7c:	f002 ff1e 	bl	80a38bc <__aeabi_f2iz>
 80a0a80:	4601      	mov	r1, r0
 80a0a82:	a80f      	add	r0, sp, #60	; 0x3c
 80a0a84:	f000 fcdd 	bl	80a1442 <_ZN10OSCMessage6addIntEi>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0a88:	4d0b      	ldr	r5, [pc, #44]	; (80a0ab8 <_Z4bangf+0x64>)
 80a0a8a:	4b0c      	ldr	r3, [pc, #48]	; (80a0abc <_Z4bangf+0x68>)
 80a0a8c:	ac0a      	add	r4, sp, #40	; 0x28
 80a0a8e:	9309      	str	r3, [sp, #36]	; 0x24
 80a0a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0a94:	682b      	ldr	r3, [r5, #0]

outMessage.send(udp,ipAddress,8889);
 80a0a96:	aa09      	add	r2, sp, #36	; 0x24
 80a0a98:	7023      	strb	r3, [r4, #0]
 80a0a9a:	4909      	ldr	r1, [pc, #36]	; (80a0ac0 <_Z4bangf+0x6c>)
 80a0a9c:	f242 23b9 	movw	r3, #8889	; 0x22b9
 80a0aa0:	a80f      	add	r0, sp, #60	; 0x3c
 80a0aa2:	f000 fd29 	bl	80a14f8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>

void bang(float val)
{
/* COLLATE AND SEND TO MAX */
IPAddress inout(192,168,1,100);
OSCMessage outMessage("/rev3");
 80a0aa6:	a80f      	add	r0, sp, #60	; 0x3c
 80a0aa8:	f000 fc16 	bl	80a12d8 <_ZN10OSCMessageD1Ev>
int convert = int(val);
outMessage.addString("a");
outMessage.addInt(convert);

outMessage.send(udp,ipAddress,8889);
}
 80a0aac:	b025      	add	sp, #148	; 0x94
 80a0aae:	bd30      	pop	{r4, r5, pc}
 80a0ab0:	080a3afb 	.word	0x080a3afb
 80a0ab4:	080a3b01 	.word	0x080a3b01
 80a0ab8:	2000052c 	.word	0x2000052c
 80a0abc:	080a3cc4 	.word	0x080a3cc4
 80a0ac0:	20000394 	.word	0x20000394

080a0ac4 <_Z3p2pi>:

void  p2p(int val) {
 80a0ac4:	b530      	push	{r4, r5, lr}
  IPAddress ipAddress(192,168,1,101);
 80a0ac6:	2365      	movs	r3, #101	; 0x65
outMessage.addInt(convert);

outMessage.send(udp,ipAddress,8889);
}

void  p2p(int val) {
 80a0ac8:	b0a5      	sub	sp, #148	; 0x94
  IPAddress ipAddress(192,168,1,101);
 80a0aca:	22a8      	movs	r2, #168	; 0xa8
 80a0acc:	9300      	str	r3, [sp, #0]
 80a0ace:	21c0      	movs	r1, #192	; 0xc0
 80a0ad0:	2301      	movs	r3, #1
 80a0ad2:	a803      	add	r0, sp, #12
 80a0ad4:	f001 f846 	bl	80a1b64 <_ZN9IPAddressC1Ehhhh>
  unsigned int localPort = 8888;

 OSCMessage outMessage("/rev3");
 80a0ad8:	490d      	ldr	r1, [pc, #52]	; (80a0b10 <_Z3p2pi+0x4c>)
 80a0ada:	a80f      	add	r0, sp, #60	; 0x3c
 80a0adc:	f000 fbd8 	bl	80a1290 <_ZN10OSCMessageC1EPKc>
  /* OSC DATA */ 
    // outMessage.addString("a");
    outMessage.addString("a");
 80a0ae0:	a80f      	add	r0, sp, #60	; 0x3c
 80a0ae2:	490c      	ldr	r1, [pc, #48]	; (80a0b14 <_Z3p2pi+0x50>)
 80a0ae4:	f000 fcd4 	bl	80a1490 <_ZN10OSCMessage9addStringEPKc>
 80a0ae8:	4b0b      	ldr	r3, [pc, #44]	; (80a0b18 <_Z3p2pi+0x54>)
 80a0aea:	ac0a      	add	r4, sp, #40	; 0x28
 80a0aec:	ad04      	add	r5, sp, #16
 80a0aee:	9309      	str	r3, [sp, #36]	; 0x24
 80a0af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0af4:	682b      	ldr	r3, [r5, #0]
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 80a0af6:	aa09      	add	r2, sp, #36	; 0x24
 80a0af8:	7023      	strb	r3, [r4, #0]
 80a0afa:	4908      	ldr	r1, [pc, #32]	; (80a0b1c <_Z3p2pi+0x58>)
 80a0afc:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80a0b00:	a80f      	add	r0, sp, #60	; 0x3c
 80a0b02:	f000 fcf9 	bl	80a14f8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>

void  p2p(int val) {
  IPAddress ipAddress(192,168,1,101);
  unsigned int localPort = 8888;

 OSCMessage outMessage("/rev3");
 80a0b06:	a80f      	add	r0, sp, #60	; 0x3c
 80a0b08:	f000 fbe6 	bl	80a12d8 <_ZN10OSCMessageD1Ev>
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 
}
 80a0b0c:	b025      	add	sp, #148	; 0x94
 80a0b0e:	bd30      	pop	{r4, r5, pc}
 80a0b10:	080a3afb 	.word	0x080a3afb
 80a0b14:	080a3b01 	.word	0x080a3b01
 80a0b18:	080a3cc4 	.word	0x080a3cc4
 80a0b1c:	20000394 	.word	0x20000394

080a0b20 <_Z4p2p2i>:
void  p2p2(int val) {
 80a0b20:	b530      	push	{r4, r5, lr}
  IPAddress ipAddress(192,168,1,101);
 80a0b22:	2365      	movs	r3, #101	; 0x65
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 
}
void  p2p2(int val) {
 80a0b24:	b0a5      	sub	sp, #148	; 0x94
  IPAddress ipAddress(192,168,1,101);
 80a0b26:	22a8      	movs	r2, #168	; 0xa8
 80a0b28:	9300      	str	r3, [sp, #0]
 80a0b2a:	21c0      	movs	r1, #192	; 0xc0
 80a0b2c:	2301      	movs	r3, #1
 80a0b2e:	a803      	add	r0, sp, #12
 80a0b30:	f001 f818 	bl	80a1b64 <_ZN9IPAddressC1Ehhhh>
  unsigned int localPort = 8888;

 OSCMessage outMessage("/rev3B");
 80a0b34:	490d      	ldr	r1, [pc, #52]	; (80a0b6c <_Z4p2p2i+0x4c>)
 80a0b36:	a80f      	add	r0, sp, #60	; 0x3c
 80a0b38:	f000 fbaa 	bl	80a1290 <_ZN10OSCMessageC1EPKc>
  /* OSC DATA */ 
    // outMessage.addString("a");
    outMessage.addString("a");
 80a0b3c:	a80f      	add	r0, sp, #60	; 0x3c
 80a0b3e:	490c      	ldr	r1, [pc, #48]	; (80a0b70 <_Z4p2p2i+0x50>)
 80a0b40:	f000 fca6 	bl	80a1490 <_ZN10OSCMessage9addStringEPKc>
 80a0b44:	4b0b      	ldr	r3, [pc, #44]	; (80a0b74 <_Z4p2p2i+0x54>)
 80a0b46:	ac0a      	add	r4, sp, #40	; 0x28
 80a0b48:	ad04      	add	r5, sp, #16
 80a0b4a:	9309      	str	r3, [sp, #36]	; 0x24
 80a0b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0b50:	682b      	ldr	r3, [r5, #0]
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 80a0b52:	aa09      	add	r2, sp, #36	; 0x24
 80a0b54:	7023      	strb	r3, [r4, #0]
 80a0b56:	4908      	ldr	r1, [pc, #32]	; (80a0b78 <_Z4p2p2i+0x58>)
 80a0b58:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80a0b5c:	a80f      	add	r0, sp, #60	; 0x3c
 80a0b5e:	f000 fccb 	bl	80a14f8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
}
void  p2p2(int val) {
  IPAddress ipAddress(192,168,1,101);
  unsigned int localPort = 8888;

 OSCMessage outMessage("/rev3B");
 80a0b62:	a80f      	add	r0, sp, #60	; 0x3c
 80a0b64:	f000 fbb8 	bl	80a12d8 <_ZN10OSCMessageD1Ev>
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 
 80a0b68:	b025      	add	sp, #148	; 0x94
 80a0b6a:	bd30      	pop	{r4, r5, pc}
 80a0b6c:	080a3b03 	.word	0x080a3b03
 80a0b70:	080a3b01 	.word	0x080a3b01
 80a0b74:	080a3cc4 	.word	0x080a3cc4
 80a0b78:	20000394 	.word	0x20000394

080a0b7c <loop>:


}

void loop()
{
 80a0b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0b80:	b0b0      	sub	sp, #192	; 0xc0

 //init sensor events  
  sensors_event_t aevent, mevent;

  /* Get a new sensor event */
  accelmag.getEvent(&aevent, &mevent);
 80a0b82:	aa09      	add	r2, sp, #36	; 0x24
 80a0b84:	4669      	mov	r1, sp
 80a0b86:	487f      	ldr	r0, [pc, #508]	; (80a0d84 <loop+0x208>)
 80a0b88:	f7ff fca4 	bl	80a04d4 <_ZN17Adafruit_FXOS87008getEventEP15sensors_event_tS1_>
  
/* Get a new sensor event */
  sensors_event_t event;
  gyro.getEvent(&event);
 80a0b8c:	a912      	add	r1, sp, #72	; 0x48
 80a0b8e:	487e      	ldr	r0, [pc, #504]	; (80a0d88 <loop+0x20c>)
 80a0b90:	f7ff fa92 	bl	80a00b8 <_ZN19Adafruit_FXAS21002C8getEventEP15sensors_event_t>
  
    
     //RECEIVE
     int size = 0;
     OSCMessage inMessage;
 80a0b94:	a81b      	add	r0, sp, #108	; 0x6c
 80a0b96:	f000 fb5d 	bl	80a1254 <_ZN10OSCMessageC1Ev>
    if ( ( size = udp.parsePacket()) > 0)
 80a0b9a:	487c      	ldr	r0, [pc, #496]	; (80a0d8c <loop+0x210>)
 80a0b9c:	f001 fb72 	bl	80a2284 <_ZN3UDP11parsePacketEv>
 80a0ba0:	1e04      	subs	r4, r0, #0
 80a0ba2:	dd18      	ble.n	80a0bd6 <loop+0x5a>
      // Store sender ip and port
    //    ipAddress = udp.remoteIP();
      // port = udp.remotePort();

        /* REQUIRES CORRECTLY FORMATTED OSC MSG */
        while (size--)
 80a0ba4:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 80a0ba8:	d307      	bcc.n	80a0bba <loop+0x3e>
        {
            inMessage.fill(udp.read());
 80a0baa:	4878      	ldr	r0, [pc, #480]	; (80a0d8c <loop+0x210>)
 80a0bac:	f001 f999 	bl	80a1ee2 <_ZN3UDP4readEv>
 80a0bb0:	b2c1      	uxtb	r1, r0
 80a0bb2:	a81b      	add	r0, sp, #108	; 0x6c
 80a0bb4:	f000 fbad 	bl	80a1312 <_ZN10OSCMessage4fillEc>
      // Store sender ip and port
    //    ipAddress = udp.remoteIP();
      // port = udp.remotePort();

        /* REQUIRES CORRECTLY FORMATTED OSC MSG */
        while (size--)
 80a0bb8:	e7f4      	b.n	80a0ba4 <loop+0x28>
        {
            inMessage.fill(udp.read());
        }
        if( inMessage.parse())
 80a0bba:	a81b      	add	r0, sp, #108	; 0x6c
 80a0bbc:	f000 fbb8 	bl	80a1330 <_ZN10OSCMessage5parseEv>
 80a0bc0:	b148      	cbz	r0, 80a0bd6 <loop+0x5a>
        {
            inMessage.route("/rev2", PING);
 80a0bc2:	4a73      	ldr	r2, [pc, #460]	; (80a0d90 <loop+0x214>)
 80a0bc4:	4973      	ldr	r1, [pc, #460]	; (80a0d94 <loop+0x218>)
 80a0bc6:	a81b      	add	r0, sp, #108	; 0x6c
 80a0bc8:	f000 fc2e 	bl	80a1428 <_ZN10OSCMessage5routeEPKcPFvRS_E>
            inMessage.route("/rev2B", PING2);
 80a0bcc:	4a72      	ldr	r2, [pc, #456]	; (80a0d98 <loop+0x21c>)
 80a0bce:	4973      	ldr	r1, [pc, #460]	; (80a0d9c <loop+0x220>)
 80a0bd0:	a81b      	add	r0, sp, #108	; 0x6c
 80a0bd2:	f000 fc29 	bl	80a1428 <_ZN10OSCMessage5routeEPKcPFvRS_E>
    // unsigned accX = (aevent.acceleration.x * 1000);
    // unsigned accY = aevent.acceleration.y;
    // float accZ = (aevent.acceleration.z);
        
    //     //Bring the sensor values into a readable range for legibility (and potentially unsigned char conversion)
        float magX = (mevent.magnetic.x + 100);
 80a0bd6:	4972      	ldr	r1, [pc, #456]	; (80a0da0 <loop+0x224>)
 80a0bd8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a0bda:	f002 fba1 	bl	80a3320 <__addsf3>
    //  unsigned gyrY = event.gyro.y;
    //  unsigned gyrZ = event.gyro.z;
        
        
    //Only publish data to the cloud if the sensor is currently moving/changing values to save bandwidth
        if((magX > (magXtemp + 2)) || (magX < (magXtemp - 2))){ 
 80a0bde:	4d71      	ldr	r5, [pc, #452]	; (80a0da4 <loop+0x228>)
    // unsigned accX = (aevent.acceleration.x * 1000);
    // unsigned accY = aevent.acceleration.y;
    // float accZ = (aevent.acceleration.z);
        
    //     //Bring the sensor values into a readable range for legibility (and potentially unsigned char conversion)
        float magX = (mevent.magnetic.x + 100);
 80a0be0:	4604      	mov	r4, r0
    //  unsigned gyrY = event.gyro.y;
    //  unsigned gyrZ = event.gyro.z;
        
        
    //Only publish data to the cloud if the sensor is currently moving/changing values to save bandwidth
        if((magX > (magXtemp + 2)) || (magX < (magXtemp - 2))){ 
 80a0be2:	682e      	ldr	r6, [r5, #0]
 80a0be4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a0be8:	4630      	mov	r0, r6
 80a0bea:	f002 fb99 	bl	80a3320 <__addsf3>
 80a0bee:	4601      	mov	r1, r0
 80a0bf0:	4620      	mov	r0, r4
 80a0bf2:	f002 fe59 	bl	80a38a8 <__aeabi_fcmpgt>
 80a0bf6:	b948      	cbnz	r0, 80a0c0c <loop+0x90>
 80a0bf8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a0bfc:	4630      	mov	r0, r6
 80a0bfe:	f002 fb8d 	bl	80a331c <__aeabi_fsub>
 80a0c02:	4601      	mov	r1, r0
 80a0c04:	4620      	mov	r0, r4
 80a0c06:	f002 fe31 	bl	80a386c <__aeabi_fcmplt>
 80a0c0a:	b118      	cbz	r0, 80a0c14 <loop+0x98>
        
        //buffer variable
        magXtemp = magX;
        // Serial.println("pre-BANG");
        bang(magX);
 80a0c0c:	4620      	mov	r0, r4
        
    //Only publish data to the cloud if the sensor is currently moving/changing values to save bandwidth
        if((magX > (magXtemp + 2)) || (magX < (magXtemp - 2))){ 
        
        //buffer variable
        magXtemp = magX;
 80a0c0e:	602c      	str	r4, [r5, #0]
        // Serial.println("pre-BANG");
        bang(magX);
 80a0c10:	f7ff ff20 	bl	80a0a54 <_Z4bangf>
    //----------------------------------------------------------------------
    

//   p2p(0);
    
    valA = analogRead(flexSensePin1); //read value of flex rubber sensor
 80a0c14:	4b64      	ldr	r3, [pc, #400]	; (80a0da8 <loop+0x22c>)
 80a0c16:	4c65      	ldr	r4, [pc, #404]	; (80a0dac <loop+0x230>)
 80a0c18:	8818      	ldrh	r0, [r3, #0]
 80a0c1a:	f001 fd79 	bl	80a2710 <analogRead>
   

    valB = analogRead(flexSensePin2); //read value of flex rubber sensor
 80a0c1e:	4b64      	ldr	r3, [pc, #400]	; (80a0db0 <loop+0x234>)
    //----------------------------------------------------------------------
    

//   p2p(0);
    
    valA = analogRead(flexSensePin1); //read value of flex rubber sensor
 80a0c20:	6020      	str	r0, [r4, #0]
   

    valB = analogRead(flexSensePin2); //read value of flex rubber sensor
 80a0c22:	8818      	ldrh	r0, [r3, #0]
 80a0c24:	f001 fd74 	bl	80a2710 <analogRead>
 80a0c28:	4b62      	ldr	r3, [pc, #392]	; (80a0db4 <loop+0x238>)
     
     for ( int i = 0; i < 32; i++){
         bendArrayA[i]=valA;
 80a0c2a:	6824      	ldr	r4, [r4, #0]
 80a0c2c:	4962      	ldr	r1, [pc, #392]	; (80a0db8 <loop+0x23c>)
         bendArrayB[i]=valB;
 80a0c2e:	4a63      	ldr	r2, [pc, #396]	; (80a0dbc <loop+0x240>)
//   p2p(0);
    
    valA = analogRead(flexSensePin1); //read value of flex rubber sensor
   

    valB = analogRead(flexSensePin2); //read value of flex rubber sensor
 80a0c30:	6018      	str	r0, [r3, #0]
     
     for ( int i = 0; i < 32; i++){
 80a0c32:	2300      	movs	r3, #0
         bendArrayA[i]=valA;
 80a0c34:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
         bendArrayB[i]=valB;
 80a0c38:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    valA = analogRead(flexSensePin1); //read value of flex rubber sensor
   

    valB = analogRead(flexSensePin2); //read value of flex rubber sensor
     
     for ( int i = 0; i < 32; i++){
 80a0c3c:	3301      	adds	r3, #1
 80a0c3e:	2b20      	cmp	r3, #32
 80a0c40:	4f5d      	ldr	r7, [pc, #372]	; (80a0db8 <loop+0x23c>)
 80a0c42:	4e5e      	ldr	r6, [pc, #376]	; (80a0dbc <loop+0x240>)
 80a0c44:	d1f6      	bne.n	80a0c34 <loop+0xb8>
 80a0c46:	4d5e      	ldr	r5, [pc, #376]	; (80a0dc0 <loop+0x244>)
 80a0c48:	4c5e      	ldr	r4, [pc, #376]	; (80a0dc4 <loop+0x248>)
 80a0c4a:	682a      	ldr	r2, [r5, #0]
 80a0c4c:	6821      	ldr	r1, [r4, #0]
 80a0c4e:	2300      	movs	r3, #0
         bendArrayA[i]=valA;
         bendArrayB[i]=valB;
     }
     
     for (int i = 0; i < 32; i++){
         averageA += bendArrayA[i];
 80a0c50:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80a0c54:	4402      	add	r2, r0
         averageB += bendArrayB[i];
 80a0c56:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     for ( int i = 0; i < 32; i++){
         bendArrayA[i]=valA;
         bendArrayB[i]=valB;
     }
     
     for (int i = 0; i < 32; i++){
 80a0c5a:	3301      	adds	r3, #1
 80a0c5c:	2b20      	cmp	r3, #32
         averageA += bendArrayA[i];
         averageB += bendArrayB[i];
 80a0c5e:	4401      	add	r1, r0
     for ( int i = 0; i < 32; i++){
         bendArrayA[i]=valA;
         bendArrayB[i]=valB;
     }
     
     for (int i = 0; i < 32; i++){
 80a0c60:	d1f6      	bne.n	80a0c50 <loop+0xd4>
         averageA += bendArrayA[i];
         averageB += bendArrayB[i];
     }

     averageB = averageB/32;
 80a0c62:	fb91 f1f3 	sdiv	r1, r1, r3

     averageA = averageA/32;
 80a0c66:	fb92 f3f3 	sdiv	r3, r2, r3
     for (int i = 0; i < 32; i++){
         averageA += bendArrayA[i];
         averageB += bendArrayB[i];
     }

     averageB = averageB/32;
 80a0c6a:	6021      	str	r1, [r4, #0]

     averageA = averageA/32;
 80a0c6c:	602b      	str	r3, [r5, #0]
 80a0c6e:	f000 fcf5 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>

     if((millis() % (unsigned long)1000)   == 0) {
 80a0c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c76:	fbb0 f2f3 	udiv	r2, r0, r3
 80a0c7a:	fb02 0013 	mls	r0, r2, r3, r0
 80a0c7e:	4f52      	ldr	r7, [pc, #328]	; (80a0dc8 <loop+0x24c>)
 80a0c80:	4b52      	ldr	r3, [pc, #328]	; (80a0dcc <loop+0x250>)
 80a0c82:	b928      	cbnz	r0, 80a0c90 <loop+0x114>
        oldAverageA = averageA;
 80a0c84:	4a4e      	ldr	r2, [pc, #312]	; (80a0dc0 <loop+0x244>)
 80a0c86:	6812      	ldr	r2, [r2, #0]
 80a0c88:	601a      	str	r2, [r3, #0]
        oldAverageB = averageB;
 80a0c8a:	4a4e      	ldr	r2, [pc, #312]	; (80a0dc4 <loop+0x248>)
 80a0c8c:	6812      	ldr	r2, [r2, #0]
 80a0c8e:	603a      	str	r2, [r7, #0]
     }
     
    if(averageA < (oldAverageA-300)){
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	682a      	ldr	r2, [r5, #0]
 80a0c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80a0c98:	4293      	cmp	r3, r2
 80a0c9a:	dd02      	ble.n	80a0ca2 <loop+0x126>
         
      
         p2p(0);
 80a0c9c:	2000      	movs	r0, #0
 80a0c9e:	f7ff ff11 	bl	80a0ac4 <_Z3p2pi>
        
    }

     if(recievedFlex1){
 80a0ca2:	4b4b      	ldr	r3, [pc, #300]	; (80a0dd0 <loop+0x254>)
 80a0ca4:	4e4b      	ldr	r6, [pc, #300]	; (80a0dd4 <loop+0x258>)
 80a0ca6:	781a      	ldrb	r2, [r3, #0]
 80a0ca8:	461d      	mov	r5, r3
 80a0caa:	b142      	cbz	r2, 80a0cbe <loop+0x142>
         
        if(eventCompleteA == true){
 80a0cac:	7833      	ldrb	r3, [r6, #0]
 80a0cae:	b11b      	cbz	r3, 80a0cb8 <loop+0x13c>
 80a0cb0:	f000 fcd4 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
            eventStartA = millis();  
 80a0cb4:	4b48      	ldr	r3, [pc, #288]	; (80a0dd8 <loop+0x25c>)
 80a0cb6:	6018      	str	r0, [r3, #0]
        }
         eventCompleteA = false;
 80a0cb8:	2300      	movs	r3, #0
 80a0cba:	7033      	strb	r3, [r6, #0]
        
         recievedFlex1=false;
 80a0cbc:	702b      	strb	r3, [r5, #0]
         
        
    }

     if(averageB < (oldAverageB-100)){
 80a0cbe:	683b      	ldr	r3, [r7, #0]
 80a0cc0:	6822      	ldr	r2, [r4, #0]
 80a0cc2:	3b64      	subs	r3, #100	; 0x64
 80a0cc4:	4293      	cmp	r3, r2
 80a0cc6:	dd02      	ble.n	80a0cce <loop+0x152>
         

        
          p2p2(0);
 80a0cc8:	2000      	movs	r0, #0
 80a0cca:	f7ff ff29 	bl	80a0b20 <_Z4p2p2i>
        
    }

    if(recievedFlex2 ){
 80a0cce:	4b43      	ldr	r3, [pc, #268]	; (80a0ddc <loop+0x260>)
 80a0cd0:	4d43      	ldr	r5, [pc, #268]	; (80a0de0 <loop+0x264>)
 80a0cd2:	781a      	ldrb	r2, [r3, #0]
 80a0cd4:	461c      	mov	r4, r3
 80a0cd6:	b142      	cbz	r2, 80a0cea <loop+0x16e>
         
        if(eventCompleteB == true){
 80a0cd8:	782b      	ldrb	r3, [r5, #0]
 80a0cda:	b11b      	cbz	r3, 80a0ce4 <loop+0x168>
 80a0cdc:	f000 fcbe 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
            eventStartB = millis();  
 80a0ce0:	4b40      	ldr	r3, [pc, #256]	; (80a0de4 <loop+0x268>)
 80a0ce2:	6018      	str	r0, [r3, #0]
        }
         eventCompleteB = false;
 80a0ce4:	2300      	movs	r3, #0
 80a0ce6:	702b      	strb	r3, [r5, #0]
         
         recievedFlex2 = false;
 80a0ce8:	7023      	strb	r3, [r4, #0]
        // Serial.println(averageB);
        // Serial.print("OLD B: ");
        // Serial.println(oldAverageB);
        
    
if(!eventCompleteA){
 80a0cea:	7837      	ldrb	r7, [r6, #0]
 80a0cec:	2f00      	cmp	r7, #0
 80a0cee:	f040 80d6 	bne.w	80a0e9e <loop+0x322>
    Serial.print("loop: ");
 80a0cf2:	f001 fbab 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0cf6:	493c      	ldr	r1, [pc, #240]	; (80a0de8 <loop+0x26c>)
 80a0cf8:	f000 ff7a 	bl	80a1bf0 <_ZN5Print5printEPKc>
    Serial.println(millis() - eventStartA);
 80a0cfc:	f001 fba6 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0d00:	4680      	mov	r8, r0
 80a0d02:	f000 fcab 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0d06:	4c34      	ldr	r4, [pc, #208]	; (80a0dd8 <loop+0x25c>)
 80a0d08:	220a      	movs	r2, #10
 80a0d0a:	6821      	ldr	r1, [r4, #0]
 80a0d0c:	1a41      	subs	r1, r0, r1
 80a0d0e:	4640      	mov	r0, r8
 80a0d10:	f000 ffc7 	bl	80a1ca2 <_ZN5Print7printlnEmi>
 80a0d14:	f000 fca2 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    
    if(millis() < (eventStartA + (unsigned long) 2000)){
 80a0d18:	6823      	ldr	r3, [r4, #0]
 80a0d1a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80a0d1e:	4298      	cmp	r0, r3
 80a0d20:	d208      	bcs.n	80a0d34 <loop+0x1b8>
        digitalWrite(myntOnePowerPin, LOW);
 80a0d22:	4b32      	ldr	r3, [pc, #200]	; (80a0dec <loop+0x270>)
 80a0d24:	4639      	mov	r1, r7
 80a0d26:	8818      	ldrh	r0, [r3, #0]
 80a0d28:	f001 fcd9 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntOnePowerPin, LOW;");
 80a0d2c:	f001 fb8e 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0d30:	492f      	ldr	r1, [pc, #188]	; (80a0df0 <loop+0x274>)
 80a0d32:	e15a      	b.n	80a0fea <loop+0x46e>
 80a0d34:	f000 fc92 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartA + (unsigned long) 2000) && millis() < (eventStartA + (unsigned long) 3000)){
 80a0d38:	6823      	ldr	r3, [r4, #0]
 80a0d3a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80a0d3e:	4298      	cmp	r0, r3
 80a0d40:	d907      	bls.n	80a0d52 <loop+0x1d6>
 80a0d42:	f000 fc8b 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0d46:	6823      	ldr	r3, [r4, #0]
 80a0d48:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80a0d4c:	4298      	cmp	r0, r3
 80a0d4e:	f0c0 8144 	bcc.w	80a0fda <loop+0x45e>
 80a0d52:	f000 fc83 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntOnePowerPin, HIGH);
        Serial.println("digitalWrite(myntOnePowerPin, HIGH;");
    }
    
    if(millis() > (eventStartA + (unsigned long) 2050) && millis() < (eventStartA + (unsigned long) 2350)){
 80a0d56:	6823      	ldr	r3, [r4, #0]
 80a0d58:	f603 0302 	addw	r3, r3, #2050	; 0x802
 80a0d5c:	4298      	cmp	r0, r3
 80a0d5e:	d94d      	bls.n	80a0dfc <loop+0x280>
 80a0d60:	f000 fc7c 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0d64:	4b1c      	ldr	r3, [pc, #112]	; (80a0dd8 <loop+0x25c>)
 80a0d66:	681b      	ldr	r3, [r3, #0]
 80a0d68:	f603 132e 	addw	r3, r3, #2350	; 0x92e
 80a0d6c:	4298      	cmp	r0, r3
 80a0d6e:	d245      	bcs.n	80a0dfc <loop+0x280>
        digitalWrite(myntOnePlusPin, LOW);
 80a0d70:	4b20      	ldr	r3, [pc, #128]	; (80a0df4 <loop+0x278>)
 80a0d72:	2100      	movs	r1, #0
 80a0d74:	8818      	ldrh	r0, [r3, #0]
 80a0d76:	f001 fcb2 	bl	80a26de <digitalWrite>
        Serial.println(" digitalWrite(myntOnePlusPin, LOW;");
 80a0d7a:	f001 fb67 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0d7e:	491e      	ldr	r1, [pc, #120]	; (80a0df8 <loop+0x27c>)
 80a0d80:	e150      	b.n	80a1024 <loop+0x4a8>
 80a0d82:	bf00      	nop
 80a0d84:	200004e8 	.word	0x200004e8
 80a0d88:	20000508 	.word	0x20000508
 80a0d8c:	20000394 	.word	0x20000394
 80a0d90:	080a07fd 	.word	0x080a07fd
 80a0d94:	080a3b0a 	.word	0x080a3b0a
 80a0d98:	080a0819 	.word	0x080a0819
 80a0d9c:	080a3b10 	.word	0x080a3b10
 80a0da0:	42c80000 	.word	0x42c80000
 80a0da4:	20000504 	.word	0x20000504
 80a0da8:	20000300 	.word	0x20000300
 80a0dac:	2000051c 	.word	0x2000051c
 80a0db0:	20000304 	.word	0x20000304
 80a0db4:	20000520 	.word	0x20000520
 80a0db8:	200003e0 	.word	0x200003e0
 80a0dbc:	2000045c 	.word	0x2000045c
 80a0dc0:	2000054c 	.word	0x2000054c
 80a0dc4:	200004e0 	.word	0x200004e0
 80a0dc8:	20000548 	.word	0x20000548
 80a0dcc:	20000524 	.word	0x20000524
 80a0dd0:	20000544 	.word	0x20000544
 80a0dd4:	2000031c 	.word	0x2000031c
 80a0dd8:	200004e4 	.word	0x200004e4
 80a0ddc:	20000545 	.word	0x20000545
 80a0de0:	2000031d 	.word	0x2000031d
 80a0de4:	20000540 	.word	0x20000540
 80a0de8:	080a3b17 	.word	0x080a3b17
 80a0dec:	20000324 	.word	0x20000324
 80a0df0:	080a3b1e 	.word	0x080a3b1e
 80a0df4:	20000314 	.word	0x20000314
 80a0df8:	080a3b94 	.word	0x080a3b94
 80a0dfc:	f000 fc2e 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartA + (unsigned long) 2350) && millis() < (eventStartA + (unsigned long) 2600)){
 80a0e00:	6823      	ldr	r3, [r4, #0]
 80a0e02:	f603 132e 	addw	r3, r3, #2350	; 0x92e
 80a0e06:	4298      	cmp	r0, r3
 80a0e08:	d908      	bls.n	80a0e1c <loop+0x2a0>
 80a0e0a:	f000 fc27 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0e0e:	4bc3      	ldr	r3, [pc, #780]	; (80a111c <loop+0x5a0>)
 80a0e10:	681b      	ldr	r3, [r3, #0]
 80a0e12:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80a0e16:	4298      	cmp	r0, r3
 80a0e18:	f0c0 80fc 	bcc.w	80a1014 <loop+0x498>
 80a0e1c:	f000 fc1e 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntOnePlusPin, HIGH);
        Serial.println("digitalWrite(myntOnePlusPin, HIGH");
    }
    
    if(millis() > (eventStartA + (unsigned long) 2400) && millis() < (eventStartA + (unsigned long) 2600)){
 80a0e20:	6823      	ldr	r3, [r4, #0]
 80a0e22:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80a0e26:	4298      	cmp	r0, r3
 80a0e28:	f200 80e2 	bhi.w	80a0ff0 <loop+0x474>
 80a0e2c:	f000 fc16 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntOnePlusPin, LOW);
        Serial.println(" digitalWrite(myntOnePlusPin, LOW;");
    }else if(millis() > (eventStartA + (unsigned long) 2600) && millis() < (eventStartA + (unsigned long) 2800)){
 80a0e30:	6823      	ldr	r3, [r4, #0]
 80a0e32:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80a0e36:	4298      	cmp	r0, r3
 80a0e38:	d908      	bls.n	80a0e4c <loop+0x2d0>
 80a0e3a:	f000 fc0f 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0e3e:	4bb7      	ldr	r3, [pc, #732]	; (80a111c <loop+0x5a0>)
 80a0e40:	681b      	ldr	r3, [r3, #0]
 80a0e42:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 80a0e46:	4298      	cmp	r0, r3
 80a0e48:	f0c0 8102 	bcc.w	80a1050 <loop+0x4d4>
 80a0e4c:	f000 fc06 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntOnePlusPin, HIGH);
        Serial.println("digitalWrite(myntOnePlusPin, HIGH");
    }
    
    if(millis() > (eventStartA + (unsigned long) 4000) && millis() < (eventStartA + (unsigned long) 6000)){
 80a0e50:	6823      	ldr	r3, [r4, #0]
 80a0e52:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80a0e56:	4298      	cmp	r0, r3
 80a0e58:	f200 80e7 	bhi.w	80a102a <loop+0x4ae>
 80a0e5c:	f000 fbfe 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntOnePowerPin, LOW);
        Serial.println("digitalWrite(myntOnePowerPin, LOW;");
    }else if(millis() > (eventStartA + (unsigned long) 6000) && millis() < (eventStartA + (unsigned long) 7000)){
 80a0e60:	6823      	ldr	r3, [r4, #0]
 80a0e62:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80a0e66:	3310      	adds	r3, #16
 80a0e68:	4298      	cmp	r0, r3
 80a0e6a:	d909      	bls.n	80a0e80 <loop+0x304>
 80a0e6c:	f000 fbf6 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0e70:	4baa      	ldr	r3, [pc, #680]	; (80a111c <loop+0x5a0>)
 80a0e72:	681b      	ldr	r3, [r3, #0]
 80a0e74:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 80a0e78:	3318      	adds	r3, #24
 80a0e7a:	4298      	cmp	r0, r3
 80a0e7c:	f0c0 80f3 	bcc.w	80a1066 <loop+0x4ea>
 80a0e80:	f000 fbec 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntOnePowerPin, HIGH);
        Serial.println("digitalWrite(myntOnePowerPin, HIGH");
    }
    
    if(millis() > (eventStartA + (unsigned long) 20000)){
 80a0e84:	6823      	ldr	r3, [r4, #0]
 80a0e86:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80a0e8a:	3320      	adds	r3, #32
 80a0e8c:	4298      	cmp	r0, r3
 80a0e8e:	d906      	bls.n	80a0e9e <loop+0x322>
        eventCompleteA = true;
 80a0e90:	2301      	movs	r3, #1
 80a0e92:	7033      	strb	r3, [r6, #0]
        Serial.println("end");
 80a0e94:	f001 fada 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0e98:	49a1      	ldr	r1, [pc, #644]	; (80a1120 <loop+0x5a4>)
 80a0e9a:	f000 fec2 	bl	80a1c22 <_ZN5Print7printlnEPKc>
    }
    
}

if(!eventCompleteB){
 80a0e9e:	782e      	ldrb	r6, [r5, #0]
 80a0ea0:	2e00      	cmp	r6, #0
 80a0ea2:	f040 8091 	bne.w	80a0fc8 <loop+0x44c>
    Serial.print("loop2: ");
 80a0ea6:	f001 fad1 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0eaa:	499e      	ldr	r1, [pc, #632]	; (80a1124 <loop+0x5a8>)
 80a0eac:	f000 fea0 	bl	80a1bf0 <_ZN5Print5printEPKc>
    Serial.println(millis() - eventStartB);
 80a0eb0:	f001 facc 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0eb4:	4607      	mov	r7, r0
 80a0eb6:	f000 fbd1 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0eba:	4c9b      	ldr	r4, [pc, #620]	; (80a1128 <loop+0x5ac>)
 80a0ebc:	220a      	movs	r2, #10
 80a0ebe:	6821      	ldr	r1, [r4, #0]
 80a0ec0:	1a41      	subs	r1, r0, r1
 80a0ec2:	4638      	mov	r0, r7
 80a0ec4:	f000 feed 	bl	80a1ca2 <_ZN5Print7printlnEmi>
 80a0ec8:	f000 fbc8 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    
    if(millis() < (eventStartB + (unsigned long) 2000)){
 80a0ecc:	6823      	ldr	r3, [r4, #0]
 80a0ece:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80a0ed2:	4298      	cmp	r0, r3
 80a0ed4:	d208      	bcs.n	80a0ee8 <loop+0x36c>
        digitalWrite(myntTwoPowerPin, LOW);
 80a0ed6:	4b95      	ldr	r3, [pc, #596]	; (80a112c <loop+0x5b0>)
 80a0ed8:	4631      	mov	r1, r6
 80a0eda:	8818      	ldrh	r0, [r3, #0]
 80a0edc:	f001 fbff 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntTwoPowerPin, LOW;");
 80a0ee0:	f001 fab4 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0ee4:	4992      	ldr	r1, [pc, #584]	; (80a1130 <loop+0x5b4>)
 80a0ee6:	e0d1      	b.n	80a108c <loop+0x510>
 80a0ee8:	f000 fbb8 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartB + (unsigned long) 2000) && millis() < (eventStartB + (unsigned long) 3000)){
 80a0eec:	6823      	ldr	r3, [r4, #0]
 80a0eee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80a0ef2:	4298      	cmp	r0, r3
 80a0ef4:	d907      	bls.n	80a0f06 <loop+0x38a>
 80a0ef6:	f000 fbb1 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0efa:	6823      	ldr	r3, [r4, #0]
 80a0efc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80a0f00:	4298      	cmp	r0, r3
 80a0f02:	f0c0 80bb 	bcc.w	80a107c <loop+0x500>
 80a0f06:	f000 fba9 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPowerPin, HIGH);
        Serial.println("digitalWrite(myntTwoPowerPin, HIGH;");
    }
    
    if(millis() > (eventStartB + (unsigned long) 2050) && millis() < (eventStartB + (unsigned long) 2350)){
 80a0f0a:	6823      	ldr	r3, [r4, #0]
 80a0f0c:	f603 0302 	addw	r3, r3, #2050	; 0x802
 80a0f10:	4298      	cmp	r0, r3
 80a0f12:	d908      	bls.n	80a0f26 <loop+0x3aa>
 80a0f14:	f000 fba2 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0f18:	4b83      	ldr	r3, [pc, #524]	; (80a1128 <loop+0x5ac>)
 80a0f1a:	681b      	ldr	r3, [r3, #0]
 80a0f1c:	f603 132e 	addw	r3, r3, #2350	; 0x92e
 80a0f20:	4298      	cmp	r0, r3
 80a0f22:	f0c0 80c8 	bcc.w	80a10b6 <loop+0x53a>
 80a0f26:	f000 fb99 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPlusPin, LOW);
        Serial.println(" digitalWrite(myntTwoPlusPin, LOW;");
    }else if(millis() > (eventStartB + (unsigned long) 2350) && millis() < (eventStartB + (unsigned long) 2600)){
 80a0f2a:	6823      	ldr	r3, [r4, #0]
 80a0f2c:	f603 132e 	addw	r3, r3, #2350	; 0x92e
 80a0f30:	4298      	cmp	r0, r3
 80a0f32:	d908      	bls.n	80a0f46 <loop+0x3ca>
 80a0f34:	f000 fb92 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0f38:	4b7b      	ldr	r3, [pc, #492]	; (80a1128 <loop+0x5ac>)
 80a0f3a:	681b      	ldr	r3, [r3, #0]
 80a0f3c:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80a0f40:	4298      	cmp	r0, r3
 80a0f42:	f0c0 80c1 	bcc.w	80a10c8 <loop+0x54c>
 80a0f46:	f000 fb89 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPlusPin, HIGH);
        Serial.println("digitalWrite(myntTwoPlusPin, HIGH");
    }
    
    if(millis() > (eventStartB + (unsigned long) 2400) && millis() < (eventStartB + (unsigned long) 2600)){
 80a0f4a:	6823      	ldr	r3, [r4, #0]
 80a0f4c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80a0f50:	4298      	cmp	r0, r3
 80a0f52:	f200 809e 	bhi.w	80a1092 <loop+0x516>
 80a0f56:	f000 fb81 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPlusPin, LOW);
        Serial.println(" digitalWrite(myntTwoPlusPin, LOW;");
    }else if(millis() > (eventStartB + (unsigned long) 2600) && millis() < (eventStartB + (unsigned long) 2800)){
 80a0f5a:	6823      	ldr	r3, [r4, #0]
 80a0f5c:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80a0f60:	4298      	cmp	r0, r3
 80a0f62:	d908      	bls.n	80a0f76 <loop+0x3fa>
 80a0f64:	f000 fb7a 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0f68:	4b6f      	ldr	r3, [pc, #444]	; (80a1128 <loop+0x5ac>)
 80a0f6a:	681b      	ldr	r3, [r3, #0]
 80a0f6c:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 80a0f70:	4298      	cmp	r0, r3
 80a0f72:	f0c0 80c7 	bcc.w	80a1104 <loop+0x588>
 80a0f76:	f000 fb71 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPlusPin, HIGH);
        Serial.println("digitalWrite(myntTwoPlusPin, HIGH");
    }
    
    if(millis() > (eventStartB + (unsigned long) 4000) && millis() < (eventStartB + (unsigned long) 6000)){
 80a0f7a:	6823      	ldr	r3, [r4, #0]
 80a0f7c:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80a0f80:	4298      	cmp	r0, r3
 80a0f82:	f200 80ac 	bhi.w	80a10de <loop+0x562>
 80a0f86:	f000 fb69 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPowerPin, LOW);
        Serial.println("digitalWrite(myntTwoPowerPin, LOW;");
    }else if(millis() > (eventStartB + (unsigned long) 6000) && millis() < (eventStartB + (unsigned long) 7000)){
 80a0f8a:	6823      	ldr	r3, [r4, #0]
 80a0f8c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80a0f90:	3310      	adds	r3, #16
 80a0f92:	4298      	cmp	r0, r3
 80a0f94:	d909      	bls.n	80a0faa <loop+0x42e>
 80a0f96:	f000 fb61 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
 80a0f9a:	4b63      	ldr	r3, [pc, #396]	; (80a1128 <loop+0x5ac>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 80a0fa2:	3318      	adds	r3, #24
 80a0fa4:	4298      	cmp	r0, r3
 80a0fa6:	f0c0 80db 	bcc.w	80a1160 <loop+0x5e4>
 80a0faa:	f000 fb57 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
        digitalWrite(myntTwoPowerPin, HIGH);
        Serial.println("digitalWrite(myntTwoPowerPin, HIGH");
    }
    
    if(millis() > (eventStartB + (unsigned long) 20000)){
 80a0fae:	6823      	ldr	r3, [r4, #0]
 80a0fb0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80a0fb4:	3320      	adds	r3, #32
 80a0fb6:	4298      	cmp	r0, r3
 80a0fb8:	d906      	bls.n	80a0fc8 <loop+0x44c>
        eventCompleteB = true;
 80a0fba:	2301      	movs	r3, #1
 80a0fbc:	702b      	strb	r3, [r5, #0]
        Serial.println("end");
 80a0fbe:	f001 fa45 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0fc2:	4957      	ldr	r1, [pc, #348]	; (80a1120 <loop+0x5a4>)
 80a0fc4:	f000 fe2d 	bl	80a1c22 <_ZN5Print7printlnEPKc>
    }
    
}

// Serial.println(WiFi.localIP());
delay(10);
 80a0fc8:	200a      	movs	r0, #10
 80a0fca:	f000 fd15 	bl	80a19f8 <delay>
  gyro.getEvent(&event);
  
    
     //RECEIVE
     int size = 0;
     OSCMessage inMessage;
 80a0fce:	a81b      	add	r0, sp, #108	; 0x6c
 80a0fd0:	f000 f982 	bl	80a12d8 <_ZN10OSCMessageD1Ev>
    
}

// Serial.println(WiFi.localIP());
delay(10);
}
 80a0fd4:	b030      	add	sp, #192	; 0xc0
 80a0fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    if(millis() < (eventStartA + (unsigned long) 2000)){
        digitalWrite(myntOnePowerPin, LOW);
        Serial.println("digitalWrite(myntOnePowerPin, LOW;");
    }else if(millis() > (eventStartA + (unsigned long) 2000) && millis() < (eventStartA + (unsigned long) 3000)){
        digitalWrite(myntOnePowerPin, HIGH);
 80a0fda:	4b56      	ldr	r3, [pc, #344]	; (80a1134 <loop+0x5b8>)
 80a0fdc:	2101      	movs	r1, #1
 80a0fde:	8818      	ldrh	r0, [r3, #0]
 80a0fe0:	f001 fb7d 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntOnePowerPin, HIGH;");
 80a0fe4:	f001 fa32 	bl	80a244c <_Z16_fetch_usbserialv>
 80a0fe8:	4953      	ldr	r1, [pc, #332]	; (80a1138 <loop+0x5bc>)
 80a0fea:	f000 fe1a 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a0fee:	e6b0      	b.n	80a0d52 <loop+0x1d6>
 80a0ff0:	f000 fb34 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartA + (unsigned long) 2350) && millis() < (eventStartA + (unsigned long) 2600)){
        digitalWrite(myntOnePlusPin, HIGH);
        Serial.println("digitalWrite(myntOnePlusPin, HIGH");
    }
    
    if(millis() > (eventStartA + (unsigned long) 2400) && millis() < (eventStartA + (unsigned long) 2600)){
 80a0ff4:	4b49      	ldr	r3, [pc, #292]	; (80a111c <loop+0x5a0>)
 80a0ff6:	681b      	ldr	r3, [r3, #0]
 80a0ff8:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80a0ffc:	4298      	cmp	r0, r3
 80a0ffe:	f4bf af15 	bcs.w	80a0e2c <loop+0x2b0>
        digitalWrite(myntOnePlusPin, LOW);
 80a1002:	4b4e      	ldr	r3, [pc, #312]	; (80a113c <loop+0x5c0>)
 80a1004:	2100      	movs	r1, #0
 80a1006:	8818      	ldrh	r0, [r3, #0]
 80a1008:	f001 fb69 	bl	80a26de <digitalWrite>
        Serial.println(" digitalWrite(myntOnePlusPin, LOW;");
 80a100c:	f001 fa1e 	bl	80a244c <_Z16_fetch_usbserialv>
 80a1010:	494b      	ldr	r1, [pc, #300]	; (80a1140 <loop+0x5c4>)
 80a1012:	e025      	b.n	80a1060 <loop+0x4e4>
    
    if(millis() > (eventStartA + (unsigned long) 2050) && millis() < (eventStartA + (unsigned long) 2350)){
        digitalWrite(myntOnePlusPin, LOW);
        Serial.println(" digitalWrite(myntOnePlusPin, LOW;");
    }else if(millis() > (eventStartA + (unsigned long) 2350) && millis() < (eventStartA + (unsigned long) 2600)){
        digitalWrite(myntOnePlusPin, HIGH);
 80a1014:	4b49      	ldr	r3, [pc, #292]	; (80a113c <loop+0x5c0>)
 80a1016:	2101      	movs	r1, #1
 80a1018:	8818      	ldrh	r0, [r3, #0]
 80a101a:	f001 fb60 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntOnePlusPin, HIGH");
 80a101e:	f001 fa15 	bl	80a244c <_Z16_fetch_usbserialv>
 80a1022:	4948      	ldr	r1, [pc, #288]	; (80a1144 <loop+0x5c8>)
 80a1024:	f000 fdfd 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a1028:	e6f8      	b.n	80a0e1c <loop+0x2a0>
 80a102a:	f000 fb17 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartA + (unsigned long) 2600) && millis() < (eventStartA + (unsigned long) 2800)){
        digitalWrite(myntOnePlusPin, HIGH);
        Serial.println("digitalWrite(myntOnePlusPin, HIGH");
    }
    
    if(millis() > (eventStartA + (unsigned long) 4000) && millis() < (eventStartA + (unsigned long) 6000)){
 80a102e:	4b3b      	ldr	r3, [pc, #236]	; (80a111c <loop+0x5a0>)
 80a1030:	681b      	ldr	r3, [r3, #0]
 80a1032:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80a1036:	3310      	adds	r3, #16
 80a1038:	4298      	cmp	r0, r3
 80a103a:	f4bf af0f 	bcs.w	80a0e5c <loop+0x2e0>
        digitalWrite(myntOnePowerPin, LOW);
 80a103e:	4b3d      	ldr	r3, [pc, #244]	; (80a1134 <loop+0x5b8>)
 80a1040:	2100      	movs	r1, #0
 80a1042:	8818      	ldrh	r0, [r3, #0]
 80a1044:	f001 fb4b 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntOnePowerPin, LOW;");
 80a1048:	f001 fa00 	bl	80a244c <_Z16_fetch_usbserialv>
 80a104c:	493e      	ldr	r1, [pc, #248]	; (80a1148 <loop+0x5cc>)
 80a104e:	e012      	b.n	80a1076 <loop+0x4fa>
    
    if(millis() > (eventStartA + (unsigned long) 2400) && millis() < (eventStartA + (unsigned long) 2600)){
        digitalWrite(myntOnePlusPin, LOW);
        Serial.println(" digitalWrite(myntOnePlusPin, LOW;");
    }else if(millis() > (eventStartA + (unsigned long) 2600) && millis() < (eventStartA + (unsigned long) 2800)){
        digitalWrite(myntOnePlusPin, HIGH);
 80a1050:	4b3a      	ldr	r3, [pc, #232]	; (80a113c <loop+0x5c0>)
 80a1052:	2101      	movs	r1, #1
 80a1054:	8818      	ldrh	r0, [r3, #0]
 80a1056:	f001 fb42 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntOnePlusPin, HIGH");
 80a105a:	f001 f9f7 	bl	80a244c <_Z16_fetch_usbserialv>
 80a105e:	4939      	ldr	r1, [pc, #228]	; (80a1144 <loop+0x5c8>)
 80a1060:	f000 fddf 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a1064:	e6f2      	b.n	80a0e4c <loop+0x2d0>
    
    if(millis() > (eventStartA + (unsigned long) 4000) && millis() < (eventStartA + (unsigned long) 6000)){
        digitalWrite(myntOnePowerPin, LOW);
        Serial.println("digitalWrite(myntOnePowerPin, LOW;");
    }else if(millis() > (eventStartA + (unsigned long) 6000) && millis() < (eventStartA + (unsigned long) 7000)){
        digitalWrite(myntOnePowerPin, HIGH);
 80a1066:	4b33      	ldr	r3, [pc, #204]	; (80a1134 <loop+0x5b8>)
 80a1068:	2101      	movs	r1, #1
 80a106a:	8818      	ldrh	r0, [r3, #0]
 80a106c:	f001 fb37 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntOnePowerPin, HIGH");
 80a1070:	f001 f9ec 	bl	80a244c <_Z16_fetch_usbserialv>
 80a1074:	4935      	ldr	r1, [pc, #212]	; (80a114c <loop+0x5d0>)
 80a1076:	f000 fdd4 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a107a:	e701      	b.n	80a0e80 <loop+0x304>
    
    if(millis() < (eventStartB + (unsigned long) 2000)){
        digitalWrite(myntTwoPowerPin, LOW);
        Serial.println("digitalWrite(myntTwoPowerPin, LOW;");
    }else if(millis() > (eventStartB + (unsigned long) 2000) && millis() < (eventStartB + (unsigned long) 3000)){
        digitalWrite(myntTwoPowerPin, HIGH);
 80a107c:	4b2b      	ldr	r3, [pc, #172]	; (80a112c <loop+0x5b0>)
 80a107e:	2101      	movs	r1, #1
 80a1080:	8818      	ldrh	r0, [r3, #0]
 80a1082:	f001 fb2c 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntTwoPowerPin, HIGH;");
 80a1086:	f001 f9e1 	bl	80a244c <_Z16_fetch_usbserialv>
 80a108a:	4931      	ldr	r1, [pc, #196]	; (80a1150 <loop+0x5d4>)
 80a108c:	f000 fdc9 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a1090:	e739      	b.n	80a0f06 <loop+0x38a>
 80a1092:	f000 fae3 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartB + (unsigned long) 2350) && millis() < (eventStartB + (unsigned long) 2600)){
        digitalWrite(myntTwoPlusPin, HIGH);
        Serial.println("digitalWrite(myntTwoPlusPin, HIGH");
    }
    
    if(millis() > (eventStartB + (unsigned long) 2400) && millis() < (eventStartB + (unsigned long) 2600)){
 80a1096:	4b24      	ldr	r3, [pc, #144]	; (80a1128 <loop+0x5ac>)
 80a1098:	681b      	ldr	r3, [r3, #0]
 80a109a:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80a109e:	4298      	cmp	r0, r3
 80a10a0:	f4bf af59 	bcs.w	80a0f56 <loop+0x3da>
        digitalWrite(myntTwoPlusPin, LOW);
 80a10a4:	4b2b      	ldr	r3, [pc, #172]	; (80a1154 <loop+0x5d8>)
 80a10a6:	2100      	movs	r1, #0
 80a10a8:	8818      	ldrh	r0, [r3, #0]
 80a10aa:	f001 fb18 	bl	80a26de <digitalWrite>
        Serial.println(" digitalWrite(myntTwoPlusPin, LOW;");
 80a10ae:	f001 f9cd 	bl	80a244c <_Z16_fetch_usbserialv>
 80a10b2:	4929      	ldr	r1, [pc, #164]	; (80a1158 <loop+0x5dc>)
 80a10b4:	e02e      	b.n	80a1114 <loop+0x598>
        digitalWrite(myntTwoPowerPin, HIGH);
        Serial.println("digitalWrite(myntTwoPowerPin, HIGH;");
    }
    
    if(millis() > (eventStartB + (unsigned long) 2050) && millis() < (eventStartB + (unsigned long) 2350)){
        digitalWrite(myntTwoPlusPin, LOW);
 80a10b6:	4b27      	ldr	r3, [pc, #156]	; (80a1154 <loop+0x5d8>)
 80a10b8:	2100      	movs	r1, #0
 80a10ba:	8818      	ldrh	r0, [r3, #0]
 80a10bc:	f001 fb0f 	bl	80a26de <digitalWrite>
        Serial.println(" digitalWrite(myntTwoPlusPin, LOW;");
 80a10c0:	f001 f9c4 	bl	80a244c <_Z16_fetch_usbserialv>
 80a10c4:	4924      	ldr	r1, [pc, #144]	; (80a1158 <loop+0x5dc>)
 80a10c6:	e007      	b.n	80a10d8 <loop+0x55c>
    }else if(millis() > (eventStartB + (unsigned long) 2350) && millis() < (eventStartB + (unsigned long) 2600)){
        digitalWrite(myntTwoPlusPin, HIGH);
 80a10c8:	4b22      	ldr	r3, [pc, #136]	; (80a1154 <loop+0x5d8>)
 80a10ca:	2101      	movs	r1, #1
 80a10cc:	8818      	ldrh	r0, [r3, #0]
 80a10ce:	f001 fb06 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntTwoPlusPin, HIGH");
 80a10d2:	f001 f9bb 	bl	80a244c <_Z16_fetch_usbserialv>
 80a10d6:	4921      	ldr	r1, [pc, #132]	; (80a115c <loop+0x5e0>)
 80a10d8:	f000 fda3 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a10dc:	e733      	b.n	80a0f46 <loop+0x3ca>
 80a10de:	f000 fabd 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
    }else if(millis() > (eventStartB + (unsigned long) 2600) && millis() < (eventStartB + (unsigned long) 2800)){
        digitalWrite(myntTwoPlusPin, HIGH);
        Serial.println("digitalWrite(myntTwoPlusPin, HIGH");
    }
    
    if(millis() > (eventStartB + (unsigned long) 4000) && millis() < (eventStartB + (unsigned long) 6000)){
 80a10e2:	4b11      	ldr	r3, [pc, #68]	; (80a1128 <loop+0x5ac>)
 80a10e4:	681b      	ldr	r3, [r3, #0]
 80a10e6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80a10ea:	3310      	adds	r3, #16
 80a10ec:	4298      	cmp	r0, r3
 80a10ee:	f4bf af4a 	bcs.w	80a0f86 <loop+0x40a>
        digitalWrite(myntTwoPowerPin, LOW);
 80a10f2:	4b0e      	ldr	r3, [pc, #56]	; (80a112c <loop+0x5b0>)
 80a10f4:	2100      	movs	r1, #0
 80a10f6:	8818      	ldrh	r0, [r3, #0]
 80a10f8:	f001 faf1 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntTwoPowerPin, LOW;");
 80a10fc:	f001 f9a6 	bl	80a244c <_Z16_fetch_usbserialv>
 80a1100:	490b      	ldr	r1, [pc, #44]	; (80a1130 <loop+0x5b4>)
 80a1102:	e035      	b.n	80a1170 <loop+0x5f4>
    
    if(millis() > (eventStartB + (unsigned long) 2400) && millis() < (eventStartB + (unsigned long) 2600)){
        digitalWrite(myntTwoPlusPin, LOW);
        Serial.println(" digitalWrite(myntTwoPlusPin, LOW;");
    }else if(millis() > (eventStartB + (unsigned long) 2600) && millis() < (eventStartB + (unsigned long) 2800)){
        digitalWrite(myntTwoPlusPin, HIGH);
 80a1104:	4b13      	ldr	r3, [pc, #76]	; (80a1154 <loop+0x5d8>)
 80a1106:	2101      	movs	r1, #1
 80a1108:	8818      	ldrh	r0, [r3, #0]
 80a110a:	f001 fae8 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntTwoPlusPin, HIGH");
 80a110e:	f001 f99d 	bl	80a244c <_Z16_fetch_usbserialv>
 80a1112:	4912      	ldr	r1, [pc, #72]	; (80a115c <loop+0x5e0>)
 80a1114:	f000 fd85 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a1118:	e72d      	b.n	80a0f76 <loop+0x3fa>
 80a111a:	bf00      	nop
 80a111c:	200004e4 	.word	0x200004e4
 80a1120:	080a3b41 	.word	0x080a3b41
 80a1124:	080a3b45 	.word	0x080a3b45
 80a1128:	20000540 	.word	0x20000540
 80a112c:	20000318 	.word	0x20000318
 80a1130:	080a3b4d 	.word	0x080a3b4d
 80a1134:	20000324 	.word	0x20000324
 80a1138:	080a3b70 	.word	0x080a3b70
 80a113c:	20000314 	.word	0x20000314
 80a1140:	080a3b94 	.word	0x080a3b94
 80a1144:	080a3bb7 	.word	0x080a3bb7
 80a1148:	080a3b1e 	.word	0x080a3b1e
 80a114c:	080a3bd9 	.word	0x080a3bd9
 80a1150:	080a3bfc 	.word	0x080a3bfc
 80a1154:	20000320 	.word	0x20000320
 80a1158:	080a3c20 	.word	0x080a3c20
 80a115c:	080a3c43 	.word	0x080a3c43
    
    if(millis() > (eventStartB + (unsigned long) 4000) && millis() < (eventStartB + (unsigned long) 6000)){
        digitalWrite(myntTwoPowerPin, LOW);
        Serial.println("digitalWrite(myntTwoPowerPin, LOW;");
    }else if(millis() > (eventStartB + (unsigned long) 6000) && millis() < (eventStartB + (unsigned long) 7000)){
        digitalWrite(myntTwoPowerPin, HIGH);
 80a1160:	4b05      	ldr	r3, [pc, #20]	; (80a1178 <loop+0x5fc>)
 80a1162:	2101      	movs	r1, #1
 80a1164:	8818      	ldrh	r0, [r3, #0]
 80a1166:	f001 faba 	bl	80a26de <digitalWrite>
        Serial.println("digitalWrite(myntTwoPowerPin, HIGH");
 80a116a:	f001 f96f 	bl	80a244c <_Z16_fetch_usbserialv>
 80a116e:	4903      	ldr	r1, [pc, #12]	; (80a117c <loop+0x600>)
 80a1170:	f000 fd57 	bl	80a1c22 <_ZN5Print7printlnEPKc>
 80a1174:	e719      	b.n	80a0faa <loop+0x42e>
 80a1176:	bf00      	nop
 80a1178:	20000318 	.word	0x20000318
 80a117c:	080a3c65 	.word	0x080a3c65

080a1180 <_GLOBAL__sub_I_SystemMode>:
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 
 80a1180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1182:	f000 fa73 	bl	80a166c <HAL_Pin_Map>
SYSTEM_THREAD(ENABLED);
 80a1186:	2100      	movs	r1, #0
 80a1188:	2001      	movs	r0, #1
 80a118a:	f000 fbd1 	bl	80a1930 <system_thread_set_state>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a118e:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1192:	4c1f      	ldr	r4, [pc, #124]	; (80a1210 <_GLOBAL__sub_I_SystemMode+0x90>)
 80a1194:	2500      	movs	r5, #0
 80a1196:	8063      	strh	r3, [r4, #2]
 80a1198:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a119c:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a119e:	80a3      	strh	r3, [r4, #4]
 80a11a0:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a11a2:	f000 fbb5 	bl	80a1910 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a11a6:	a802      	add	r0, sp, #8
 80a11a8:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a11ac:	462a      	mov	r2, r5
 80a11ae:	4629      	mov	r1, r5
 80a11b0:	f000 fa44 	bl	80a163c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a11b4:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a11b6:	2b1e      	cmp	r3, #30
 80a11b8:	d104      	bne.n	80a11c4 <_GLOBAL__sub_I_SystemMode+0x44>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a11ba:	2303      	movs	r3, #3
 80a11bc:	7023      	strb	r3, [r4, #0]
 80a11be:	2311      	movs	r3, #17
 80a11c0:	8065      	strh	r5, [r4, #2]
 80a11c2:	80a3      	strh	r3, [r4, #4]

// This #include statement was automatically added by the Particle IDE.
#include "Adafruit_FXOS8700.h"

/* Assign a unique ID to this sensor at the same time */
Adafruit_FXOS8700 accelmag = Adafruit_FXOS8700(0x8700A, 0x8700B);
 80a11c4:	4a13      	ldr	r2, [pc, #76]	; (80a1214 <_GLOBAL__sub_I_SystemMode+0x94>)
 80a11c6:	4914      	ldr	r1, [pc, #80]	; (80a1218 <_GLOBAL__sub_I_SystemMode+0x98>)
 80a11c8:	4814      	ldr	r0, [pc, #80]	; (80a121c <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a11ca:	f7ff f93d 	bl	80a0448 <_ZN17Adafruit_FXOS8700C1Ell>
 80a11ce:	4a14      	ldr	r2, [pc, #80]	; (80a1220 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a11d0:	4914      	ldr	r1, [pc, #80]	; (80a1224 <_GLOBAL__sub_I_SystemMode+0xa4>)
 80a11d2:	4812      	ldr	r0, [pc, #72]	; (80a121c <_GLOBAL__sub_I_SystemMode+0x9c>)
 80a11d4:	f001 fb0e 	bl	80a27f4 <__aeabi_atexit>

/* Assign a unique ID to this sensor at the same time */
Adafruit_FXAS21002C gyro = Adafruit_FXAS21002C(0x0021002C);
 80a11d8:	4913      	ldr	r1, [pc, #76]	; (80a1228 <_GLOBAL__sub_I_SystemMode+0xa8>)
 80a11da:	4814      	ldr	r0, [pc, #80]	; (80a122c <_GLOBAL__sub_I_SystemMode+0xac>)
 80a11dc:	f7ff f8c0 	bl	80a0360 <_ZN19Adafruit_FXAS21002CC1El>
 80a11e0:	4a0f      	ldr	r2, [pc, #60]	; (80a1220 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a11e2:	4913      	ldr	r1, [pc, #76]	; (80a1230 <_GLOBAL__sub_I_SystemMode+0xb0>)
 80a11e4:	4811      	ldr	r0, [pc, #68]	; (80a122c <_GLOBAL__sub_I_SystemMode+0xac>)
 80a11e6:	f001 fb05 	bl	80a27f4 <__aeabi_atexit>
*/

// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);
IPAddress ipAddress;
 80a11ea:	4812      	ldr	r0, [pc, #72]	; (80a1234 <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a11ec:	f000 fc8c 	bl	80a1b08 <_ZN9IPAddressC1Ev>
 80a11f0:	4a0b      	ldr	r2, [pc, #44]	; (80a1220 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a11f2:	4911      	ldr	r1, [pc, #68]	; (80a1238 <_GLOBAL__sub_I_SystemMode+0xb8>)
 80a11f4:	480f      	ldr	r0, [pc, #60]	; (80a1234 <_GLOBAL__sub_I_SystemMode+0xb4>)
 80a11f6:	f001 fafd 	bl	80a27f4 <__aeabi_atexit>
int port;

// An UDP instance to let us send and receive packets over UDP
UDP udp;
 80a11fa:	4810      	ldr	r0, [pc, #64]	; (80a123c <_GLOBAL__sub_I_SystemMode+0xbc>)
 80a11fc:	f000 ffe2 	bl	80a21c4 <_ZN3UDPC1Ev>
 80a1200:	4a07      	ldr	r2, [pc, #28]	; (80a1220 <_GLOBAL__sub_I_SystemMode+0xa0>)
 80a1202:	490f      	ldr	r1, [pc, #60]	; (80a1240 <_GLOBAL__sub_I_SystemMode+0xc0>)
 80a1204:	480d      	ldr	r0, [pc, #52]	; (80a123c <_GLOBAL__sub_I_SystemMode+0xbc>)
 80a1206:	f001 faf5 	bl	80a27f4 <__aeabi_atexit>
    // outMessage.addString("a");
    outMessage.addString("a");
  /* BANG TO MAX */
  outMessage.send(udp, ipAddress, localPort);
 
 80a120a:	b003      	add	sp, #12
 80a120c:	bd30      	pop	{r4, r5, pc}
 80a120e:	bf00      	nop
 80a1210:	200004d8 	.word	0x200004d8
 80a1214:	0008700b 	.word	0x0008700b
 80a1218:	0008700a 	.word	0x0008700a
 80a121c:	200004e8 	.word	0x200004e8
 80a1220:	20000390 	.word	0x20000390
 80a1224:	080a03c1 	.word	0x080a03c1
 80a1228:	0021002c 	.word	0x0021002c
 80a122c:	20000508 	.word	0x20000508
 80a1230:	080a00b5 	.word	0x080a00b5
 80a1234:	20000528 	.word	0x20000528
 80a1238:	080a07f9 	.word	0x080a07f9
 80a123c:	20000394 	.word	0x20000394
 80a1240:	080a0835 	.word	0x080a0835

080a1244 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
 80a1244:	2300      	movs	r3, #0
 80a1246:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
 80a1248:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
 80a124a:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
 80a124c:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
 80a124e:	6503      	str	r3, [r0, #80]	; 0x50
 80a1250:	4770      	bx	lr
	...

080a1254 <_ZN10OSCMessageC1Ev>:
#include "simple-OSC.h"

OSCMessage::OSCMessage()
 80a1254:	b538      	push	{r3, r4, r5, lr}
 80a1256:	4604      	mov	r4, r0
 80a1258:	4d0c      	ldr	r5, [pc, #48]	; (80a128c <_ZN10OSCMessageC1Ev+0x38>)
 80a125a:	3008      	adds	r0, #8
 80a125c:	4629      	mov	r1, r5
 80a125e:	f000 fda5 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a1262:	4629      	mov	r1, r5
 80a1264:	f104 0018 	add.w	r0, r4, #24
 80a1268:	f000 fda0 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a126c:	4629      	mov	r1, r5
 80a126e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a1272:	f000 fd9b 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a1276:	4629      	mov	r1, r5
 80a1278:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a127c:	f000 fd96 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a1280:	4620      	mov	r0, r4
 80a1282:	f7ff ffdf 	bl	80a1244 <_ZN10OSCMessage12setupMessageEv>
}
 80a1286:	4620      	mov	r0, r4
 80a1288:	bd38      	pop	{r3, r4, r5, pc}
 80a128a:	bf00      	nop
 80a128c:	080a3ce6 	.word	0x080a3ce6

080a1290 <_ZN10OSCMessageC1EPKc>:

OSCMessage::OSCMessage(const char * address)
 80a1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1292:	4604      	mov	r4, r0
 80a1294:	460f      	mov	r7, r1
 80a1296:	4d0f      	ldr	r5, [pc, #60]	; (80a12d4 <_ZN10OSCMessageC1EPKc+0x44>)
 80a1298:	3008      	adds	r0, #8
 80a129a:	4629      	mov	r1, r5
 80a129c:	f000 fd86 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a12a0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80a12a4:	4629      	mov	r1, r5
 80a12a6:	f104 0018 	add.w	r0, r4, #24
 80a12aa:	f000 fd7f 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a12ae:	4629      	mov	r1, r5
 80a12b0:	4630      	mov	r0, r6
 80a12b2:	f000 fd7b 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
 80a12b6:	4629      	mov	r1, r5
 80a12b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a12bc:	f000 fd76 	bl	80a1dac <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
 80a12c0:	4620      	mov	r0, r4
 80a12c2:	f7ff ffbf 	bl	80a1244 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
 80a12c6:	4639      	mov	r1, r7
 80a12c8:	4630      	mov	r0, r6
 80a12ca:	f000 fd82 	bl	80a1dd2 <_ZN6StringaSEPKc>
}
 80a12ce:	4620      	mov	r0, r4
 80a12d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a12d2:	bf00      	nop
 80a12d4:	080a3ce6 	.word	0x080a3ce6

080a12d8 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a12d8:	b510      	push	{r4, lr}
 80a12da:	4604      	mov	r4, r0
{
    free(incomingBuffer);
 80a12dc:	6800      	ldr	r0, [r0, #0]
 80a12de:	f000 fb7b 	bl	80a19d8 <free>
    free(inputDatas);
 80a12e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a12e4:	f000 fb78 	bl	80a19d8 <free>
    free(outputDatas);
 80a12e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a12ea:	f000 fb75 	bl	80a19d8 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
 80a12ee:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a12f2:	f000 fd14 	bl	80a1d1e <_ZN6StringD1Ev>
 80a12f6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a12fa:	f000 fd10 	bl	80a1d1e <_ZN6StringD1Ev>
 80a12fe:	f104 0018 	add.w	r0, r4, #24
 80a1302:	f000 fd0c 	bl	80a1d1e <_ZN6StringD1Ev>
 80a1306:	f104 0008 	add.w	r0, r4, #8
 80a130a:	f000 fd08 	bl	80a1d1e <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
 80a130e:	4620      	mov	r0, r4
 80a1310:	bd10      	pop	{r4, pc}

080a1312 <_ZN10OSCMessage4fillEc>:

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a1312:	b538      	push	{r3, r4, r5, lr}
 80a1314:	460d      	mov	r5, r1
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a1316:	6841      	ldr	r1, [r0, #4]
    free(outputDatas);
}

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
 80a1318:	4604      	mov	r4, r0
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
 80a131a:	3101      	adds	r1, #1
 80a131c:	6800      	ldr	r0, [r0, #0]
 80a131e:	f000 fb63 	bl	80a19e8 <realloc>
 80a1322:	6020      	str	r0, [r4, #0]
    if (incomingBuffer != NULL)
 80a1324:	b118      	cbz	r0, 80a132e <_ZN10OSCMessage4fillEc+0x1c>
    {
        incomingBuffer[incomingBufferSize++] = incomingByte;
 80a1326:	6863      	ldr	r3, [r4, #4]
 80a1328:	1c5a      	adds	r2, r3, #1
 80a132a:	6062      	str	r2, [r4, #4]
 80a132c:	54c5      	strb	r5, [r0, r3]
 80a132e:	bd38      	pop	{r3, r4, r5, pc}

080a1330 <_ZN10OSCMessage5parseEv>:
    }
}

bool OSCMessage::parse()
{
 80a1330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1338:	4606      	mov	r6, r0
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
    int dataLocation = -1;
 80a133a:	4614      	mov	r4, r2

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
 80a133c:	4691      	mov	r9, r2
}

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
 80a133e:	4690      	mov	r8, r2
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a1340:	b083      	sub	sp, #12
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
 80a1342:	f100 0b18 	add.w	fp, r0, #24
        incomingBuffer[incomingBufferSize++] = incomingByte;
    }
}

bool OSCMessage::parse()
{
 80a1346:	af00      	add	r7, sp, #0
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a1348:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a134c:	1c55      	adds	r5, r2, #1
 80a134e:	45aa      	cmp	sl, r5
 80a1350:	dd61      	ble.n	80a1416 <_ZN10OSCMessage5parseEv+0xe6>
    {
        if (incomingBuffer[i] == 44)
 80a1352:	6831      	ldr	r1, [r6, #0]
 80a1354:	5d4b      	ldrb	r3, [r1, r5]
 80a1356:	2b2c      	cmp	r3, #44	; 0x2c
 80a1358:	d110      	bne.n	80a137c <_ZN10OSCMessage5parseEv+0x4c>
        {
            char charAddress[i-1];
            memcpy(charAddress,incomingBuffer,i-1);
            inputAddress = charAddress;
            addressLocation = i;
 80a135a:	46e8      	mov	r8, sp
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
    {
        if (incomingBuffer[i] == 44)
        {
            char charAddress[i-1];
 80a135c:	1dd3      	adds	r3, r2, #7
 80a135e:	f023 0307 	bic.w	r3, r3, #7
 80a1362:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charAddress,incomingBuffer,i-1);
 80a1366:	4668      	mov	r0, sp
 80a1368:	f002 fadc 	bl	80a3924 <memcpy>
            inputAddress = charAddress;
 80a136c:	4669      	mov	r1, sp
 80a136e:	f106 0008 	add.w	r0, r6, #8
 80a1372:	f000 fd2e 	bl	80a1dd2 <_ZN6StringaSEPKc>
 80a1376:	46c5      	mov	sp, r8
 80a1378:	46a8      	mov	r8, r5
 80a137a:	e04a      	b.n	80a1412 <_ZN10OSCMessage5parseEv+0xe2>
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
 80a137c:	f1b8 0f00 	cmp.w	r8, #0
 80a1380:	dd47      	ble.n	80a1412 <_ZN10OSCMessage5parseEv+0xe2>
 80a1382:	b9bb      	cbnz	r3, 80a13b4 <_ZN10OSCMessage5parseEv+0x84>
 80a1384:	f1b9 0f00 	cmp.w	r9, #0
 80a1388:	da14      	bge.n	80a13b4 <_ZN10OSCMessage5parseEv+0x84>
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
            typesLocation = i;
 80a138a:	46e9      	mov	r9, sp
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
 80a138c:	ebc8 0305 	rsb	r3, r8, r5
 80a1390:	3306      	adds	r3, #6
 80a1392:	f023 0307 	bic.w	r3, r3, #7
 80a1396:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
 80a139a:	f108 0301 	add.w	r3, r8, #1
 80a139e:	4419      	add	r1, r3
 80a13a0:	4668      	mov	r0, sp
 80a13a2:	f002 fabf 	bl	80a3924 <memcpy>
            inputTypes = charTypes;
 80a13a6:	4669      	mov	r1, sp
 80a13a8:	4658      	mov	r0, fp
 80a13aa:	f000 fd12 	bl	80a1dd2 <_ZN6StringaSEPKc>
 80a13ae:	46cd      	mov	sp, r9
            typesLocation = i;
 80a13b0:	46a9      	mov	r9, r5
 80a13b2:	e02e      	b.n	80a1412 <_ZN10OSCMessage5parseEv+0xe2>
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
 80a13b4:	f1b9 0f00 	cmp.w	r9, #0
 80a13b8:	dd2b      	ble.n	80a1412 <_ZN10OSCMessage5parseEv+0xe2>
 80a13ba:	2c00      	cmp	r4, #0
 80a13bc:	da28      	bge.n	80a1410 <_ZN10OSCMessage5parseEv+0xe0>
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a13be:	ebc8 0009 	rsb	r0, r8, r9
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a13c2:	2304      	movs	r3, #4
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
 80a13c4:	1e44      	subs	r4, r0, #1
            int bitCount = 4*round((typesCount+1)/4)+3;
 80a13c6:	fb90 f0f3 	sdiv	r0, r0, r3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a13ca:	2800      	cmp	r0, #0
 80a13cc:	db06      	blt.n	80a13dc <_ZN10OSCMessage5parseEv+0xac>
 80a13ce:	f001 fcb1 	bl	80a2d34 <__aeabi_i2d>
 80a13d2:	2200      	movs	r2, #0
 80a13d4:	4b13      	ldr	r3, [pc, #76]	; (80a1424 <_ZN10OSCMessage5parseEv+0xf4>)
 80a13d6:	f001 fb61 	bl	80a2a9c <__adddf3>
 80a13da:	e005      	b.n	80a13e8 <_ZN10OSCMessage5parseEv+0xb8>
 80a13dc:	f001 fcaa 	bl	80a2d34 <__aeabi_i2d>
 80a13e0:	2200      	movs	r2, #0
 80a13e2:	4b10      	ldr	r3, [pc, #64]	; (80a1424 <_ZN10OSCMessage5parseEv+0xf4>)
 80a13e4:	f001 fb58 	bl	80a2a98 <__aeabi_dsub>
 80a13e8:	f001 ff1c 	bl	80a3224 <__aeabi_d2iz>
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
 80a13ec:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
 80a13f0:	3403      	adds	r4, #3
 80a13f2:	444c      	add	r4, r9
            inputDatas = (char *) malloc ( datasSize );
 80a13f4:	ebc4 020a 	rsb	r2, r4, sl
 80a13f8:	4610      	mov	r0, r2
 80a13fa:	607a      	str	r2, [r7, #4]
 80a13fc:	f000 fae4 	bl	80a19c8 <malloc>
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a1400:	6831      	ldr	r1, [r6, #0]
            int typesCount = typesLocation - addressLocation - 1;
            int bitCount = 4*round((typesCount+1)/4)+3;
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
            inputDatas = (char *) malloc ( datasSize );
 80a1402:	62b0      	str	r0, [r6, #40]	; 0x28
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
 80a1404:	4421      	add	r1, r4
 80a1406:	687a      	ldr	r2, [r7, #4]
 80a1408:	f002 fa8c 	bl	80a3924 <memcpy>
 80a140c:	4654      	mov	r4, sl
 80a140e:	e000      	b.n	80a1412 <_ZN10OSCMessage5parseEv+0xe2>
             Serial.println();
             }
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
 80a1410:	d103      	bne.n	80a141a <_ZN10OSCMessage5parseEv+0xea>
 80a1412:	462a      	mov	r2, r5
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
 80a1414:	e798      	b.n	80a1348 <_ZN10OSCMessage5parseEv+0x18>
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
        }
    }
    return false;
 80a1416:	2000      	movs	r0, #0
 80a1418:	e000      	b.n	80a141c <_ZN10OSCMessage5parseEv+0xec>
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
 80a141a:	2001      	movs	r0, #1
        }
    }
    return false;
}
 80a141c:	370c      	adds	r7, #12
 80a141e:	46bd      	mov	sp, r7
 80a1420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1424:	3fe00000 	.word	0x3fe00000

080a1428 <_ZN10OSCMessage5routeEPKcPFvRS_E>:

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
 80a1428:	b570      	push	{r4, r5, r6, lr}
 80a142a:	4604      	mov	r4, r0
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a142c:	3008      	adds	r0, #8
 80a142e:	4615      	mov	r5, r2
 80a1430:	f000 fd04 	bl	80a1e3c <_ZNK6String6equalsEPKc>
    if( inputAddress == pattern)
 80a1434:	b120      	cbz	r0, 80a1440 <_ZN10OSCMessage5routeEPKcPFvRS_E+0x18>
    {
        callback(*this);
 80a1436:	4620      	mov	r0, r4
 80a1438:	462b      	mov	r3, r5
    }
}
 80a143a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
    if( inputAddress == pattern)
    {
        callback(*this);
 80a143e:	4718      	bx	r3
 80a1440:	bd70      	pop	{r4, r5, r6, pc}

080a1442 <_ZN10OSCMessage6addIntEi>:
    return u.f;
}

///SENDING
void OSCMessage::addInt(int value)
{
 80a1442:	b538      	push	{r3, r4, r5, lr}
 80a1444:	460d      	mov	r5, r1
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
 80a1446:	6d01      	ldr	r1, [r0, #80]	; 0x50
    return u.f;
}

///SENDING
void OSCMessage::addInt(int value)
{
 80a1448:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
 80a144a:	3104      	adds	r1, #4
 80a144c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80a144e:	f000 facb 	bl	80a19e8 <realloc>
 80a1452:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
 80a1454:	b1d0      	cbz	r0, 80a148c <_ZN10OSCMessage6addIntEi+0x4a>
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
 80a1456:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a1458:	0e2a      	lsrs	r2, r5, #24
 80a145a:	54c2      	strb	r2, [r0, r3]
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
 80a145c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a145e:	6d23      	ldr	r3, [r4, #80]	; 0x50
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
 80a1460:	f104 003c 	add.w	r0, r4, #60	; 0x3c
{
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
    if (outputDatas != NULL)
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
 80a1464:	4413      	add	r3, r2
 80a1466:	142a      	asrs	r2, r5, #16
 80a1468:	705a      	strb	r2, [r3, #1]
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
 80a146a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a146c:	6d23      	ldr	r3, [r4, #80]	; 0x50
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
 80a146e:	2169      	movs	r1, #105	; 0x69
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
    if (outputDatas != NULL)
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
 80a1470:	4413      	add	r3, r2
 80a1472:	122a      	asrs	r2, r5, #8
 80a1474:	709a      	strb	r2, [r3, #2]
        outputDatas[outputDatasSize+3] = value & 0xFF;
 80a1476:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a1478:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80a147a:	4413      	add	r3, r2
 80a147c:	70dd      	strb	r5, [r3, #3]
        outputDatasSize += 4;
 80a147e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a1480:	3304      	adds	r3, #4
 80a1482:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('i');
    }
}
 80a1484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
 80a1488:	f000 bccb 	b.w	80a1e22 <_ZN6String6concatEc>
 80a148c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1490 <_ZN10OSCMessage9addStringEPKc>:
        outputTypes.concat('f');
    }
}

void OSCMessage::addString(const char * value)
{
 80a1490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1492:	4604      	mov	r4, r0
    int stringLength = strlen(value);
 80a1494:	4608      	mov	r0, r1
        outputTypes.concat('f');
    }
}

void OSCMessage::addString(const char * value)
{
 80a1496:	460e      	mov	r6, r1
    int stringLength = strlen(value);
 80a1498:	f002 fa92 	bl	80a39c0 <strlen>
 80a149c:	4607      	mov	r7, r0
    int bitCount = 4*round((strlen(value)+1)/4)+4;
 80a149e:	3001      	adds	r0, #1
 80a14a0:	0880      	lsrs	r0, r0, #2
 80a14a2:	f001 fc37 	bl	80a2d14 <__aeabi_ui2d>
 80a14a6:	2200      	movs	r2, #0
 80a14a8:	4b12      	ldr	r3, [pc, #72]	; (80a14f4 <_ZN10OSCMessage9addStringEPKc+0x64>)
 80a14aa:	f001 faf7 	bl	80a2a9c <__adddf3>
 80a14ae:	f001 feb9 	bl	80a3224 <__aeabi_d2iz>
    int zeroCount = bitCount - stringLength+1;
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + bitCount );
 80a14b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
}

void OSCMessage::addString(const char * value)
{
    int stringLength = strlen(value);
    int bitCount = 4*round((strlen(value)+1)/4)+4;
 80a14b4:	3001      	adds	r0, #1
 80a14b6:	0085      	lsls	r5, r0, #2
    int zeroCount = bitCount - stringLength+1;
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + bitCount );
 80a14b8:	4429      	add	r1, r5
 80a14ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a14bc:	f000 fa94 	bl	80a19e8 <realloc>
 80a14c0:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
 80a14c2:	b1b0      	cbz	r0, 80a14f2 <_ZN10OSCMessage9addStringEPKc+0x62>
    {
        memset(&outputDatas[outputDatasSize],0,bitCount);
 80a14c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a14c6:	462a      	mov	r2, r5
 80a14c8:	2100      	movs	r1, #0
 80a14ca:	4418      	add	r0, r3
 80a14cc:	f002 fa35 	bl	80a393a <memset>
        memcpy(&outputDatas[outputDatasSize],value,stringLength);
 80a14d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80a14d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a14d4:	4631      	mov	r1, r6
 80a14d6:	463a      	mov	r2, r7
 80a14d8:	4418      	add	r0, r3
 80a14da:	f002 fa23 	bl	80a3924 <memcpy>
        outputDatasSize += bitCount;
 80a14de:	6d20      	ldr	r0, [r4, #80]	; 0x50
        outputTypes.concat('s');
 80a14e0:	2173      	movs	r1, #115	; 0x73
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + bitCount );
    if (outputDatas != NULL)
    {
        memset(&outputDatas[outputDatasSize],0,bitCount);
        memcpy(&outputDatas[outputDatasSize],value,stringLength);
        outputDatasSize += bitCount;
 80a14e2:	4405      	add	r5, r0
 80a14e4:	6525      	str	r5, [r4, #80]	; 0x50
        outputTypes.concat('s');
 80a14e6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    }
}
 80a14ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (outputDatas != NULL)
    {
        memset(&outputDatas[outputDatasSize],0,bitCount);
        memcpy(&outputDatas[outputDatasSize],value,stringLength);
        outputDatasSize += bitCount;
        outputTypes.concat('s');
 80a14ee:	f000 bc98 	b.w	80a1e22 <_ZN6String6concatEc>
 80a14f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a14f4:	3fe00000 	.word	0x3fe00000

080a14f8 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a14f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14fc:	b08b      	sub	sp, #44	; 0x2c
 80a14fe:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80a1502:	af00      	add	r7, sp, #0
 80a1504:	4681      	mov	r9, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a1506:	4640      	mov	r0, r8
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
 80a1508:	460e      	mov	r6, r1
 80a150a:	60fa      	str	r2, [r7, #12]
 80a150c:	60bb      	str	r3, [r7, #8]
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
 80a150e:	f002 fa57 	bl	80a39c0 <strlen>
 80a1512:	4605      	mov	r5, r0
 80a1514:	3003      	adds	r0, #3
 80a1516:	0880      	lsrs	r0, r0, #2
 80a1518:	f001 fbfc 	bl	80a2d14 <__aeabi_ui2d>
 80a151c:	2200      	movs	r2, #0
 80a151e:	4b40      	ldr	r3, [pc, #256]	; (80a1620 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a1520:	f001 fabc 	bl	80a2a9c <__adddf3>
 80a1524:	f001 fe7e 	bl	80a3224 <__aeabi_d2iz>
 80a1528:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
 80a152c:	0084      	lsls	r4, r0, #2
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a152e:	4650      	mov	r0, sl
 80a1530:	f002 fa46 	bl	80a39c0 <strlen>
{
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
    int addresszeroCount = addressBitCount-strlen(outputAddress);
 80a1534:	1b65      	subs	r5, r4, r5
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
 80a1536:	3401      	adds	r4, #1
 80a1538:	4683      	mov	fp, r0
 80a153a:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a153c:	3001      	adds	r0, #1
 80a153e:	0880      	lsrs	r0, r0, #2
 80a1540:	f001 fbe8 	bl	80a2d14 <__aeabi_ui2d>
 80a1544:	2200      	movs	r2, #0
 80a1546:	4b36      	ldr	r3, [pc, #216]	; (80a1620 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
 80a1548:	f001 faa8 	bl	80a2a9c <__adddf3>
 80a154c:	f001 fe6a 	bl	80a3224 <__aeabi_d2iz>
 80a1550:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a1554:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
 80a1558:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
 80a155c:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
 80a155e:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
 80a1560:	1de2      	adds	r2, r4, #7
 80a1562:	f022 0207 	bic.w	r2, r2, #7
 80a1566:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
 80a156a:	2100      	movs	r1, #0
 80a156c:	4622      	mov	r2, r4
 80a156e:	4668      	mov	r0, sp
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
 80a1570:	603b      	str	r3, [r7, #0]
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
    memset(outputBuffer,nullChar,outputBufferSize);
 80a1572:	f002 f9e2 	bl	80a393a <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
 80a1576:	4640      	mov	r0, r8
 80a1578:	f002 fa22 	bl	80a39c0 <strlen>
 80a157c:	4641      	mov	r1, r8
 80a157e:	4602      	mov	r2, r0
 80a1580:	4668      	mov	r0, sp
 80a1582:	f002 f9cf 	bl	80a3924 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
 80a1586:	4640      	mov	r0, r8
 80a1588:	f002 fa1a 	bl	80a39c0 <strlen>
 80a158c:	eb0d 0205 	add.w	r2, sp, r5
 80a1590:	212c      	movs	r1, #44	; 0x2c
 80a1592:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
 80a1594:	4640      	mov	r0, r8
 80a1596:	f002 fa13 	bl	80a39c0 <strlen>
 80a159a:	6078      	str	r0, [r7, #4]
 80a159c:	4650      	mov	r0, sl
 80a159e:	f002 fa0f 	bl	80a39c0 <strlen>
 80a15a2:	687a      	ldr	r2, [r7, #4]
 80a15a4:	4651      	mov	r1, sl
 80a15a6:	f102 0e01 	add.w	lr, r2, #1
 80a15aa:	44ae      	add	lr, r5
 80a15ac:	4602      	mov	r2, r0
 80a15ae:	eb0d 000e 	add.w	r0, sp, lr
 80a15b2:	f002 f9b7 	bl	80a3924 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
 80a15b6:	4640      	mov	r0, r8
 80a15b8:	f002 fa02 	bl	80a39c0 <strlen>
 80a15bc:	4680      	mov	r8, r0
 80a15be:	4650      	mov	r0, sl
 80a15c0:	f002 f9fe 	bl	80a39c0 <strlen>
 80a15c4:	4440      	add	r0, r8
 80a15c6:	3001      	adds	r0, #1
 80a15c8:	683b      	ldr	r3, [r7, #0]
 80a15ca:	4405      	add	r5, r0
 80a15cc:	eb05 000b 	add.w	r0, r5, fp
 80a15d0:	461a      	mov	r2, r3
 80a15d2:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
 80a15d6:	4468      	add	r0, sp
 80a15d8:	f002 f9a4 	bl	80a3924 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
 80a15dc:	6833      	ldr	r3, [r6, #0]
 80a15de:	68fd      	ldr	r5, [r7, #12]
 80a15e0:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a15e4:	4b0f      	ldr	r3, [pc, #60]	; (80a1624 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x12c>)
 80a15e6:	f107 0e14 	add.w	lr, r7, #20
 80a15ea:	3504      	adds	r5, #4
 80a15ec:	613b      	str	r3, [r7, #16]
 80a15ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a15f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a15f4:	682b      	ldr	r3, [r5, #0]
 80a15f6:	893a      	ldrh	r2, [r7, #8]
 80a15f8:	f88e 3000 	strb.w	r3, [lr]
 80a15fc:	f107 0110 	add.w	r1, r7, #16
 80a1600:	4630      	mov	r0, r6
 80a1602:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
 80a1604:	6833      	ldr	r3, [r6, #0]
 80a1606:	4622      	mov	r2, r4
 80a1608:	4669      	mov	r1, sp
 80a160a:	68db      	ldr	r3, [r3, #12]
 80a160c:	4630      	mov	r0, r6
 80a160e:	4798      	blx	r3
    udp.endPacket();
 80a1610:	6833      	ldr	r3, [r6, #0]
 80a1612:	4630      	mov	r0, r6
 80a1614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1616:	4798      	blx	r3
}
 80a1618:	372c      	adds	r7, #44	; 0x2c
 80a161a:	46bd      	mov	sp, r7
 80a161c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1620:	3fe00000 	.word	0x3fe00000
 80a1624:	080a3cc4 	.word	0x080a3cc4

080a1628 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
 80a1628:	f000 b820 	b.w	80a166c <HAL_Pin_Map>

080a162c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <os_mutex_create+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601d0 	.word	0x080601d0

080a163c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601b8 	.word	0x080601b8

080a164c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_RNG_GetRandomNumber+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	685b      	ldr	r3, [r3, #4]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	0806019c 	.word	0x0806019c

080a165c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	695b      	ldr	r3, [r3, #20]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	0806019c 	.word	0x0806019c

080a166c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_Pin_Map+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	681b      	ldr	r3, [r3, #0]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601b0 	.word	0x080601b0

080a167c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_Validate_Pin_Function+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	685b      	ldr	r3, [r3, #4]
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601b0 	.word	0x080601b0

080a168c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_Pin_Mode+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	689b      	ldr	r3, [r3, #8]
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601b0 	.word	0x080601b0

080a169c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_Get_Pin_Mode+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	68db      	ldr	r3, [r3, #12]
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601b0 	.word	0x080601b0

080a16ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <HAL_GPIO_Write+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	691b      	ldr	r3, [r3, #16]
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601b0 	.word	0x080601b0

080a16bc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <HAL_ADC_Read+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601b0 	.word	0x080601b0

080a16cc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <HAL_I2C_Begin+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601ac 	.word	0x080601ac

080a16dc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_I2C_Request_Data+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601ac 	.word	0x080601ac

080a16ec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_I2C_Begin_Transmission+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601ac 	.word	0x080601ac

080a16fc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_I2C_End_Transmission+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601ac 	.word	0x080601ac

080a170c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_I2C_Write_Data+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601ac 	.word	0x080601ac

080a171c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_I2C_Available_Data+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601ac 	.word	0x080601ac

080a172c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <HAL_I2C_Read_Data+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601ac 	.word	0x080601ac

080a173c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <HAL_I2C_Peek_Data+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601ac 	.word	0x080601ac

080a174c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <HAL_I2C_Flush_Data+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601ac 	.word	0x080601ac

080a175c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <HAL_I2C_Is_Enabled+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601ac 	.word	0x080601ac

080a176c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b03      	ldr	r3, [pc, #12]	; (80a177c <HAL_I2C_Init+0x10>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1776:	9301      	str	r3, [sp, #4]
 80a1778:	bd08      	pop	{r3, pc}
 80a177a:	0000      	.short	0x0000
 80a177c:	080601ac 	.word	0x080601ac

080a1780 <socket_handle_valid>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <socket_handle_valid+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	685b      	ldr	r3, [r3, #4]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601bc 	.word	0x080601bc

080a1790 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <socket_create+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	689b      	ldr	r3, [r3, #8]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601bc 	.word	0x080601bc

080a17a0 <socket_receivefrom>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <socket_receivefrom+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	695b      	ldr	r3, [r3, #20]
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601bc 	.word	0x080601bc

080a17b0 <socket_sendto>:
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <socket_sendto+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	69db      	ldr	r3, [r3, #28]
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601bc 	.word	0x080601bc

080a17c0 <socket_close>:
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <socket_close+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6a1b      	ldr	r3, [r3, #32]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601bc 	.word	0x080601bc

080a17d0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <socket_handle_invalid+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601bc 	.word	0x080601bc

080a17e0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_SPI_Init+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	69db      	ldr	r3, [r3, #28]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601b4 	.word	0x080601b4

080a17f0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_SPI_Is_Enabled+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	6a1b      	ldr	r3, [r3, #32]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601b4 	.word	0x080601b4

080a1800 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_USART_Init+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	699b      	ldr	r3, [r3, #24]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601c4 	.word	0x080601c4

080a1810 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_USART_Write_Data+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601c4 	.word	0x080601c4

080a1820 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_USART_Available_Data+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601c4 	.word	0x080601c4

080a1830 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_USART_Read_Data+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601c4 	.word	0x080601c4

080a1840 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_USART_Peek_Data+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601c4 	.word	0x080601c4

080a1850 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <HAL_USART_Flush_Data+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601c4 	.word	0x080601c4

080a1860 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <HAL_USART_Is_Enabled+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601c4 	.word	0x080601c4

080a1870 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <HAL_USART_Available_Data_For_Write+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601c4 	.word	0x080601c4

080a1880 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <HAL_USB_USART_Init+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	681b      	ldr	r3, [r3, #0]
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601d8 	.word	0x080601d8

080a1890 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <HAL_USB_USART_Begin+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	685b      	ldr	r3, [r3, #4]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601d8 	.word	0x080601d8

080a18a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <HAL_USB_USART_Available_Data+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	691b      	ldr	r3, [r3, #16]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601d8 	.word	0x080601d8

080a18b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	695b      	ldr	r3, [r3, #20]
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601d8 	.word	0x080601d8

080a18c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <HAL_USB_USART_Receive_Data+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	699b      	ldr	r3, [r3, #24]
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601d8 	.word	0x080601d8

080a18d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <HAL_USB_USART_Send_Data+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	69db      	ldr	r3, [r3, #28]
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601d8 	.word	0x080601d8

080a18e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <HAL_USB_USART_Flush_Data+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	6a1b      	ldr	r3, [r3, #32]
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080601d8 	.word	0x080601d8

080a18f0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <HAL_USB_USART_Is_Enabled+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601d8 	.word	0x080601d8

080a1900 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <inet_gethostbyname+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601c0 	.word	0x080601c0

080a1910 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <set_system_mode+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	685b      	ldr	r3, [r3, #4]
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601a4 	.word	0x080601a4

080a1920 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <system_delay_ms+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	695b      	ldr	r3, [r3, #20]
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601a4 	.word	0x080601a4

080a1930 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <system_thread_set_state+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601a4 	.word	0x080601a4

080a1940 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b03      	ldr	r3, [pc, #12]	; (80a1950 <system_ctrl_set_app_request_handler+0x10>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a194a:	9301      	str	r3, [sp, #4]
 80a194c:	bd08      	pop	{r3, pc}
 80a194e:	0000      	.short	0x0000
 80a1950:	080601a4 	.word	0x080601a4

080a1954 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1954:	b508      	push	{r3, lr}
 80a1956:	4b03      	ldr	r3, [pc, #12]	; (80a1964 <system_ctrl_set_result+0x10>)
 80a1958:	681b      	ldr	r3, [r3, #0]
 80a195a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a195e:	9301      	str	r3, [sp, #4]
 80a1960:	bd08      	pop	{r3, pc}
 80a1962:	0000      	.short	0x0000
 80a1964:	080601a4 	.word	0x080601a4

080a1968 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601cc 	.word	0x080601cc

080a1978 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <network_config+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	681b      	ldr	r3, [r3, #0]
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601c8 	.word	0x080601c8

080a1988 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <network_connect+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	685b      	ldr	r3, [r3, #4]
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601c8 	.word	0x080601c8

080a1998 <network_ready>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <network_ready+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	691b      	ldr	r3, [r3, #16]
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601c8 	.word	0x080601c8

080a19a8 <network_set_hostname>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <network_set_hostname+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601c8 	.word	0x080601c8

080a19b8 <network_get_hostname>:
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <network_get_hostname+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601c8 	.word	0x080601c8

080a19c8 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19c8:	b508      	push	{r3, lr}
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <malloc+0xc>)
 80a19cc:	681b      	ldr	r3, [r3, #0]
 80a19ce:	681b      	ldr	r3, [r3, #0]
 80a19d0:	9301      	str	r3, [sp, #4]
 80a19d2:	bd08      	pop	{r3, pc}
 80a19d4:	080601a0 	.word	0x080601a0

080a19d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19d8:	b508      	push	{r3, lr}
 80a19da:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <free+0xc>)
 80a19dc:	681b      	ldr	r3, [r3, #0]
 80a19de:	685b      	ldr	r3, [r3, #4]
 80a19e0:	9301      	str	r3, [sp, #4]
 80a19e2:	bd08      	pop	{r3, pc}
 80a19e4:	080601a0 	.word	0x080601a0

080a19e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <realloc+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	689b      	ldr	r3, [r3, #8]
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601a0 	.word	0x080601a0

080a19f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a19f8:	2100      	movs	r1, #0
 80a19fa:	f7ff bf91 	b.w	80a1920 <system_delay_ms>

080a19fe <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a19fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1a00:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1a02:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1a04:	b113      	cbz	r3, 80a1a0c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a06:	2203      	movs	r2, #3
 80a1a08:	4601      	mov	r1, r0
 80a1a0a:	4798      	blx	r3
    }
 80a1a0c:	4620      	mov	r0, r4
 80a1a0e:	bd10      	pop	{r4, pc}

080a1a10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1a10:	4770      	bx	lr

080a1a12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a14:	4606      	mov	r6, r0
 80a1a16:	4615      	mov	r5, r2
 80a1a18:	460c      	mov	r4, r1
 80a1a1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a1c:	42bc      	cmp	r4, r7
 80a1a1e:	d006      	beq.n	80a1a2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1a20:	6833      	ldr	r3, [r6, #0]
 80a1a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1a26:	689b      	ldr	r3, [r3, #8]
 80a1a28:	4630      	mov	r0, r6
 80a1a2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a2c:	e7f6      	b.n	80a1a1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1a2e:	4628      	mov	r0, r5
 80a1a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1a32:	2200      	movs	r2, #0
 80a1a34:	7c00      	ldrb	r0, [r0, #16]
 80a1a36:	f7ff be69 	b.w	80a170c <HAL_I2C_Write_Data>

080a1a3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1a3a:	2100      	movs	r1, #0
 80a1a3c:	7c00      	ldrb	r0, [r0, #16]
 80a1a3e:	f7ff be6d 	b.w	80a171c <HAL_I2C_Available_Data>

080a1a42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1a42:	2100      	movs	r1, #0
 80a1a44:	7c00      	ldrb	r0, [r0, #16]
 80a1a46:	f7ff be71 	b.w	80a172c <HAL_I2C_Read_Data>

080a1a4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1a4a:	2100      	movs	r1, #0
 80a1a4c:	7c00      	ldrb	r0, [r0, #16]
 80a1a4e:	f7ff be75 	b.w	80a173c <HAL_I2C_Peek_Data>

080a1a52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1a52:	2100      	movs	r1, #0
 80a1a54:	7c00      	ldrb	r0, [r0, #16]
 80a1a56:	f7ff be79 	b.w	80a174c <HAL_I2C_Flush_Data>

080a1a5a <_ZN7TwoWireD0Ev>:
 80a1a5a:	b510      	push	{r4, lr}
 80a1a5c:	4604      	mov	r4, r0
 80a1a5e:	f7fe fb1e 	bl	80a009e <_ZdlPv>
 80a1a62:	4620      	mov	r0, r4
 80a1a64:	bd10      	pop	{r4, pc}
	...

080a1a68 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a68:	b510      	push	{r4, lr}
 80a1a6a:	4604      	mov	r4, r0
 80a1a6c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a72:	60a3      	str	r3, [r4, #8]
 80a1a74:	4b04      	ldr	r3, [pc, #16]	; (80a1a88 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1a76:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1a78:	7420      	strb	r0, [r4, #16]
 80a1a7a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1a7e:	f7ff fe75 	bl	80a176c <HAL_I2C_Init>

}
 80a1a82:	4620      	mov	r0, r4
 80a1a84:	bd10      	pop	{r4, pc}
 80a1a86:	bf00      	nop
 80a1a88:	080a3c9c 	.word	0x080a3c9c

080a1a8c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1a8c:	2300      	movs	r3, #0
 80a1a8e:	461a      	mov	r2, r3
 80a1a90:	4619      	mov	r1, r3
 80a1a92:	7c00      	ldrb	r0, [r0, #16]
 80a1a94:	f7ff be1a 	b.w	80a16cc <HAL_I2C_Begin>

080a1a98 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a1a98:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a1a9a:	2400      	movs	r4, #0
 80a1a9c:	7c00      	ldrb	r0, [r0, #16]
 80a1a9e:	9400      	str	r4, [sp, #0]
 80a1aa0:	f7ff fe1c 	bl	80a16dc <HAL_I2C_Request_Data>
  return result;
}
 80a1aa4:	b2c0      	uxtb	r0, r0
 80a1aa6:	b002      	add	sp, #8
 80a1aa8:	bd10      	pop	{r4, pc}

080a1aaa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a1aaa:	2301      	movs	r3, #1
 80a1aac:	f7ff bff4 	b.w	80a1a98 <_ZN7TwoWire11requestFromEhhh>

080a1ab0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1ab0:	2200      	movs	r2, #0
 80a1ab2:	7c00      	ldrb	r0, [r0, #16]
 80a1ab4:	f7ff be1a 	b.w	80a16ec <HAL_I2C_Begin_Transmission>

080a1ab8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1ab8:	b2c9      	uxtb	r1, r1
 80a1aba:	f7ff bff9 	b.w	80a1ab0 <_ZN7TwoWire17beginTransmissionEh>

080a1abe <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1abe:	2200      	movs	r2, #0
 80a1ac0:	7c00      	ldrb	r0, [r0, #16]
 80a1ac2:	f7ff be1b 	b.w	80a16fc <HAL_I2C_End_Transmission>

080a1ac6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1ac6:	2101      	movs	r1, #1
 80a1ac8:	f7ff bff9 	b.w	80a1abe <_ZN7TwoWire15endTransmissionEh>

080a1acc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1acc:	2100      	movs	r1, #0
 80a1ace:	7c00      	ldrb	r0, [r0, #16]
 80a1ad0:	f7ff be44 	b.w	80a175c <HAL_I2C_Is_Enabled>

080a1ad4 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ad6:	460f      	mov	r7, r1
 80a1ad8:	f100 0608 	add.w	r6, r0, #8
 80a1adc:	1d05      	adds	r5, r0, #4
 80a1ade:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1ae0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1ae4:	220a      	movs	r2, #10
 80a1ae6:	4638      	mov	r0, r7
 80a1ae8:	f000 f8d9 	bl	80a1c9e <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1aec:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aee:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1af0:	d007      	beq.n	80a1b02 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1af2:	2c00      	cmp	r4, #0
 80a1af4:	d0f4      	beq.n	80a1ae0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1af6:	212e      	movs	r1, #46	; 0x2e
 80a1af8:	4638      	mov	r0, r7
 80a1afa:	f000 f87d 	bl	80a1bf8 <_ZN5Print5printEc>
 80a1afe:	4404      	add	r4, r0
 80a1b00:	e7ee      	b.n	80a1ae0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1b02:	4620      	mov	r0, r4
 80a1b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1b08 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a1b08:	b510      	push	{r4, lr}
 80a1b0a:	4604      	mov	r4, r0
 80a1b0c:	4b04      	ldr	r3, [pc, #16]	; (80a1b20 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1b0e:	2211      	movs	r2, #17
 80a1b10:	f840 3b04 	str.w	r3, [r0], #4
 80a1b14:	2100      	movs	r1, #0
 80a1b16:	f001 ff10 	bl	80a393a <memset>
{
    clear();
}
 80a1b1a:	4620      	mov	r0, r4
 80a1b1c:	bd10      	pop	{r4, pc}
 80a1b1e:	bf00      	nop
 80a1b20:	080a3cc4 	.word	0x080a3cc4

080a1b24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1b24:	4603      	mov	r3, r0
 80a1b26:	4a07      	ldr	r2, [pc, #28]	; (80a1b44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1b28:	b510      	push	{r4, lr}
 80a1b2a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1b2e:	f101 0210 	add.w	r2, r1, #16
 80a1b32:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1b36:	4291      	cmp	r1, r2
 80a1b38:	f843 4b04 	str.w	r4, [r3], #4
 80a1b3c:	d1f9      	bne.n	80a1b32 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1b3e:	780a      	ldrb	r2, [r1, #0]
 80a1b40:	701a      	strb	r2, [r3, #0]
}
 80a1b42:	bd10      	pop	{r4, pc}
 80a1b44:	080a3cc4 	.word	0x080a3cc4

080a1b48 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1b48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1b52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1b56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1b5a:	2304      	movs	r3, #4
 80a1b5c:	6041      	str	r1, [r0, #4]
 80a1b5e:	7503      	strb	r3, [r0, #20]
 80a1b60:	bd10      	pop	{r4, pc}
	...

080a1b64 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b66:	4d04      	ldr	r5, [pc, #16]	; (80a1b78 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b68:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b6a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b6e:	9500      	str	r5, [sp, #0]
 80a1b70:	f7ff ffea 	bl	80a1b48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b74:	b003      	add	sp, #12
 80a1b76:	bd30      	pop	{r4, r5, pc}
 80a1b78:	080a3cc4 	.word	0x080a3cc4

080a1b7c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1b7e:	780d      	ldrb	r5, [r1, #0]
 80a1b80:	788b      	ldrb	r3, [r1, #2]
 80a1b82:	784a      	ldrb	r2, [r1, #1]
 80a1b84:	78c9      	ldrb	r1, [r1, #3]
 80a1b86:	9100      	str	r1, [sp, #0]
 80a1b88:	4629      	mov	r1, r5
 80a1b8a:	f7ff ffdd 	bl	80a1b48 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1b8e:	b003      	add	sp, #12
 80a1b90:	bd30      	pop	{r4, r5, pc}
	...

080a1b94 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1b94:	4a01      	ldr	r2, [pc, #4]	; (80a1b9c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1b96:	4b02      	ldr	r3, [pc, #8]	; (80a1ba0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1b98:	601a      	str	r2, [r3, #0]
 80a1b9a:	4770      	bx	lr
 80a1b9c:	080a3d8b 	.word	0x080a3d8b
 80a1ba0:	20000550 	.word	0x20000550

080a1ba4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ba6:	4606      	mov	r6, r0
 80a1ba8:	460d      	mov	r5, r1
 80a1baa:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1bac:	2400      	movs	r4, #0
  while (size--) {
 80a1bae:	42bd      	cmp	r5, r7
 80a1bb0:	d00c      	beq.n	80a1bcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1bb2:	6833      	ldr	r3, [r6, #0]
 80a1bb4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1bb8:	689b      	ldr	r3, [r3, #8]
 80a1bba:	4630      	mov	r0, r6
 80a1bbc:	4798      	blx	r3
     if (chunk>=0)
 80a1bbe:	2800      	cmp	r0, #0
 80a1bc0:	db01      	blt.n	80a1bc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1bc2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1bc4:	e7f3      	b.n	80a1bae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1bc6:	2c00      	cmp	r4, #0
 80a1bc8:	bf08      	it	eq
 80a1bca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1bcc:	4620      	mov	r0, r4
 80a1bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1bd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1bd0:	b570      	push	{r4, r5, r6, lr}
 80a1bd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1bd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1bd6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1bd8:	b149      	cbz	r1, 80a1bee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1bda:	f001 fef1 	bl	80a39c0 <strlen>
 80a1bde:	682b      	ldr	r3, [r5, #0]
 80a1be0:	4602      	mov	r2, r0
 80a1be2:	4621      	mov	r1, r4
 80a1be4:	4628      	mov	r0, r5
    }
 80a1be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1bea:	68db      	ldr	r3, [r3, #12]
 80a1bec:	4718      	bx	r3
    }
 80a1bee:	bd70      	pop	{r4, r5, r6, pc}

080a1bf0 <_ZN5Print5printEPKc>:
 80a1bf0:	b508      	push	{r3, lr}
 80a1bf2:	f7ff ffed 	bl	80a1bd0 <_ZN5Print5writeEPKc>
 80a1bf6:	bd08      	pop	{r3, pc}

080a1bf8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1bf8:	6803      	ldr	r3, [r0, #0]
 80a1bfa:	689b      	ldr	r3, [r3, #8]
 80a1bfc:	4718      	bx	r3

080a1bfe <_ZN5Print5printERK9Printable>:
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
 80a1bfe:	460b      	mov	r3, r1
   return x.printTo(*this);
 80a1c00:	680a      	ldr	r2, [r1, #0]
 80a1c02:	4601      	mov	r1, r0
 80a1c04:	6812      	ldr	r2, [r2, #0]
 80a1c06:	4618      	mov	r0, r3
 80a1c08:	4710      	bx	r2

080a1c0a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c0a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1c0c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1c0e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1c10:	f7ff fff2 	bl	80a1bf8 <_ZN5Print5printEc>
  n += print('\n');
 80a1c14:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1c16:	4604      	mov	r4, r0
  n += print('\n');
 80a1c18:	4628      	mov	r0, r5
 80a1c1a:	f7ff ffed 	bl	80a1bf8 <_ZN5Print5printEc>
  return n;
}
 80a1c1e:	4420      	add	r0, r4
 80a1c20:	bd38      	pop	{r3, r4, r5, pc}

080a1c22 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1c22:	b538      	push	{r3, r4, r5, lr}
 80a1c24:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c26:	f7ff ffd3 	bl	80a1bd0 <_ZN5Print5writeEPKc>
 80a1c2a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1c2c:	4628      	mov	r0, r5
 80a1c2e:	f7ff ffec 	bl	80a1c0a <_ZN5Print7printlnEv>
  return n;
}
 80a1c32:	4420      	add	r0, r4
 80a1c34:	bd38      	pop	{r3, r4, r5, pc}

080a1c36 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
 80a1c36:	b538      	push	{r3, r4, r5, lr}
 80a1c38:	4605      	mov	r5, r0
   size_t n = print(x);
 80a1c3a:	f7ff ffe0 	bl	80a1bfe <_ZN5Print5printERK9Printable>
 80a1c3e:	4604      	mov	r4, r0
   n += println();
 80a1c40:	4628      	mov	r0, r5
 80a1c42:	f7ff ffe2 	bl	80a1c0a <_ZN5Print7printlnEv>
   return n;
 }
 80a1c46:	4420      	add	r0, r4
 80a1c48:	bd38      	pop	{r3, r4, r5, pc}

080a1c4a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1c4a:	2a01      	cmp	r2, #1
 80a1c4c:	bf98      	it	ls
 80a1c4e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1c50:	b530      	push	{r4, r5, lr}
 80a1c52:	460b      	mov	r3, r1
 80a1c54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1c56:	2100      	movs	r1, #0
 80a1c58:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1c5c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1c60:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1c64:	fb05 3312 	mls	r3, r5, r2, r3
 80a1c68:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c6a:	2b09      	cmp	r3, #9
 80a1c6c:	bf94      	ite	ls
 80a1c6e:	3330      	addls	r3, #48	; 0x30
 80a1c70:	3337      	addhi	r3, #55	; 0x37
 80a1c72:	b2db      	uxtb	r3, r3
 80a1c74:	4621      	mov	r1, r4
 80a1c76:	f804 3901 	strb.w	r3, [r4], #-1
 80a1c7a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1c7c:	2d00      	cmp	r5, #0
 80a1c7e:	d1ef      	bne.n	80a1c60 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1c80:	f7ff ffa6 	bl	80a1bd0 <_ZN5Print5writeEPKc>
}
 80a1c84:	b00b      	add	sp, #44	; 0x2c
 80a1c86:	bd30      	pop	{r4, r5, pc}

080a1c88 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1c88:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1c8a:	b922      	cbnz	r2, 80a1c96 <_ZN5Print5printEmi+0xe>
 80a1c8c:	6803      	ldr	r3, [r0, #0]
 80a1c8e:	b2c9      	uxtb	r1, r1
 80a1c90:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1c92:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1c94:	4718      	bx	r3
  else return printNumber(n, base);
 80a1c96:	b2d2      	uxtb	r2, r2
}
 80a1c98:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1c9a:	f7ff bfd6 	b.w	80a1c4a <_ZN5Print11printNumberEmh>

080a1c9e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1c9e:	f7ff bff3 	b.w	80a1c88 <_ZN5Print5printEmi>

080a1ca2 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a1ca2:	b538      	push	{r3, r4, r5, lr}
 80a1ca4:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a1ca6:	f7ff ffef 	bl	80a1c88 <_ZN5Print5printEmi>
 80a1caa:	4604      	mov	r4, r0
  n += println();
 80a1cac:	4628      	mov	r0, r5
 80a1cae:	f7ff ffac 	bl	80a1c0a <_ZN5Print7printlnEv>
  return n;
}
 80a1cb2:	4420      	add	r0, r4
 80a1cb4:	bd38      	pop	{r3, r4, r5, pc}

080a1cb6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1cb6:	b510      	push	{r4, lr}
 80a1cb8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1cba:	f7ff fea0 	bl	80a19fe <_ZNSt14_Function_baseD1Ev>
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	bd10      	pop	{r4, pc}
	...

080a1cc4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1cc4:	4803      	ldr	r0, [pc, #12]	; (80a1cd4 <_GLOBAL__sub_I_RGB+0x10>)
 80a1cc6:	2300      	movs	r3, #0
 80a1cc8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1cca:	4a03      	ldr	r2, [pc, #12]	; (80a1cd8 <_GLOBAL__sub_I_RGB+0x14>)
 80a1ccc:	4903      	ldr	r1, [pc, #12]	; (80a1cdc <_GLOBAL__sub_I_RGB+0x18>)
 80a1cce:	f000 bd91 	b.w	80a27f4 <__aeabi_atexit>
 80a1cd2:	bf00      	nop
 80a1cd4:	20000554 	.word	0x20000554
 80a1cd8:	20000390 	.word	0x20000390
 80a1cdc:	080a1cb7 	.word	0x080a1cb7

080a1ce0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1ce0:	4770      	bx	lr

080a1ce2 <_ZN8SPIClassD0Ev>:
 80a1ce2:	b510      	push	{r4, lr}
 80a1ce4:	4604      	mov	r4, r0
 80a1ce6:	f7fe f9da 	bl	80a009e <_ZdlPv>
 80a1cea:	4620      	mov	r0, r4
 80a1cec:	bd10      	pop	{r4, pc}
	...

080a1cf0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1cf0:	b570      	push	{r4, r5, r6, lr}
 80a1cf2:	4604      	mov	r4, r0
 80a1cf4:	460e      	mov	r6, r1
 80a1cf6:	4b07      	ldr	r3, [pc, #28]	; (80a1d14 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1cf8:	2500      	movs	r5, #0
 80a1cfa:	6003      	str	r3, [r0, #0]
 80a1cfc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1d00:	f7ff fc94 	bl	80a162c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1d04:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1d06:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1d08:	f7ff fd6a 	bl	80a17e0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1d0c:	60a5      	str	r5, [r4, #8]
}
 80a1d0e:	4620      	mov	r0, r4
 80a1d10:	bd70      	pop	{r4, r5, r6, pc}
 80a1d12:	bf00      	nop
 80a1d14:	080a3dbc 	.word	0x080a3dbc

080a1d18 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1d18:	7900      	ldrb	r0, [r0, #4]
 80a1d1a:	f7ff bd69 	b.w	80a17f0 <HAL_SPI_Is_Enabled>

080a1d1e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1d1e:	b510      	push	{r4, lr}
 80a1d20:	4604      	mov	r4, r0
{
	free(buffer);
 80a1d22:	6800      	ldr	r0, [r0, #0]
 80a1d24:	f7ff fe58 	bl	80a19d8 <free>
}
 80a1d28:	4620      	mov	r0, r4
 80a1d2a:	bd10      	pop	{r4, pc}

080a1d2c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1d2c:	b510      	push	{r4, lr}
 80a1d2e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1d30:	6800      	ldr	r0, [r0, #0]
 80a1d32:	b108      	cbz	r0, 80a1d38 <_ZN6String10invalidateEv+0xc>
 80a1d34:	f7ff fe50 	bl	80a19d8 <free>
	buffer = NULL;
 80a1d38:	2300      	movs	r3, #0
 80a1d3a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1d3c:	60a3      	str	r3, [r4, #8]
 80a1d3e:	6063      	str	r3, [r4, #4]
 80a1d40:	bd10      	pop	{r4, pc}

080a1d42 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1d42:	b538      	push	{r3, r4, r5, lr}
 80a1d44:	4604      	mov	r4, r0
 80a1d46:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1d48:	6800      	ldr	r0, [r0, #0]
 80a1d4a:	3101      	adds	r1, #1
 80a1d4c:	f7ff fe4c 	bl	80a19e8 <realloc>
	if (newbuffer) {
 80a1d50:	b110      	cbz	r0, 80a1d58 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1d52:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1d56:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1d58:	bd38      	pop	{r3, r4, r5, pc}

080a1d5a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1d5a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1d5c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1d5e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1d60:	b113      	cbz	r3, 80a1d68 <_ZN6String7reserveEj+0xe>
 80a1d62:	6843      	ldr	r3, [r0, #4]
 80a1d64:	428b      	cmp	r3, r1
 80a1d66:	d207      	bcs.n	80a1d78 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1d68:	4620      	mov	r0, r4
 80a1d6a:	f7ff ffea 	bl	80a1d42 <_ZN6String12changeBufferEj>
 80a1d6e:	b120      	cbz	r0, 80a1d7a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1d70:	68a3      	ldr	r3, [r4, #8]
 80a1d72:	b90b      	cbnz	r3, 80a1d78 <_ZN6String7reserveEj+0x1e>
 80a1d74:	6822      	ldr	r2, [r4, #0]
 80a1d76:	7013      	strb	r3, [r2, #0]
 80a1d78:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1d7a:	bd10      	pop	{r4, pc}

080a1d7c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d7c:	b570      	push	{r4, r5, r6, lr}
 80a1d7e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1d80:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d82:	4604      	mov	r4, r0
 80a1d84:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1d86:	f7ff ffe8 	bl	80a1d5a <_ZN6String7reserveEj>
 80a1d8a:	b918      	cbnz	r0, 80a1d94 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1d8c:	4620      	mov	r0, r4
 80a1d8e:	f7ff ffcd 	bl	80a1d2c <_ZN6String10invalidateEv>
		return *this;
 80a1d92:	e009      	b.n	80a1da8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1d94:	462a      	mov	r2, r5
 80a1d96:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1d98:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1d9a:	6820      	ldr	r0, [r4, #0]
 80a1d9c:	f001 fdc2 	bl	80a3924 <memcpy>
	buffer[len] = 0;
 80a1da0:	6822      	ldr	r2, [r4, #0]
 80a1da2:	68a3      	ldr	r3, [r4, #8]
 80a1da4:	2100      	movs	r1, #0
 80a1da6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1da8:	4620      	mov	r0, r4
 80a1daa:	bd70      	pop	{r4, r5, r6, pc}

080a1dac <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1dac:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1dae:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1db0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1db2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1db4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1db6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1db8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1dba:	460d      	mov	r5, r1
 80a1dbc:	b139      	cbz	r1, 80a1dce <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1dbe:	4608      	mov	r0, r1
 80a1dc0:	f001 fdfe 	bl	80a39c0 <strlen>
 80a1dc4:	4629      	mov	r1, r5
 80a1dc6:	4602      	mov	r2, r0
 80a1dc8:	4620      	mov	r0, r4
 80a1dca:	f7ff ffd7 	bl	80a1d7c <_ZN6String4copyEPKcj>
}
 80a1dce:	4620      	mov	r0, r4
 80a1dd0:	bd38      	pop	{r3, r4, r5, pc}

080a1dd2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1dd2:	b538      	push	{r3, r4, r5, lr}
 80a1dd4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1dd6:	460c      	mov	r4, r1
 80a1dd8:	b141      	cbz	r1, 80a1dec <_ZN6StringaSEPKc+0x1a>
 80a1dda:	4608      	mov	r0, r1
 80a1ddc:	f001 fdf0 	bl	80a39c0 <strlen>
 80a1de0:	4621      	mov	r1, r4
 80a1de2:	4602      	mov	r2, r0
 80a1de4:	4628      	mov	r0, r5
 80a1de6:	f7ff ffc9 	bl	80a1d7c <_ZN6String4copyEPKcj>
 80a1dea:	e001      	b.n	80a1df0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1dec:	f7ff ff9e 	bl	80a1d2c <_ZN6String10invalidateEv>

	return *this;
}
 80a1df0:	4628      	mov	r0, r5
 80a1df2:	bd38      	pop	{r3, r4, r5, pc}

080a1df4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1df4:	b570      	push	{r4, r5, r6, lr}
 80a1df6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1df8:	460e      	mov	r6, r1
 80a1dfa:	b909      	cbnz	r1, 80a1e00 <_ZN6String6concatEPKcj+0xc>
 80a1dfc:	2000      	movs	r0, #0
 80a1dfe:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1e00:	b16a      	cbz	r2, 80a1e1e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1e02:	6883      	ldr	r3, [r0, #8]
 80a1e04:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a1e06:	4629      	mov	r1, r5
 80a1e08:	f7ff ffa7 	bl	80a1d5a <_ZN6String7reserveEj>
 80a1e0c:	2800      	cmp	r0, #0
 80a1e0e:	d0f5      	beq.n	80a1dfc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1e10:	6820      	ldr	r0, [r4, #0]
 80a1e12:	68a3      	ldr	r3, [r4, #8]
 80a1e14:	4631      	mov	r1, r6
 80a1e16:	4418      	add	r0, r3
 80a1e18:	f001 fdca 	bl	80a39b0 <strcpy>
	len = newlen;
 80a1e1c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1e1e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1e20:	bd70      	pop	{r4, r5, r6, pc}

080a1e22 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a1e22:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a1e24:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a1e26:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a1e2a:	2201      	movs	r2, #1
 80a1e2c:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a1e2e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a1e32:	f7ff ffdf 	bl	80a1df4 <_ZN6String6concatEPKcj>
}
 80a1e36:	b003      	add	sp, #12
 80a1e38:	f85d fb04 	ldr.w	pc, [sp], #4

080a1e3c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1e3c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1e3e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1e40:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1e42:	b912      	cbnz	r2, 80a1e4a <_ZNK6String6equalsEPKc+0xe>
 80a1e44:	b919      	cbnz	r1, 80a1e4e <_ZNK6String6equalsEPKc+0x12>
 80a1e46:	2001      	movs	r0, #1
 80a1e48:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1e4a:	b911      	cbnz	r1, 80a1e52 <_ZNK6String6equalsEPKc+0x16>
 80a1e4c:	6803      	ldr	r3, [r0, #0]
 80a1e4e:	7818      	ldrb	r0, [r3, #0]
 80a1e50:	e002      	b.n	80a1e58 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1e52:	6800      	ldr	r0, [r0, #0]
 80a1e54:	f001 fda2 	bl	80a399c <strcmp>
 80a1e58:	fab0 f080 	clz	r0, r0
 80a1e5c:	0940      	lsrs	r0, r0, #5
}
 80a1e5e:	bd08      	pop	{r3, pc}

080a1e60 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1e60:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a1e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1e66:	4c0d      	ldr	r4, [pc, #52]	; (80a1e9c <_GLOBAL__sub_I_System+0x3c>)
 80a1e68:	2500      	movs	r5, #0
 80a1e6a:	8063      	strh	r3, [r4, #2]
 80a1e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1e70:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1e72:	80a3      	strh	r3, [r4, #4]
 80a1e74:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1e76:	f7ff fd4b 	bl	80a1910 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a1e7a:	a802      	add	r0, sp, #8
 80a1e7c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1e80:	462a      	mov	r2, r5
 80a1e82:	4629      	mov	r1, r5
 80a1e84:	f7ff fbda 	bl	80a163c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1e88:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1e8a:	2b1e      	cmp	r3, #30
 80a1e8c:	d104      	bne.n	80a1e98 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1e8e:	2303      	movs	r3, #3
 80a1e90:	7023      	strb	r3, [r4, #0]
 80a1e92:	2311      	movs	r3, #17
 80a1e94:	8065      	strh	r5, [r4, #2]
 80a1e96:	80a3      	strh	r3, [r4, #4]
 80a1e98:	b003      	add	sp, #12
 80a1e9a:	bd30      	pop	{r4, r5, pc}
 80a1e9c:	20000564 	.word	0x20000564

080a1ea0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1ea0:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1ea2:	681a      	ldr	r2, [r3, #0]
 80a1ea4:	4b02      	ldr	r3, [pc, #8]	; (80a1eb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1ea6:	601a      	str	r2, [r3, #0]
 80a1ea8:	4770      	bx	lr
 80a1eaa:	bf00      	nop
 80a1eac:	20000328 	.word	0x20000328
 80a1eb0:	2000056c 	.word	0x2000056c

080a1eb4 <_ZN3UDP13receivePacketEPcj>:
         * @param buffer        The buffer to read data to
         * @param buf_size      The buffer size
         * @return The number of bytes written to the buffer, or a negative value on error.
         */
        virtual int receivePacket(uint8_t* buffer, size_t buf_size);
        virtual int receivePacket(char* buffer, size_t buf_size) { return receivePacket((uint8_t*)buffer, buf_size); }
 80a1eb4:	6803      	ldr	r3, [r0, #0]
 80a1eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1eb8:	4718      	bx	r3

080a1eba <_ZN3UDP4readEPcj>:
         * @return
         */
	virtual int read();
	virtual int read(unsigned char* buffer, size_t len);

	virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
 80a1eba:	6803      	ldr	r3, [r0, #0]
 80a1ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ebe:	4718      	bx	r3

080a1ec0 <_ZN3UDP10remotePortEv>:
     */
    void flush_buffer();


	virtual IPAddress remoteIP() { return _remoteIP; };
	virtual uint16_t remotePort() { return _remotePort; };
 80a1ec0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80a1ec2:	4770      	bx	lr

080a1ec4 <_ZN3UDP9availableEv>:
    return bound;
}

int UDP::available()
{
    return _total - _offset;
 80a1ec4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80a1ec6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
 80a1ec8:	1a10      	subs	r0, r2, r0
 80a1eca:	4770      	bx	lr

080a1ecc <_ZN3UDP5writeEh>:
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1ecc:	b513      	push	{r0, r1, r4, lr}
 80a1ece:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
 80a1ed0:	6802      	ldr	r2, [r0, #0]
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}

size_t UDP::write(uint8_t byte)
{
 80a1ed2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
 80a1ed6:	68d4      	ldr	r4, [r2, #12]
 80a1ed8:	4619      	mov	r1, r3
 80a1eda:	2201      	movs	r2, #1
 80a1edc:	47a0      	blx	r4
}
 80a1ede:	b002      	add	sp, #8
 80a1ee0:	bd10      	pop	{r4, pc}

080a1ee2 <_ZN3UDP4readEv>:
    }
    return ret;
}

int UDP::read()
{
 80a1ee2:	b510      	push	{r4, lr}
  return available() ? _buffer[_offset++] : -1;
 80a1ee4:	6803      	ldr	r3, [r0, #0]
    }
    return ret;
}

int UDP::read()
{
 80a1ee6:	4604      	mov	r4, r0
  return available() ? _buffer[_offset++] : -1;
 80a1ee8:	691b      	ldr	r3, [r3, #16]
 80a1eea:	4798      	blx	r3
 80a1eec:	b128      	cbz	r0, 80a1efa <_ZN3UDP4readEv+0x18>
 80a1eee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1ef0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1ef2:	1c59      	adds	r1, r3, #1
 80a1ef4:	86e1      	strh	r1, [r4, #54]	; 0x36
 80a1ef6:	5cd0      	ldrb	r0, [r2, r3]
 80a1ef8:	bd10      	pop	{r4, pc}
 80a1efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1efe:	bd10      	pop	{r4, pc}

080a1f00 <_ZN3UDP4peekEv>:
    }
    return read;
}

int UDP::peek()
{
 80a1f00:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
 80a1f02:	6803      	ldr	r3, [r0, #0]
    }
    return read;
}

int UDP::peek()
{
 80a1f04:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
 80a1f06:	691b      	ldr	r3, [r3, #16]
 80a1f08:	4798      	blx	r3
 80a1f0a:	b118      	cbz	r0, 80a1f14 <_ZN3UDP4peekEv+0x14>
 80a1f0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a1f0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a1f10:	5cd0      	ldrb	r0, [r2, r3]
 80a1f12:	bd10      	pop	{r4, pc}
 80a1f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1f18:	bd10      	pop	{r4, pc}

080a1f1a <_ZN3UDP5flushEv>:

void UDP::flush()
{
 80a1f1a:	4770      	bx	lr

080a1f1c <_ZNK3UDP7printToER5Print>:
  _offset = 0;
  _total = 0;
}

size_t UDP::printTo(Print& p) const
{
 80a1f1c:	4603      	mov	r3, r0
 80a1f1e:	4608      	mov	r0, r1
 80a1f20:	b410      	push	{r4}
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
 80a1f22:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer+_offset, size);
 80a1f24:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1f26:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80a1f28:	6803      	ldr	r3, [r0, #0]
 80a1f2a:	1a52      	subs	r2, r2, r1
 80a1f2c:	68db      	ldr	r3, [r3, #12]
 80a1f2e:	4421      	add	r1, r4
}
 80a1f30:	bc10      	pop	{r4}

size_t UDP::printTo(Print& p) const
{
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer+_offset, size);
 80a1f32:	4718      	bx	r3

080a1f34 <_ZThn16_NK3UDP7printToER5Print>:
        /**
         * Prints the current read parsed packet to the given output.
         * @param p
         * @return
         */
        virtual size_t printTo(Print& p) const;
 80a1f34:	f1a0 0010 	sub.w	r0, r0, #16
 80a1f38:	f7ff bff0 	b.w	80a1f1c <_ZNK3UDP7printToER5Print>

080a1f3c <_ZN3UDP5beginEtm>:
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a1f3e:	4b11      	ldr	r3, [pc, #68]	; (80a1f84 <_ZN3UDP5beginEtm+0x48>)
 80a1f40:	4605      	mov	r5, r0
 80a1f42:	6818      	ldr	r0, [r3, #0]
 80a1f44:	460f      	mov	r7, r1
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1f46:	6803      	ldr	r3, [r0, #0]
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif)
{
 80a1f48:	4616      	mov	r6, r2
    bool bound = 0;
    if(Network.from(nif).ready())
 80a1f4a:	681b      	ldr	r3, [r3, #0]
 80a1f4c:	4798      	blx	r3
 80a1f4e:	b1b8      	cbz	r0, 80a1f80 <_ZN3UDP5beginEtm+0x44>
    {
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
 80a1f50:	2102      	movs	r1, #2
 80a1f52:	463b      	mov	r3, r7
 80a1f54:	2211      	movs	r2, #17
 80a1f56:	4608      	mov	r0, r1
 80a1f58:	9600      	str	r6, [sp, #0]
 80a1f5a:	f7ff fc19 	bl	80a1790 <socket_create>
 80a1f5e:	6168      	str	r0, [r5, #20]
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
 80a1f60:	f7ff fc0e 	bl	80a1780 <socket_handle_valid>
 80a1f64:	4604      	mov	r4, r0
 80a1f66:	b130      	cbz	r0, 80a1f76 <_ZN3UDP5beginEtm+0x3a>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1f68:	2300      	movs	r3, #0
 80a1f6a:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a1f6c:	872b      	strh	r3, [r5, #56]	; 0x38
       _sock = socket_create(AF_INET, SOCK_DGRAM, IPPROTO_UDP, port, nif);
        DEBUG("socket=%d",_sock);
        if (socket_handle_valid(_sock))
        {
            flush_buffer(); // clear buffer
            _port = port;
 80a1f6e:	832f      	strh	r7, [r5, #24]
            _nif = nif;
 80a1f70:	646e      	str	r6, [r5, #68]	; 0x44
            bound = true;
 80a1f72:	2001      	movs	r0, #1
 80a1f74:	e004      	b.n	80a1f80 <_ZN3UDP5beginEtm+0x44>
        }
        else {
            stop();
 80a1f76:	682b      	ldr	r3, [r5, #0]
 80a1f78:	4628      	mov	r0, r5
 80a1f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1f7c:	4798      	blx	r3
            bound = false;
 80a1f7e:	4620      	mov	r0, r4
        }
    }
    return bound;
}
 80a1f80:	b003      	add	sp, #12
 80a1f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f84:	080a3ecc 	.word	0x080a3ecc

080a1f88 <_ZN3UDP4stopEv>:
{
    return _total - _offset;
}

void UDP::stop()
{
 80a1f88:	b538      	push	{r3, r4, r5, lr}
 80a1f8a:	4604      	mov	r4, r0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1f8c:	6945      	ldr	r5, [r0, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a1f8e:	f7ff fc1f 	bl	80a17d0 <socket_handle_invalid>
}

void UDP::stop()
{
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
 80a1f92:	4285      	cmp	r5, r0
 80a1f94:	d002      	beq.n	80a1f9c <_ZN3UDP4stopEv+0x14>
    {
        socket_close(_sock);
 80a1f96:	6960      	ldr	r0, [r4, #20]
 80a1f98:	f7ff fc12 	bl	80a17c0 <socket_close>
    }
    _sock = socket_handle_invalid();
 80a1f9c:	f7ff fc18 	bl	80a17d0 <socket_handle_invalid>
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1fa0:	2300      	movs	r3, #0
    DEBUG("_sock %d closesocket", _sock);
    if (isOpen(_sock))
    {
        socket_close(_sock);
    }
    _sock = socket_handle_invalid();
 80a1fa2:	6160      	str	r0, [r4, #20]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a1fa4:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a1fa6:	8723      	strh	r3, [r4, #56]	; 0x38
 80a1fa8:	bd38      	pop	{r3, r4, r5, pc}

080a1faa <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
 80a1faa:	b530      	push	{r4, r5, lr}
 80a1fac:	b087      	sub	sp, #28
 80a1fae:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;
 80a1fb2:	2502      	movs	r5, #2
 80a1fb4:	f8ad 5008 	strh.w	r5, [sp, #8]

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);
 80a1fb8:	f88d 400b 	strb.w	r4, [sp, #11]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1fbc:	0a25      	lsrs	r5, r4, #8
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1fbe:	79dc      	ldrb	r4, [r3, #7]
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port)
{
    sockaddr_t remoteSockAddr;
    remoteSockAddr.sa_family = AF_INET;

    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1fc0:	f88d 500a 	strb.w	r5, [sp, #10]
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
 80a1fc4:	f88d 400c 	strb.w	r4, [sp, #12]
    remoteSockAddr.sa_data[3] = remoteIP[1];
 80a1fc8:	799c      	ldrb	r4, [r3, #6]
 80a1fca:	f88d 400d 	strb.w	r4, [sp, #13]
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1fce:	795c      	ldrb	r4, [r3, #5]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1fd0:	791b      	ldrb	r3, [r3, #4]
    remoteSockAddr.sa_data[0] = (port & 0xFF00) >> 8;
    remoteSockAddr.sa_data[1] = (port & 0x00FF);

    remoteSockAddr.sa_data[2] = remoteIP[0];
    remoteSockAddr.sa_data[3] = remoteIP[1];
    remoteSockAddr.sa_data[4] = remoteIP[2];
 80a1fd2:	f88d 400e 	strb.w	r4, [sp, #14]
    remoteSockAddr.sa_data[5] = remoteIP[3];
 80a1fd6:	f88d 300f 	strb.w	r3, [sp, #15]

    int rv = socket_sendto(_sock, buffer, buffer_size, 0, &remoteSockAddr, sizeof(remoteSockAddr));
 80a1fda:	2310      	movs	r3, #16
 80a1fdc:	9301      	str	r3, [sp, #4]
 80a1fde:	ab02      	add	r3, sp, #8
 80a1fe0:	9300      	str	r3, [sp, #0]
 80a1fe2:	6940      	ldr	r0, [r0, #20]
 80a1fe4:	2300      	movs	r3, #0
 80a1fe6:	f7ff fbe3 	bl	80a17b0 <socket_sendto>
    DEBUG("sendto(buffer=%lx, size=%d)=%d",buffer, buffer_size , rv);
    return rv;
}
 80a1fea:	b007      	add	sp, #28
 80a1fec:	bd30      	pop	{r4, r5, pc}

080a1fee <_ZN3UDP5writeEPKhj>:
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1fee:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1ff0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size)
{
 80a1ff2:	4605      	mov	r5, r0
 80a1ff4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
 80a1ff6:	b113      	cbz	r3, 80a1ffe <_ZN3UDP5writeEPKhj+0x10>
 80a1ff8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80a1ffa:	1a24      	subs	r4, r4, r0
 80a1ffc:	e000      	b.n	80a2000 <_ZN3UDP5writeEPKhj+0x12>
 80a1ffe:	461c      	mov	r4, r3
 80a2000:	4294      	cmp	r4, r2
 80a2002:	bf28      	it	cs
 80a2004:	4614      	movcs	r4, r2
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
 80a2006:	4418      	add	r0, r3
 80a2008:	4622      	mov	r2, r4
 80a200a:	f001 fc8b 	bl	80a3924 <memcpy>
    _offset += size;
 80a200e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2010:	4620      	mov	r0, r4
{
    size_t available = _buffer ? _buffer_size - _offset : 0;
    if (size>available)
        size = available;
    memcpy(_buffer+_offset, buffer, size);
    _offset += size;
 80a2012:	4423      	add	r3, r4
 80a2014:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
 80a2016:	bd38      	pop	{r3, r4, r5, pc}

080a2018 <_ZN3UDP4readEPhj>:
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2018:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available())
 80a201a:	6803      	ldr	r3, [r0, #0]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a201c:	4604      	mov	r4, r0
    int read = -1;
    if (available())
 80a201e:	691b      	ldr	r3, [r3, #16]
{
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
 80a2020:	460e      	mov	r6, r1
 80a2022:	4615      	mov	r5, r2
    int read = -1;
    if (available())
 80a2024:	4798      	blx	r3
 80a2026:	b188      	cbz	r0, 80a204c <_ZN3UDP4readEPhj+0x34>
    {
    read = min(int(len), available());
 80a2028:	6823      	ldr	r3, [r4, #0]
 80a202a:	4620      	mov	r0, r4
 80a202c:	691b      	ldr	r3, [r3, #16]
 80a202e:	4798      	blx	r3
 80a2030:	4285      	cmp	r5, r0
 80a2032:	bfa8      	it	ge
 80a2034:	4605      	movge	r5, r0
      memcpy(buffer, &_buffer[_offset], read);
 80a2036:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2038:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a203a:	462a      	mov	r2, r5
 80a203c:	4419      	add	r1, r3
 80a203e:	4630      	mov	r0, r6
 80a2040:	f001 fc70 	bl	80a3924 <memcpy>
      _offset += read;
 80a2044:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80a2046:	442b      	add	r3, r5
 80a2048:	86e3      	strh	r3, [r4, #54]	; 0x36
 80a204a:	e001      	b.n	80a2050 <_ZN3UDP4readEPhj+0x38>
  return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len)
{
    int read = -1;
 80a204c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    read = min(int(len), available());
      memcpy(buffer, &_buffer[_offset], read);
      _offset += read;
    }
    return read;
}
 80a2050:	4628      	mov	r0, r5
 80a2052:	bd70      	pop	{r4, r5, r6, pc}

080a2054 <_ZN3UDP13receivePacketEPhj>:
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size)
{
 80a2054:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2056:	4b19      	ldr	r3, [pc, #100]	; (80a20bc <_ZN3UDP13receivePacketEPhj+0x68>)
 80a2058:	4604      	mov	r4, r0
 80a205a:	6818      	ldr	r0, [r3, #0]
 80a205c:	b089      	sub	sp, #36	; 0x24
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a205e:	6803      	ldr	r3, [r0, #0]
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size)
{
 80a2060:	460d      	mov	r5, r1
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2062:	681b      	ldr	r3, [r3, #0]
    };
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size)
{
 80a2064:	4616      	mov	r6, r2
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2066:	4798      	blx	r3
 80a2068:	b310      	cbz	r0, 80a20b0 <_ZN3UDP13receivePacketEPhj+0x5c>
 80a206a:	6967      	ldr	r7, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
 80a206c:	f7ff fbb0 	bl	80a17d0 <socket_handle_invalid>
}

int UDP::receivePacket(uint8_t* buffer, size_t size)
{
    int ret = -1;
    if(Network.from(_nif).ready() && isOpen(_sock) && buffer)
 80a2070:	4287      	cmp	r7, r0
 80a2072:	d01d      	beq.n	80a20b0 <_ZN3UDP13receivePacketEPhj+0x5c>
 80a2074:	b1e5      	cbz	r5, 80a20b0 <_ZN3UDP13receivePacketEPhj+0x5c>
    {
        sockaddr_t remoteSockAddr;
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);
 80a2076:	ab08      	add	r3, sp, #32
 80a2078:	2210      	movs	r2, #16
 80a207a:	f843 2d14 	str.w	r2, [r3, #-20]!

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
 80a207e:	9301      	str	r3, [sp, #4]
 80a2080:	eb0d 0302 	add.w	r3, sp, r2
 80a2084:	9300      	str	r3, [sp, #0]
 80a2086:	4629      	mov	r1, r5
 80a2088:	2300      	movs	r3, #0
 80a208a:	4632      	mov	r2, r6
 80a208c:	6960      	ldr	r0, [r4, #20]
 80a208e:	f7ff fb87 	bl	80a17a0 <socket_receivefrom>
        if (ret >= 0)
 80a2092:	1e05      	subs	r5, r0, #0
 80a2094:	db0e      	blt.n	80a20b4 <_ZN3UDP13receivePacketEPhj+0x60>
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a2096:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80a209a:	f89d 3013 	ldrb.w	r3, [sp, #19]
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a209e:	a905      	add	r1, sp, #20
        socklen_t remoteSockAddrLen = sizeof(remoteSockAddr);

        ret = socket_receivefrom(_sock, buffer, size, 0, &remoteSockAddr, &remoteSockAddrLen);
        if (ret >= 0)
        {
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
 80a20a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a20a4:	86a3      	strh	r3, [r4, #52]	; 0x34
            _remoteIP = &remoteSockAddr.sa_data[2];
 80a20a6:	f104 001c 	add.w	r0, r4, #28
 80a20aa:	f7ff fd67 	bl	80a1b7c <_ZN9IPAddressaSEPKh>
 80a20ae:	e001      	b.n	80a20b4 <_ZN3UDP13receivePacketEPhj+0x60>
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size)
{
    int ret = -1;
 80a20b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            _remotePort = remoteSockAddr.sa_data[0] << 8 | remoteSockAddr.sa_data[1];
            _remoteIP = &remoteSockAddr.sa_data[2];
        }
    }
    return ret;
}
 80a20b4:	4628      	mov	r0, r5
 80a20b6:	b009      	add	sp, #36	; 0x24
 80a20b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a20ba:	bf00      	nop
 80a20bc:	080a3ecc 	.word	0x080a3ecc

080a20c0 <_ZN3UDP11beginPacketEPKct>:

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a20c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a20c4:	4b16      	ldr	r3, [pc, #88]	; (80a2120 <_ZN3UDP11beginPacketEPKct+0x60>)
 80a20c6:	4606      	mov	r6, r0
 80a20c8:	6818      	ldr	r0, [r3, #0]
 80a20ca:	b094      	sub	sp, #80	; 0x50
    if(Network.from(_nif).ready())
 80a20cc:	6803      	ldr	r3, [r0, #0]

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a20ce:	460d      	mov	r5, r1
    if(Network.from(_nif).ready())
 80a20d0:	681b      	ldr	r3, [r3, #0]

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port)
{
 80a20d2:	4617      	mov	r7, r2
    if(Network.from(_nif).ready())
 80a20d4:	4798      	blx	r3
 80a20d6:	b300      	cbz	r0, 80a211a <_ZN3UDP11beginPacketEPKct+0x5a>
    {
        HAL_IPAddress ip_addr;

        if(inet_gethostbyname((char*)host, strlen(host), &ip_addr, _nif, NULL) == 0)
 80a20d8:	4628      	mov	r0, r5
 80a20da:	f001 fc71 	bl	80a39c0 <strlen>
 80a20de:	2400      	movs	r4, #0
 80a20e0:	b281      	uxth	r1, r0
 80a20e2:	9400      	str	r4, [sp, #0]
 80a20e4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a20e6:	aa03      	add	r2, sp, #12
 80a20e8:	4628      	mov	r0, r5
 80a20ea:	f7ff fc09 	bl	80a1900 <inet_gethostbyname>
 80a20ee:	b998      	cbnz	r0, 80a2118 <_ZN3UDP11beginPacketEPKct+0x58>
        {
            IPAddress remote_addr(ip_addr);
 80a20f0:	a903      	add	r1, sp, #12
 80a20f2:	a808      	add	r0, sp, #32
 80a20f4:	f7ff fd16 	bl	80a1b24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
            return beginPacket(remote_addr, port);
 80a20f8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a20fa:	ac0f      	add	r4, sp, #60	; 0x3c
 80a20fc:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 80a2100:	4b08      	ldr	r3, [pc, #32]	; (80a2124 <_ZN3UDP11beginPacketEPKct+0x64>)
 80a2102:	ad09      	add	r5, sp, #36	; 0x24
 80a2104:	930e      	str	r3, [sp, #56]	; 0x38
 80a2106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a210a:	682b      	ldr	r3, [r5, #0]
 80a210c:	463a      	mov	r2, r7
 80a210e:	7023      	strb	r3, [r4, #0]
 80a2110:	a90e      	add	r1, sp, #56	; 0x38
 80a2112:	4630      	mov	r0, r6
 80a2114:	47c0      	blx	r8
 80a2116:	e000      	b.n	80a211a <_ZN3UDP11beginPacketEPKct+0x5a>
        }
    }
    return 0;
 80a2118:	4620      	mov	r0, r4
}
 80a211a:	b014      	add	sp, #80	; 0x50
 80a211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2120:	080a3ecc 	.word	0x080a3ecc
 80a2124:	080a3cc4 	.word	0x080a3cc4

080a2128 <_ZN3UDP8remoteIPEv>:
     * Discards the currently read packet.
     */
    void flush_buffer();


	virtual IPAddress remoteIP() { return _remoteIP; };
 80a2128:	b570      	push	{r4, r5, r6, lr}
 80a212a:	4604      	mov	r4, r0
 80a212c:	4606      	mov	r6, r0
 80a212e:	4b05      	ldr	r3, [pc, #20]	; (80a2144 <_ZN3UDP8remoteIPEv+0x1c>)
 80a2130:	f101 0520 	add.w	r5, r1, #32
 80a2134:	f844 3b04 	str.w	r3, [r4], #4
 80a2138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a213c:	682b      	ldr	r3, [r5, #0]
 80a213e:	4630      	mov	r0, r6
 80a2140:	7023      	strb	r3, [r4, #0]
 80a2142:	bd70      	pop	{r4, r5, r6, pc}
 80a2144:	080a3cc4 	.word	0x080a3cc4

080a2148 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
         * @param ip
         * @param port
         * @return
         */
        virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
        virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2148:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a214a:	4694      	mov	ip, r2
 80a214c:	468e      	mov	lr, r1
 80a214e:	4606      	mov	r6, r0
            return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2150:	6802      	ldr	r2, [r0, #0]
         * @param ip
         * @param port
         * @return
         */
        virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
        virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
 80a2152:	b089      	sub	sp, #36	; 0x24
            return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
 80a2154:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80a2156:	4a09      	ldr	r2, [pc, #36]	; (80a217c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
 80a2158:	ac03      	add	r4, sp, #12
 80a215a:	1d1d      	adds	r5, r3, #4
 80a215c:	9202      	str	r2, [sp, #8]
 80a215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2162:	682b      	ldr	r3, [r5, #0]
 80a2164:	4662      	mov	r2, ip
 80a2166:	7023      	strb	r3, [r4, #0]
 80a2168:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80a216c:	4671      	mov	r1, lr
 80a216e:	9300      	str	r3, [sp, #0]
 80a2170:	4630      	mov	r0, r6
 80a2172:	ab02      	add	r3, sp, #8
 80a2174:	47b8      	blx	r7
        }
 80a2176:	b009      	add	sp, #36	; 0x24
 80a2178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a217a:	bf00      	nop
 80a217c:	080a3cc4 	.word	0x080a3cc4

080a2180 <_ZN3UDP9endPacketEv>:
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2180:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2182:	4604      	mov	r4, r0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2184:	6803      	ldr	r3, [r0, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket()
{
 80a2186:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
 80a2188:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80a218a:	4b0d      	ldr	r3, [pc, #52]	; (80a21c0 <_ZN3UDP9endPacketEv+0x40>)
 80a218c:	ad03      	add	r5, sp, #12
 80a218e:	f100 0620 	add.w	r6, r0, #32
 80a2192:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
 80a2196:	9302      	str	r3, [sp, #8]
 80a2198:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80a219a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a219c:	6833      	ldr	r3, [r6, #0]
 80a219e:	4672      	mov	r2, lr
 80a21a0:	702b      	strb	r3, [r5, #0]
 80a21a2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80a21a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a21a6:	9300      	str	r3, [sp, #0]
 80a21a8:	4620      	mov	r0, r4
 80a21aa:	ab02      	add	r3, sp, #8
 80a21ac:	47b8      	blx	r7
 80a21ae:	4605      	mov	r5, r0
    flush(); // wait for send to complete
 80a21b0:	6823      	ldr	r3, [r4, #0]
 80a21b2:	4620      	mov	r0, r4
 80a21b4:	69db      	ldr	r3, [r3, #28]
 80a21b6:	4798      	blx	r3
    return result;
}
 80a21b8:	4628      	mov	r0, r5
 80a21ba:	b009      	add	sp, #36	; 0x24
 80a21bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a21be:	bf00      	nop
 80a21c0:	080a3cc4 	.word	0x080a3cc4

080a21c4 <_ZN3UDPC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return sd != socket_handle_invalid();
}

UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
 80a21c4:	b538      	push	{r3, r4, r5, lr}
 80a21c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a21ca:	6083      	str	r3, [r0, #8]
 80a21cc:	4b0b      	ldr	r3, [pc, #44]	; (80a21fc <_ZN3UDPC1Ev+0x38>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a21ce:	2500      	movs	r5, #0
 80a21d0:	f103 0208 	add.w	r2, r3, #8
 80a21d4:	336c      	adds	r3, #108	; 0x6c
 80a21d6:	6002      	str	r2, [r0, #0]
 80a21d8:	6103      	str	r3, [r0, #16]
 80a21da:	6045      	str	r5, [r0, #4]
 80a21dc:	4604      	mov	r4, r0
 80a21de:	f7ff faf7 	bl	80a17d0 <socket_handle_invalid>
 80a21e2:	6160      	str	r0, [r4, #20]
 80a21e4:	f104 001c 	add.w	r0, r4, #28
 80a21e8:	f7ff fc8e 	bl	80a1b08 <_ZN9IPAddressC1Ev>
 80a21ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a21f0:	86e5      	strh	r5, [r4, #54]	; 0x36
 80a21f2:	8725      	strh	r5, [r4, #56]	; 0x38
 80a21f4:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a21f6:	6423      	str	r3, [r4, #64]	; 0x40
{
}
 80a21f8:	4620      	mov	r0, r4
 80a21fa:	bd38      	pop	{r3, r4, r5, pc}
 80a21fc:	080a3df0 	.word	0x080a3df0

080a2200 <_ZN3UDP13releaseBufferEv>:
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a2200:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
 80a2202:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    }
    return _buffer_size;
}

void UDP::releaseBuffer()
{
 80a2206:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
 80a2208:	b11b      	cbz	r3, 80a2212 <_ZN3UDP13releaseBufferEv+0x12>
 80a220a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a220c:	b108      	cbz	r0, 80a2212 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
 80a220e:	f7fd ff46 	bl	80a009e <_ZdlPv>
    }
    _buffer = NULL;
 80a2212:	2300      	movs	r3, #0
 80a2214:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
 80a2216:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
 80a221a:	6423      	str	r3, [r4, #64]	; 0x40
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a221c:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a221e:	8723      	strh	r3, [r4, #56]	; 0x38
 80a2220:	bd10      	pop	{r4, pc}

080a2222 <_ZN3UDP9setBufferEjPh>:
UDP::UDP() : _sock(socket_handle_invalid()), _offset(0), _total(0), _buffer(0), _buffer_size(512)
{
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
 80a2222:	b570      	push	{r4, r5, r6, lr}
 80a2224:	4604      	mov	r4, r0
 80a2226:	4616      	mov	r6, r2
 80a2228:	460d      	mov	r5, r1
    releaseBuffer();
 80a222a:	f7ff ffe9 	bl	80a2200 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
 80a222e:	2300      	movs	r3, #0

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer)
{
    releaseBuffer();

    _buffer = buffer;
 80a2230:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
 80a2232:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
 80a2234:	b93e      	cbnz	r6, 80a2246 <_ZN3UDP9setBufferEjPh+0x24>
 80a2236:	b135      	cbz	r5, 80a2246 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
 80a2238:	4628      	mov	r0, r5
 80a223a:	f7fd ff2e 	bl	80a009a <_Znaj>
        _buffer_allocated = true;
 80a223e:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
 80a2240:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
 80a2242:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
 80a2246:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a2248:	b103      	cbz	r3, 80a224c <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
 80a224a:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
 80a224c:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80a224e:	3000      	adds	r0, #0
 80a2250:	bf18      	it	ne
 80a2252:	2001      	movne	r0, #1
 80a2254:	bd70      	pop	{r4, r5, r6, pc}

080a2256 <_ZN3UDP11beginPacketE9IPAddresst>:
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a2256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2258:	4617      	mov	r7, r2
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a225a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }
    return 0;
}

int UDP::beginPacket(IPAddress ip, uint16_t port)
{
 80a225c:	4605      	mov	r5, r0
 80a225e:	460c      	mov	r4, r1
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
 80a2260:	b91a      	cbnz	r2, 80a226a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
 80a2262:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a2264:	b109      	cbz	r1, 80a226a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
 80a2266:	f7ff ffdc 	bl	80a2222 <_ZN3UDP9setBufferEjPh>
 80a226a:	f105 0620 	add.w	r6, r5, #32
 80a226e:	3404      	adds	r4, #4
 80a2270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2272:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a2274:	6823      	ldr	r3, [r4, #0]
 80a2276:	7033      	strb	r3, [r6, #0]
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2278:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
 80a227a:	86af      	strh	r7, [r5, #52]	; 0x34
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a227c:	86eb      	strh	r3, [r5, #54]	; 0x36
  _total = 0;
 80a227e:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
 80a2280:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80a2282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2284 <_ZN3UDP11parsePacketEv>:
    _offset += size;
    return size;
}

int UDP::parsePacket()
{
 80a2284:	b510      	push	{r4, lr}
    if (!_buffer && _buffer_size) {
 80a2286:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    _offset += size;
    return size;
}

int UDP::parsePacket()
{
 80a2288:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
 80a228a:	b91a      	cbnz	r2, 80a2294 <_ZN3UDP11parsePacketEv+0x10>
 80a228c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80a228e:	b109      	cbz	r1, 80a2294 <_ZN3UDP11parsePacketEv+0x10>
        setBuffer(_buffer_size);
 80a2290:	f7ff ffc7 	bl	80a2222 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a2294:	6be1      	ldr	r1, [r4, #60]	; 0x3c
{
}

void UDP::flush_buffer()
{
  _offset = 0;
 80a2296:	2300      	movs	r3, #0
 80a2298:	86e3      	strh	r3, [r4, #54]	; 0x36
  _total = 0;
 80a229a:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
 80a229c:	b141      	cbz	r1, 80a22b0 <_ZN3UDP11parsePacketEv+0x2c>
 80a229e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80a22a0:	b132      	cbz	r2, 80a22b0 <_ZN3UDP11parsePacketEv+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
 80a22a2:	6823      	ldr	r3, [r4, #0]
 80a22a4:	4620      	mov	r0, r4
 80a22a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a22a8:	4798      	blx	r3
        if (result>0) {
 80a22aa:	2800      	cmp	r0, #0
            _total = result;
 80a22ac:	bfc8      	it	gt
 80a22ae:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    };
    return available();
 80a22b0:	6823      	ldr	r3, [r4, #0]
 80a22b2:	4620      	mov	r0, r4
}
 80a22b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result>0) {
            _total = result;
        }
    };
    return available();
 80a22b8:	691b      	ldr	r3, [r3, #16]
 80a22ba:	4718      	bx	r3

080a22bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a22bc:	4770      	bx	lr

080a22be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a22be:	7441      	strb	r1, [r0, #17]
 80a22c0:	4770      	bx	lr

080a22c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a22c2:	7c00      	ldrb	r0, [r0, #16]
 80a22c4:	f7ff bad4 	b.w	80a1870 <HAL_USART_Available_Data_For_Write>

080a22c8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a22c8:	7c00      	ldrb	r0, [r0, #16]
 80a22ca:	f7ff baa9 	b.w	80a1820 <HAL_USART_Available_Data>

080a22ce <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a22ce:	7c00      	ldrb	r0, [r0, #16]
 80a22d0:	f7ff bab6 	b.w	80a1840 <HAL_USART_Peek_Data>

080a22d4 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a22d4:	7c00      	ldrb	r0, [r0, #16]
 80a22d6:	f7ff baab 	b.w	80a1830 <HAL_USART_Read_Data>

080a22da <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a22da:	7c00      	ldrb	r0, [r0, #16]
 80a22dc:	f7ff bab8 	b.w	80a1850 <HAL_USART_Flush_Data>

080a22e0 <_ZN11USARTSerialD0Ev>:
 80a22e0:	b510      	push	{r4, lr}
 80a22e2:	4604      	mov	r4, r0
 80a22e4:	f7fd fedb 	bl	80a009e <_ZdlPv>
 80a22e8:	4620      	mov	r0, r4
 80a22ea:	bd10      	pop	{r4, pc}

080a22ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a22ec:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a22ee:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a22f0:	4604      	mov	r4, r0
 80a22f2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a22f4:	b925      	cbnz	r5, 80a2300 <_ZN11USARTSerial5writeEh+0x14>
 80a22f6:	7c00      	ldrb	r0, [r0, #16]
 80a22f8:	f7ff faba 	bl	80a1870 <HAL_USART_Available_Data_For_Write>
 80a22fc:	2800      	cmp	r0, #0
 80a22fe:	dd05      	ble.n	80a230c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2300:	4631      	mov	r1, r6
 80a2302:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2308:	f7ff ba82 	b.w	80a1810 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a230c:	4628      	mov	r0, r5
 80a230e:	bd70      	pop	{r4, r5, r6, pc}

080a2310 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2310:	b510      	push	{r4, lr}
 80a2312:	4604      	mov	r4, r0
 80a2314:	4608      	mov	r0, r1
 80a2316:	4611      	mov	r1, r2
 80a2318:	2200      	movs	r2, #0
 80a231a:	6062      	str	r2, [r4, #4]
 80a231c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2320:	60a2      	str	r2, [r4, #8]
 80a2322:	4a05      	ldr	r2, [pc, #20]	; (80a2338 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2324:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2326:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2328:	2201      	movs	r2, #1
 80a232a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a232c:	461a      	mov	r2, r3
 80a232e:	f7ff fa67 	bl	80a1800 <HAL_USART_Init>
}
 80a2332:	4620      	mov	r0, r4
 80a2334:	bd10      	pop	{r4, pc}
 80a2336:	bf00      	nop
 80a2338:	080a3e68 	.word	0x080a3e68

080a233c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a233c:	7c00      	ldrb	r0, [r0, #16]
 80a233e:	f7ff ba8f 	b.w	80a1860 <HAL_USART_Is_Enabled>
	...

080a2344 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2344:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2346:	4d0c      	ldr	r5, [pc, #48]	; (80a2378 <_Z22__fetch_global_Serial1v+0x34>)
 80a2348:	6829      	ldr	r1, [r5, #0]
 80a234a:	f011 0401 	ands.w	r4, r1, #1
 80a234e:	d111      	bne.n	80a2374 <_Z22__fetch_global_Serial1v+0x30>
 80a2350:	4628      	mov	r0, r5
 80a2352:	f7fd fea6 	bl	80a00a2 <__cxa_guard_acquire>
 80a2356:	b168      	cbz	r0, 80a2374 <_Z22__fetch_global_Serial1v+0x30>
 80a2358:	4a08      	ldr	r2, [pc, #32]	; (80a237c <_Z22__fetch_global_Serial1v+0x38>)
 80a235a:	4621      	mov	r1, r4
 80a235c:	4b08      	ldr	r3, [pc, #32]	; (80a2380 <_Z22__fetch_global_Serial1v+0x3c>)
 80a235e:	4809      	ldr	r0, [pc, #36]	; (80a2384 <_Z22__fetch_global_Serial1v+0x40>)
 80a2360:	f7ff ffd6 	bl	80a2310 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2364:	4628      	mov	r0, r5
 80a2366:	f7fd fea1 	bl	80a00ac <__cxa_guard_release>
 80a236a:	4a07      	ldr	r2, [pc, #28]	; (80a2388 <_Z22__fetch_global_Serial1v+0x44>)
 80a236c:	4907      	ldr	r1, [pc, #28]	; (80a238c <_Z22__fetch_global_Serial1v+0x48>)
 80a236e:	4805      	ldr	r0, [pc, #20]	; (80a2384 <_Z22__fetch_global_Serial1v+0x40>)
 80a2370:	f000 fa40 	bl	80a27f4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2374:	4803      	ldr	r0, [pc, #12]	; (80a2384 <_Z22__fetch_global_Serial1v+0x40>)
 80a2376:	bd38      	pop	{r3, r4, r5, pc}
 80a2378:	20000608 	.word	0x20000608
 80a237c:	2000060c 	.word	0x2000060c
 80a2380:	20000584 	.word	0x20000584
 80a2384:	20000570 	.word	0x20000570
 80a2388:	20000390 	.word	0x20000390
 80a238c:	080a22bd 	.word	0x080a22bd

080a2390 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2390:	7441      	strb	r1, [r0, #17]
 80a2392:	4770      	bx	lr

080a2394 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a2394:	4770      	bx	lr

080a2396 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a2396:	2100      	movs	r1, #0
 80a2398:	7c00      	ldrb	r0, [r0, #16]
 80a239a:	f7ff ba91 	b.w	80a18c0 <HAL_USB_USART_Receive_Data>

080a239e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a239e:	2101      	movs	r1, #1
 80a23a0:	7c00      	ldrb	r0, [r0, #16]
 80a23a2:	f7ff ba8d 	b.w	80a18c0 <HAL_USB_USART_Receive_Data>

080a23a6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a23a6:	7c00      	ldrb	r0, [r0, #16]
 80a23a8:	f7ff ba82 	b.w	80a18b0 <HAL_USB_USART_Available_Data_For_Write>

080a23ac <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a23ac:	7c00      	ldrb	r0, [r0, #16]
 80a23ae:	f7ff ba77 	b.w	80a18a0 <HAL_USB_USART_Available_Data>

080a23b2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a23b2:	b538      	push	{r3, r4, r5, lr}
 80a23b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23b6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a23b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a23ba:	f7ff fa79 	bl	80a18b0 <HAL_USB_USART_Available_Data_For_Write>
 80a23be:	2800      	cmp	r0, #0
 80a23c0:	dc01      	bgt.n	80a23c6 <_ZN9USBSerial5writeEh+0x14>
 80a23c2:	7c60      	ldrb	r0, [r4, #17]
 80a23c4:	b120      	cbz	r0, 80a23d0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a23c6:	4629      	mov	r1, r5
 80a23c8:	7c20      	ldrb	r0, [r4, #16]
 80a23ca:	f7ff fa81 	bl	80a18d0 <HAL_USB_USART_Send_Data>
    return 1;
 80a23ce:	2001      	movs	r0, #1
  }
  return 0;
}
 80a23d0:	bd38      	pop	{r3, r4, r5, pc}

080a23d2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a23d2:	7c00      	ldrb	r0, [r0, #16]
 80a23d4:	f7ff ba84 	b.w	80a18e0 <HAL_USB_USART_Flush_Data>

080a23d8 <_ZN9USBSerialD0Ev>:
 80a23d8:	b510      	push	{r4, lr}
 80a23da:	4604      	mov	r4, r0
 80a23dc:	f7fd fe5f 	bl	80a009e <_ZdlPv>
 80a23e0:	4620      	mov	r0, r4
 80a23e2:	bd10      	pop	{r4, pc}

080a23e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a23e4:	b510      	push	{r4, lr}
 80a23e6:	4604      	mov	r4, r0
 80a23e8:	2300      	movs	r3, #0
 80a23ea:	6063      	str	r3, [r4, #4]
 80a23ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a23f0:	60a3      	str	r3, [r4, #8]
 80a23f2:	4b05      	ldr	r3, [pc, #20]	; (80a2408 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a23f4:	4608      	mov	r0, r1
 80a23f6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a23f8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a23fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a23fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a23fe:	4611      	mov	r1, r2
 80a2400:	f7ff fa3e 	bl	80a1880 <HAL_USB_USART_Init>
}
 80a2404:	4620      	mov	r0, r4
 80a2406:	bd10      	pop	{r4, pc}
 80a2408:	080a3e98 	.word	0x080a3e98

080a240c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a240c:	2200      	movs	r2, #0
 80a240e:	7c00      	ldrb	r0, [r0, #16]
 80a2410:	f7ff ba3e 	b.w	80a1890 <HAL_USB_USART_Begin>

080a2414 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2414:	7c00      	ldrb	r0, [r0, #16]
 80a2416:	f7ff ba6b 	b.w	80a18f0 <HAL_USB_USART_Is_Enabled>

080a241a <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
 80a241a:	f7ff bffb 	b.w	80a2414 <_ZN9USBSerial9isEnabledEv>
	...

080a2420 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2420:	b510      	push	{r4, lr}
 80a2422:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2424:	2214      	movs	r2, #20
 80a2426:	2100      	movs	r1, #0
 80a2428:	f001 fa87 	bl	80a393a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a242c:	4b05      	ldr	r3, [pc, #20]	; (80a2444 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a242e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2430:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2432:	4b05      	ldr	r3, [pc, #20]	; (80a2448 <_Z19acquireSerialBufferv+0x28>)
 80a2434:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2436:	f240 1301 	movw	r3, #257	; 0x101
 80a243a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a243c:	2381      	movs	r3, #129	; 0x81
 80a243e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2440:	bd10      	pop	{r4, pc}
 80a2442:	bf00      	nop
 80a2444:	20000715 	.word	0x20000715
 80a2448:	20000694 	.word	0x20000694

080a244c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a244c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a244e:	4d0e      	ldr	r5, [pc, #56]	; (80a2488 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2450:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2452:	a801      	add	r0, sp, #4
 80a2454:	f7ff ffe4 	bl	80a2420 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2458:	6829      	ldr	r1, [r5, #0]
 80a245a:	f011 0401 	ands.w	r4, r1, #1
 80a245e:	d110      	bne.n	80a2482 <_Z16_fetch_usbserialv+0x36>
 80a2460:	4628      	mov	r0, r5
 80a2462:	f7fd fe1e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2466:	b160      	cbz	r0, 80a2482 <_Z16_fetch_usbserialv+0x36>
 80a2468:	aa01      	add	r2, sp, #4
 80a246a:	4621      	mov	r1, r4
 80a246c:	4807      	ldr	r0, [pc, #28]	; (80a248c <_Z16_fetch_usbserialv+0x40>)
 80a246e:	f7ff ffb9 	bl	80a23e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2472:	4628      	mov	r0, r5
 80a2474:	f7fd fe1a 	bl	80a00ac <__cxa_guard_release>
 80a2478:	4a05      	ldr	r2, [pc, #20]	; (80a2490 <_Z16_fetch_usbserialv+0x44>)
 80a247a:	4906      	ldr	r1, [pc, #24]	; (80a2494 <_Z16_fetch_usbserialv+0x48>)
 80a247c:	4803      	ldr	r0, [pc, #12]	; (80a248c <_Z16_fetch_usbserialv+0x40>)
 80a247e:	f000 f9b9 	bl	80a27f4 <__aeabi_atexit>
	return _usbserial;
}
 80a2482:	4802      	ldr	r0, [pc, #8]	; (80a248c <_Z16_fetch_usbserialv+0x40>)
 80a2484:	b007      	add	sp, #28
 80a2486:	bd30      	pop	{r4, r5, pc}
 80a2488:	20000690 	.word	0x20000690
 80a248c:	20000818 	.word	0x20000818
 80a2490:	20000390 	.word	0x20000390
 80a2494:	080a2395 	.word	0x080a2395

080a2498 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2498:	b510      	push	{r4, lr}
 80a249a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a249c:	2214      	movs	r2, #20
 80a249e:	2100      	movs	r1, #0
 80a24a0:	f001 fa4b 	bl	80a393a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a24a4:	4b05      	ldr	r3, [pc, #20]	; (80a24bc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a24a6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a24a8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a24aa:	4b05      	ldr	r3, [pc, #20]	; (80a24c0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a24ac:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a24ae:	f240 1301 	movw	r3, #257	; 0x101
 80a24b2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a24b4:	2381      	movs	r3, #129	; 0x81
 80a24b6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a24b8:	bd10      	pop	{r4, pc}
 80a24ba:	bf00      	nop
 80a24bc:	200008c8 	.word	0x200008c8
 80a24c0:	20000830 	.word	0x20000830

080a24c4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a24c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24c6:	4c0e      	ldr	r4, [pc, #56]	; (80a2500 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a24c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a24ca:	a801      	add	r0, sp, #4
 80a24cc:	f7ff ffe4 	bl	80a2498 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a24d0:	6823      	ldr	r3, [r4, #0]
 80a24d2:	07db      	lsls	r3, r3, #31
 80a24d4:	d410      	bmi.n	80a24f8 <_Z17_fetch_usbserial1v+0x34>
 80a24d6:	4620      	mov	r0, r4
 80a24d8:	f7fd fde3 	bl	80a00a2 <__cxa_guard_acquire>
 80a24dc:	b160      	cbz	r0, 80a24f8 <_Z17_fetch_usbserial1v+0x34>
 80a24de:	aa01      	add	r2, sp, #4
 80a24e0:	2101      	movs	r1, #1
 80a24e2:	4808      	ldr	r0, [pc, #32]	; (80a2504 <_Z17_fetch_usbserial1v+0x40>)
 80a24e4:	f7ff ff7e 	bl	80a23e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a24e8:	4620      	mov	r0, r4
 80a24ea:	f7fd fddf 	bl	80a00ac <__cxa_guard_release>
 80a24ee:	4a06      	ldr	r2, [pc, #24]	; (80a2508 <_Z17_fetch_usbserial1v+0x44>)
 80a24f0:	4906      	ldr	r1, [pc, #24]	; (80a250c <_Z17_fetch_usbserial1v+0x48>)
 80a24f2:	4804      	ldr	r0, [pc, #16]	; (80a2504 <_Z17_fetch_usbserial1v+0x40>)
 80a24f4:	f000 f97e 	bl	80a27f4 <__aeabi_atexit>
  return _usbserial1;
}
 80a24f8:	4802      	ldr	r0, [pc, #8]	; (80a2504 <_Z17_fetch_usbserial1v+0x40>)
 80a24fa:	b006      	add	sp, #24
 80a24fc:	bd10      	pop	{r4, pc}
 80a24fe:	bf00      	nop
 80a2500:	2000082c 	.word	0x2000082c
 80a2504:	200008b4 	.word	0x200008b4
 80a2508:	20000390 	.word	0x20000390
 80a250c:	080a2395 	.word	0x080a2395

080a2510 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2510:	4770      	bx	lr

080a2512 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2512:	2200      	movs	r2, #0
 80a2514:	4611      	mov	r1, r2
 80a2516:	4610      	mov	r0, r2
 80a2518:	f7ff ba3e 	b.w	80a1998 <network_ready>

080a251c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a251c:	4803      	ldr	r0, [pc, #12]	; (80a252c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a251e:	4b04      	ldr	r3, [pc, #16]	; (80a2530 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2520:	4a04      	ldr	r2, [pc, #16]	; (80a2534 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a2522:	4905      	ldr	r1, [pc, #20]	; (80a2538 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a2524:	6003      	str	r3, [r0, #0]
 80a2526:	f000 b965 	b.w	80a27f4 <__aeabi_atexit>
 80a252a:	bf00      	nop
 80a252c:	200009cc 	.word	0x200009cc
 80a2530:	080a3ec8 	.word	0x080a3ec8
 80a2534:	20000390 	.word	0x20000390
 80a2538:	080a2511 	.word	0x080a2511

080a253c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a253c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a253e:	4b14      	ldr	r3, [pc, #80]	; (80a2590 <serialEventRun+0x54>)
 80a2540:	b133      	cbz	r3, 80a2550 <serialEventRun+0x14>
 80a2542:	f7ff ff83 	bl	80a244c <_Z16_fetch_usbserialv>
 80a2546:	6803      	ldr	r3, [r0, #0]
 80a2548:	691b      	ldr	r3, [r3, #16]
 80a254a:	4798      	blx	r3
 80a254c:	2800      	cmp	r0, #0
 80a254e:	dc16      	bgt.n	80a257e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2550:	4b10      	ldr	r3, [pc, #64]	; (80a2594 <serialEventRun+0x58>)
 80a2552:	b133      	cbz	r3, 80a2562 <serialEventRun+0x26>
 80a2554:	f7ff fef6 	bl	80a2344 <_Z22__fetch_global_Serial1v>
 80a2558:	6803      	ldr	r3, [r0, #0]
 80a255a:	691b      	ldr	r3, [r3, #16]
 80a255c:	4798      	blx	r3
 80a255e:	2800      	cmp	r0, #0
 80a2560:	dc10      	bgt.n	80a2584 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2562:	4b0d      	ldr	r3, [pc, #52]	; (80a2598 <serialEventRun+0x5c>)
 80a2564:	b10b      	cbz	r3, 80a256a <serialEventRun+0x2e>
 80a2566:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a256a:	4b0c      	ldr	r3, [pc, #48]	; (80a259c <serialEventRun+0x60>)
 80a256c:	b17b      	cbz	r3, 80a258e <serialEventRun+0x52>
 80a256e:	f7ff ffa9 	bl	80a24c4 <_Z17_fetch_usbserial1v>
 80a2572:	6803      	ldr	r3, [r0, #0]
 80a2574:	691b      	ldr	r3, [r3, #16]
 80a2576:	4798      	blx	r3
 80a2578:	2800      	cmp	r0, #0
 80a257a:	dc06      	bgt.n	80a258a <serialEventRun+0x4e>
 80a257c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a257e:	f3af 8000 	nop.w
 80a2582:	e7e5      	b.n	80a2550 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2584:	f3af 8000 	nop.w
 80a2588:	e7eb      	b.n	80a2562 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a258a:	f3af 8000 	nop.w
 80a258e:	bd08      	pop	{r3, pc}
	...

080a25a0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a25a0:	b508      	push	{r3, lr}
	serialEventRun();
 80a25a2:	f7ff ffcb 	bl	80a253c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a25a6:	f7ff f859 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a25aa:	4b01      	ldr	r3, [pc, #4]	; (80a25b0 <_post_loop+0x10>)
 80a25ac:	6018      	str	r0, [r3, #0]
 80a25ae:	bd08      	pop	{r3, pc}
 80a25b0:	200009d8 	.word	0x200009d8

080a25b4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a25b4:	4802      	ldr	r0, [pc, #8]	; (80a25c0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a25b6:	4a03      	ldr	r2, [pc, #12]	; (80a25c4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a25b8:	4903      	ldr	r1, [pc, #12]	; (80a25c8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a25ba:	1a12      	subs	r2, r2, r0
 80a25bc:	f001 b9b2 	b.w	80a3924 <memcpy>
 80a25c0:	40024000 	.word	0x40024000
 80a25c4:	40024004 	.word	0x40024004
 80a25c8:	080a3f70 	.word	0x080a3f70

080a25cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a25cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a25ce:	2300      	movs	r3, #0
 80a25d0:	9300      	str	r3, [sp, #0]
 80a25d2:	461a      	mov	r2, r3
 80a25d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a25d8:	f7ff f9bc 	bl	80a1954 <system_ctrl_set_result>
}
 80a25dc:	b003      	add	sp, #12
 80a25de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a25e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a25e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a25e6:	8843      	ldrh	r3, [r0, #2]
 80a25e8:	2b0a      	cmp	r3, #10
 80a25ea:	d008      	beq.n	80a25fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a25ec:	2b50      	cmp	r3, #80	; 0x50
 80a25ee:	d109      	bne.n	80a2604 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a25f0:	4b09      	ldr	r3, [pc, #36]	; (80a2618 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a25f2:	681b      	ldr	r3, [r3, #0]
 80a25f4:	b13b      	cbz	r3, 80a2606 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a25f6:	b003      	add	sp, #12
 80a25f8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a25fc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a25fe:	f7ff ffe5 	bl	80a25cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2602:	e006      	b.n	80a2612 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2604:	2300      	movs	r3, #0
 80a2606:	9300      	str	r3, [sp, #0]
 80a2608:	461a      	mov	r2, r3
 80a260a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a260e:	f7ff f9a1 	bl	80a1954 <system_ctrl_set_result>
        break;
    }
}
 80a2612:	b003      	add	sp, #12
 80a2614:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2618:	200009d0 	.word	0x200009d0

080a261c <module_user_init_hook>:

void module_user_init_hook()
{
 80a261c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a261e:	4c10      	ldr	r4, [pc, #64]	; (80a2660 <module_user_init_hook+0x44>)
 80a2620:	4d10      	ldr	r5, [pc, #64]	; (80a2664 <module_user_init_hook+0x48>)
 80a2622:	6823      	ldr	r3, [r4, #0]
 80a2624:	42ab      	cmp	r3, r5
 80a2626:	4b10      	ldr	r3, [pc, #64]	; (80a2668 <module_user_init_hook+0x4c>)
 80a2628:	bf0c      	ite	eq
 80a262a:	2201      	moveq	r2, #1
 80a262c:	2200      	movne	r2, #0
 80a262e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2630:	d002      	beq.n	80a2638 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2632:	f7ff ffbf 	bl	80a25b4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2636:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a2638:	f7ff f808 	bl	80a164c <HAL_RNG_GetRandomNumber>
 80a263c:	f001 f986 	bl	80a394c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2640:	4b0a      	ldr	r3, [pc, #40]	; (80a266c <module_user_init_hook+0x50>)
 80a2642:	b11b      	cbz	r3, 80a264c <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2644:	f7ff f802 	bl	80a164c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a2648:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a264c:	2100      	movs	r1, #0
 80a264e:	4807      	ldr	r0, [pc, #28]	; (80a266c <module_user_init_hook+0x50>)
 80a2650:	f7ff f98a 	bl	80a1968 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2658:	2100      	movs	r1, #0
 80a265a:	4805      	ldr	r0, [pc, #20]	; (80a2670 <module_user_init_hook+0x54>)
 80a265c:	f7ff b970 	b.w	80a1940 <system_ctrl_set_app_request_handler>
 80a2660:	40024000 	.word	0x40024000
 80a2664:	9a271c1e 	.word	0x9a271c1e
 80a2668:	200009d4 	.word	0x200009d4
 80a266c:	00000000 	.word	0x00000000
 80a2670:	080a25e5 	.word	0x080a25e5

080a2674 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2674:	b510      	push	{r4, lr}
 80a2676:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2678:	480f      	ldr	r0, [pc, #60]	; (80a26b8 <pinAvailable+0x44>)
 80a267a:	f7ff fb4d 	bl	80a1d18 <_ZN8SPIClass9isEnabledEv>
 80a267e:	b128      	cbz	r0, 80a268c <pinAvailable+0x18>
 80a2680:	f1a4 030d 	sub.w	r3, r4, #13
 80a2684:	2b02      	cmp	r3, #2
 80a2686:	d801      	bhi.n	80a268c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2688:	2000      	movs	r0, #0
 80a268a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a268c:	f000 f858 	bl	80a2740 <_Z19__fetch_global_Wirev>
 80a2690:	f7ff fa1c 	bl	80a1acc <_ZN7TwoWire9isEnabledEv>
 80a2694:	b108      	cbz	r0, 80a269a <pinAvailable+0x26>
 80a2696:	2c01      	cmp	r4, #1
 80a2698:	d9f6      	bls.n	80a2688 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a269a:	f7ff fe53 	bl	80a2344 <_Z22__fetch_global_Serial1v>
 80a269e:	f7ff fe4d 	bl	80a233c <_ZN11USARTSerial9isEnabledEv>
 80a26a2:	b118      	cbz	r0, 80a26ac <pinAvailable+0x38>
 80a26a4:	f1a4 0312 	sub.w	r3, r4, #18
 80a26a8:	2b01      	cmp	r3, #1
 80a26aa:	d9ed      	bls.n	80a2688 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a26ac:	2c17      	cmp	r4, #23
 80a26ae:	bf8c      	ite	hi
 80a26b0:	2000      	movhi	r0, #0
 80a26b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a26b4:	bd10      	pop	{r4, pc}
 80a26b6:	bf00      	nop
 80a26b8:	20000a0c 	.word	0x20000a0c

080a26bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a26bc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a26be:	b538      	push	{r3, r4, r5, lr}
 80a26c0:	4604      	mov	r4, r0
 80a26c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a26c4:	d80a      	bhi.n	80a26dc <pinMode+0x20>
 80a26c6:	29ff      	cmp	r1, #255	; 0xff
 80a26c8:	d008      	beq.n	80a26dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a26ca:	f7ff ffd3 	bl	80a2674 <pinAvailable>
 80a26ce:	b128      	cbz	r0, 80a26dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a26d0:	4629      	mov	r1, r5
 80a26d2:	4620      	mov	r0, r4
}
 80a26d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a26d8:	f7fe bfd8 	b.w	80a168c <HAL_Pin_Mode>
 80a26dc:	bd38      	pop	{r3, r4, r5, pc}

080a26de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a26de:	b538      	push	{r3, r4, r5, lr}
 80a26e0:	4604      	mov	r4, r0
 80a26e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a26e4:	f7fe ffda 	bl	80a169c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a26e8:	28ff      	cmp	r0, #255	; 0xff
 80a26ea:	d010      	beq.n	80a270e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a26ec:	2806      	cmp	r0, #6
 80a26ee:	d804      	bhi.n	80a26fa <digitalWrite+0x1c>
 80a26f0:	234d      	movs	r3, #77	; 0x4d
 80a26f2:	fa23 f000 	lsr.w	r0, r3, r0
 80a26f6:	07c3      	lsls	r3, r0, #31
 80a26f8:	d409      	bmi.n	80a270e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a26fa:	4620      	mov	r0, r4
 80a26fc:	f7ff ffba 	bl	80a2674 <pinAvailable>
 80a2700:	b128      	cbz	r0, 80a270e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2702:	4629      	mov	r1, r5
 80a2704:	4620      	mov	r0, r4
}
 80a2706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a270a:	f7fe bfcf 	b.w	80a16ac <HAL_GPIO_Write>
 80a270e:	bd38      	pop	{r3, r4, r5, pc}

080a2710 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2710:	b510      	push	{r4, lr}
 80a2712:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2714:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2716:	bf9c      	itt	ls
 80a2718:	340a      	addls	r4, #10
 80a271a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a271c:	4620      	mov	r0, r4
 80a271e:	f7ff ffa9 	bl	80a2674 <pinAvailable>
 80a2722:	b150      	cbz	r0, 80a273a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2724:	2103      	movs	r1, #3
 80a2726:	4620      	mov	r0, r4
 80a2728:	f7fe ffa8 	bl	80a167c <HAL_Validate_Pin_Function>
 80a272c:	2803      	cmp	r0, #3
 80a272e:	d104      	bne.n	80a273a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2730:	4620      	mov	r0, r4
}
 80a2732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2736:	f7fe bfc1 	b.w	80a16bc <HAL_ADC_Read>
}
 80a273a:	2000      	movs	r0, #0
 80a273c:	bd10      	pop	{r4, pc}
	...

080a2740 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2740:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2742:	4d0b      	ldr	r5, [pc, #44]	; (80a2770 <_Z19__fetch_global_Wirev+0x30>)
 80a2744:	6829      	ldr	r1, [r5, #0]
 80a2746:	f011 0401 	ands.w	r4, r1, #1
 80a274a:	d10f      	bne.n	80a276c <_Z19__fetch_global_Wirev+0x2c>
 80a274c:	4628      	mov	r0, r5
 80a274e:	f7fd fca8 	bl	80a00a2 <__cxa_guard_acquire>
 80a2752:	b158      	cbz	r0, 80a276c <_Z19__fetch_global_Wirev+0x2c>
 80a2754:	4621      	mov	r1, r4
 80a2756:	4807      	ldr	r0, [pc, #28]	; (80a2774 <_Z19__fetch_global_Wirev+0x34>)
 80a2758:	f7ff f986 	bl	80a1a68 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a275c:	4628      	mov	r0, r5
 80a275e:	f7fd fca5 	bl	80a00ac <__cxa_guard_release>
 80a2762:	4a05      	ldr	r2, [pc, #20]	; (80a2778 <_Z19__fetch_global_Wirev+0x38>)
 80a2764:	4905      	ldr	r1, [pc, #20]	; (80a277c <_Z19__fetch_global_Wirev+0x3c>)
 80a2766:	4803      	ldr	r0, [pc, #12]	; (80a2774 <_Z19__fetch_global_Wirev+0x34>)
 80a2768:	f000 f844 	bl	80a27f4 <__aeabi_atexit>
	return wire;
}
 80a276c:	4801      	ldr	r0, [pc, #4]	; (80a2774 <_Z19__fetch_global_Wirev+0x34>)
 80a276e:	bd38      	pop	{r3, r4, r5, pc}
 80a2770:	200009dc 	.word	0x200009dc
 80a2774:	200009e0 	.word	0x200009e0
 80a2778:	20000390 	.word	0x20000390
 80a277c:	080a1a11 	.word	0x080a1a11

080a2780 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2780:	b513      	push	{r0, r1, r4, lr}
 80a2782:	4c08      	ldr	r4, [pc, #32]	; (80a27a4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2784:	2300      	movs	r3, #0
 80a2786:	461a      	mov	r2, r3
 80a2788:	4619      	mov	r1, r3
 80a278a:	9300      	str	r3, [sp, #0]
 80a278c:	4620      	mov	r0, r4
 80a278e:	f7ff f9e9 	bl	80a1b64 <_ZN9IPAddressC1Ehhhh>
 80a2792:	4620      	mov	r0, r4
 80a2794:	4a04      	ldr	r2, [pc, #16]	; (80a27a8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2796:	4905      	ldr	r1, [pc, #20]	; (80a27ac <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2798:	b002      	add	sp, #8
 80a279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a279e:	f000 b829 	b.w	80a27f4 <__aeabi_atexit>
 80a27a2:	bf00      	nop
 80a27a4:	200009f4 	.word	0x200009f4
 80a27a8:	20000390 	.word	0x20000390
 80a27ac:	080a07f9 	.word	0x080a07f9

080a27b0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27b0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a27b2:	4c0c      	ldr	r4, [pc, #48]	; (80a27e4 <_GLOBAL__sub_I_SPI+0x34>)
 80a27b4:	4e0c      	ldr	r6, [pc, #48]	; (80a27e8 <_GLOBAL__sub_I_SPI+0x38>)
 80a27b6:	4d0d      	ldr	r5, [pc, #52]	; (80a27ec <_GLOBAL__sub_I_SPI+0x3c>)
 80a27b8:	2100      	movs	r1, #0
 80a27ba:	4620      	mov	r0, r4
 80a27bc:	f7ff fa98 	bl	80a1cf0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27c0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27c2:	4c0b      	ldr	r4, [pc, #44]	; (80a27f0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a27c4:	4632      	mov	r2, r6
 80a27c6:	4629      	mov	r1, r5
 80a27c8:	f000 f814 	bl	80a27f4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a27cc:	2101      	movs	r1, #1
 80a27ce:	4620      	mov	r0, r4
 80a27d0:	f7ff fa8e 	bl	80a1cf0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a27d4:	4632      	mov	r2, r6
 80a27d6:	4629      	mov	r1, r5
 80a27d8:	4620      	mov	r0, r4
 80a27da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a27de:	f000 b809 	b.w	80a27f4 <__aeabi_atexit>
 80a27e2:	bf00      	nop
 80a27e4:	20000a0c 	.word	0x20000a0c
 80a27e8:	20000390 	.word	0x20000390
 80a27ec:	080a1ce1 	.word	0x080a1ce1
 80a27f0:	20000a1c 	.word	0x20000a1c

080a27f4 <__aeabi_atexit>:
 80a27f4:	460b      	mov	r3, r1
 80a27f6:	4601      	mov	r1, r0
 80a27f8:	4618      	mov	r0, r3
 80a27fa:	f001 b885 	b.w	80a3908 <__cxa_atexit>
	...

080a2800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2800:	4b24      	ldr	r3, [pc, #144]	; (80a2894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2802:	681a      	ldr	r2, [r3, #0]
 80a2804:	07d0      	lsls	r0, r2, #31
 80a2806:	bf5c      	itt	pl
 80a2808:	2201      	movpl	r2, #1
 80a280a:	601a      	strpl	r2, [r3, #0]
 80a280c:	4b22      	ldr	r3, [pc, #136]	; (80a2898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a280e:	681a      	ldr	r2, [r3, #0]
 80a2810:	07d1      	lsls	r1, r2, #31
 80a2812:	bf5c      	itt	pl
 80a2814:	2201      	movpl	r2, #1
 80a2816:	601a      	strpl	r2, [r3, #0]
 80a2818:	4b20      	ldr	r3, [pc, #128]	; (80a289c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a281a:	681a      	ldr	r2, [r3, #0]
 80a281c:	07d2      	lsls	r2, r2, #31
 80a281e:	bf5c      	itt	pl
 80a2820:	2201      	movpl	r2, #1
 80a2822:	601a      	strpl	r2, [r3, #0]
 80a2824:	4b1e      	ldr	r3, [pc, #120]	; (80a28a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2826:	681a      	ldr	r2, [r3, #0]
 80a2828:	07d0      	lsls	r0, r2, #31
 80a282a:	bf5c      	itt	pl
 80a282c:	2201      	movpl	r2, #1
 80a282e:	601a      	strpl	r2, [r3, #0]
 80a2830:	4b1c      	ldr	r3, [pc, #112]	; (80a28a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2832:	681a      	ldr	r2, [r3, #0]
 80a2834:	07d1      	lsls	r1, r2, #31
 80a2836:	bf5c      	itt	pl
 80a2838:	2201      	movpl	r2, #1
 80a283a:	601a      	strpl	r2, [r3, #0]
 80a283c:	4b1a      	ldr	r3, [pc, #104]	; (80a28a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a283e:	681a      	ldr	r2, [r3, #0]
 80a2840:	07d2      	lsls	r2, r2, #31
 80a2842:	bf5c      	itt	pl
 80a2844:	2201      	movpl	r2, #1
 80a2846:	601a      	strpl	r2, [r3, #0]
 80a2848:	4b18      	ldr	r3, [pc, #96]	; (80a28ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a284a:	681a      	ldr	r2, [r3, #0]
 80a284c:	07d0      	lsls	r0, r2, #31
 80a284e:	bf5c      	itt	pl
 80a2850:	2201      	movpl	r2, #1
 80a2852:	601a      	strpl	r2, [r3, #0]
 80a2854:	4b16      	ldr	r3, [pc, #88]	; (80a28b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2856:	681a      	ldr	r2, [r3, #0]
 80a2858:	07d1      	lsls	r1, r2, #31
 80a285a:	bf5c      	itt	pl
 80a285c:	2201      	movpl	r2, #1
 80a285e:	601a      	strpl	r2, [r3, #0]
 80a2860:	4b14      	ldr	r3, [pc, #80]	; (80a28b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2862:	681a      	ldr	r2, [r3, #0]
 80a2864:	07d2      	lsls	r2, r2, #31
 80a2866:	bf5c      	itt	pl
 80a2868:	2201      	movpl	r2, #1
 80a286a:	601a      	strpl	r2, [r3, #0]
 80a286c:	4b12      	ldr	r3, [pc, #72]	; (80a28b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a286e:	681a      	ldr	r2, [r3, #0]
 80a2870:	07d0      	lsls	r0, r2, #31
 80a2872:	bf5c      	itt	pl
 80a2874:	2201      	movpl	r2, #1
 80a2876:	601a      	strpl	r2, [r3, #0]
 80a2878:	4b10      	ldr	r3, [pc, #64]	; (80a28bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a287a:	681a      	ldr	r2, [r3, #0]
 80a287c:	07d1      	lsls	r1, r2, #31
 80a287e:	bf5c      	itt	pl
 80a2880:	2201      	movpl	r2, #1
 80a2882:	601a      	strpl	r2, [r3, #0]
 80a2884:	4b0e      	ldr	r3, [pc, #56]	; (80a28c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2886:	681a      	ldr	r2, [r3, #0]
 80a2888:	07d2      	lsls	r2, r2, #31
 80a288a:	bf5c      	itt	pl
 80a288c:	2201      	movpl	r2, #1
 80a288e:	601a      	strpl	r2, [r3, #0]
 80a2890:	4770      	bx	lr
 80a2892:	bf00      	nop
 80a2894:	20000a58 	.word	0x20000a58
 80a2898:	20000a54 	.word	0x20000a54
 80a289c:	20000a50 	.word	0x20000a50
 80a28a0:	20000a4c 	.word	0x20000a4c
 80a28a4:	20000a48 	.word	0x20000a48
 80a28a8:	20000a44 	.word	0x20000a44
 80a28ac:	20000a40 	.word	0x20000a40
 80a28b0:	20000a3c 	.word	0x20000a3c
 80a28b4:	20000a38 	.word	0x20000a38
 80a28b8:	20000a34 	.word	0x20000a34
 80a28bc:	20000a30 	.word	0x20000a30
 80a28c0:	20000a2c 	.word	0x20000a2c

080a28c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a28c4:	4b18      	ldr	r3, [pc, #96]	; (80a2928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a28c6:	681a      	ldr	r2, [r3, #0]
 80a28c8:	07d1      	lsls	r1, r2, #31
 80a28ca:	bf5c      	itt	pl
 80a28cc:	2201      	movpl	r2, #1
 80a28ce:	601a      	strpl	r2, [r3, #0]
 80a28d0:	4b16      	ldr	r3, [pc, #88]	; (80a292c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a28d2:	681a      	ldr	r2, [r3, #0]
 80a28d4:	07d2      	lsls	r2, r2, #31
 80a28d6:	bf5c      	itt	pl
 80a28d8:	2201      	movpl	r2, #1
 80a28da:	601a      	strpl	r2, [r3, #0]
 80a28dc:	4b14      	ldr	r3, [pc, #80]	; (80a2930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a28de:	681a      	ldr	r2, [r3, #0]
 80a28e0:	07d0      	lsls	r0, r2, #31
 80a28e2:	bf5c      	itt	pl
 80a28e4:	2201      	movpl	r2, #1
 80a28e6:	601a      	strpl	r2, [r3, #0]
 80a28e8:	4b12      	ldr	r3, [pc, #72]	; (80a2934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a28ea:	681a      	ldr	r2, [r3, #0]
 80a28ec:	07d1      	lsls	r1, r2, #31
 80a28ee:	bf5c      	itt	pl
 80a28f0:	2201      	movpl	r2, #1
 80a28f2:	601a      	strpl	r2, [r3, #0]
 80a28f4:	4b10      	ldr	r3, [pc, #64]	; (80a2938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a28f6:	681a      	ldr	r2, [r3, #0]
 80a28f8:	07d2      	lsls	r2, r2, #31
 80a28fa:	bf5c      	itt	pl
 80a28fc:	2201      	movpl	r2, #1
 80a28fe:	601a      	strpl	r2, [r3, #0]
 80a2900:	4b0e      	ldr	r3, [pc, #56]	; (80a293c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2902:	681a      	ldr	r2, [r3, #0]
 80a2904:	07d0      	lsls	r0, r2, #31
 80a2906:	bf5c      	itt	pl
 80a2908:	2201      	movpl	r2, #1
 80a290a:	601a      	strpl	r2, [r3, #0]
 80a290c:	4b0c      	ldr	r3, [pc, #48]	; (80a2940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a290e:	681a      	ldr	r2, [r3, #0]
 80a2910:	07d1      	lsls	r1, r2, #31
 80a2912:	bf5c      	itt	pl
 80a2914:	2201      	movpl	r2, #1
 80a2916:	601a      	strpl	r2, [r3, #0]
 80a2918:	4b0a      	ldr	r3, [pc, #40]	; (80a2944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a291a:	681a      	ldr	r2, [r3, #0]
 80a291c:	07d2      	lsls	r2, r2, #31
 80a291e:	bf5c      	itt	pl
 80a2920:	2201      	movpl	r2, #1
 80a2922:	601a      	strpl	r2, [r3, #0]
 80a2924:	4770      	bx	lr
 80a2926:	bf00      	nop
 80a2928:	20000a78 	.word	0x20000a78
 80a292c:	20000a74 	.word	0x20000a74
 80a2930:	20000a70 	.word	0x20000a70
 80a2934:	20000a6c 	.word	0x20000a6c
 80a2938:	20000a68 	.word	0x20000a68
 80a293c:	20000a64 	.word	0x20000a64
 80a2940:	20000a60 	.word	0x20000a60
 80a2944:	20000a5c 	.word	0x20000a5c

080a2948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2948:	4b18      	ldr	r3, [pc, #96]	; (80a29ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a294a:	681a      	ldr	r2, [r3, #0]
 80a294c:	07d1      	lsls	r1, r2, #31
 80a294e:	bf5c      	itt	pl
 80a2950:	2201      	movpl	r2, #1
 80a2952:	601a      	strpl	r2, [r3, #0]
 80a2954:	4b16      	ldr	r3, [pc, #88]	; (80a29b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2956:	681a      	ldr	r2, [r3, #0]
 80a2958:	07d2      	lsls	r2, r2, #31
 80a295a:	bf5c      	itt	pl
 80a295c:	2201      	movpl	r2, #1
 80a295e:	601a      	strpl	r2, [r3, #0]
 80a2960:	4b14      	ldr	r3, [pc, #80]	; (80a29b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2962:	681a      	ldr	r2, [r3, #0]
 80a2964:	07d0      	lsls	r0, r2, #31
 80a2966:	bf5c      	itt	pl
 80a2968:	2201      	movpl	r2, #1
 80a296a:	601a      	strpl	r2, [r3, #0]
 80a296c:	4b12      	ldr	r3, [pc, #72]	; (80a29b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a296e:	681a      	ldr	r2, [r3, #0]
 80a2970:	07d1      	lsls	r1, r2, #31
 80a2972:	bf5c      	itt	pl
 80a2974:	2201      	movpl	r2, #1
 80a2976:	601a      	strpl	r2, [r3, #0]
 80a2978:	4b10      	ldr	r3, [pc, #64]	; (80a29bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a297a:	681a      	ldr	r2, [r3, #0]
 80a297c:	07d2      	lsls	r2, r2, #31
 80a297e:	bf5c      	itt	pl
 80a2980:	2201      	movpl	r2, #1
 80a2982:	601a      	strpl	r2, [r3, #0]
 80a2984:	4b0e      	ldr	r3, [pc, #56]	; (80a29c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2986:	681a      	ldr	r2, [r3, #0]
 80a2988:	07d0      	lsls	r0, r2, #31
 80a298a:	bf5c      	itt	pl
 80a298c:	2201      	movpl	r2, #1
 80a298e:	601a      	strpl	r2, [r3, #0]
 80a2990:	4b0c      	ldr	r3, [pc, #48]	; (80a29c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2992:	681a      	ldr	r2, [r3, #0]
 80a2994:	07d1      	lsls	r1, r2, #31
 80a2996:	bf5c      	itt	pl
 80a2998:	2201      	movpl	r2, #1
 80a299a:	601a      	strpl	r2, [r3, #0]
 80a299c:	4b0a      	ldr	r3, [pc, #40]	; (80a29c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a299e:	681a      	ldr	r2, [r3, #0]
 80a29a0:	07d2      	lsls	r2, r2, #31
 80a29a2:	bf5c      	itt	pl
 80a29a4:	2201      	movpl	r2, #1
 80a29a6:	601a      	strpl	r2, [r3, #0]
 80a29a8:	4770      	bx	lr
 80a29aa:	bf00      	nop
 80a29ac:	20000a98 	.word	0x20000a98
 80a29b0:	20000a94 	.word	0x20000a94
 80a29b4:	20000a90 	.word	0x20000a90
 80a29b8:	20000a8c 	.word	0x20000a8c
 80a29bc:	20000a88 	.word	0x20000a88
 80a29c0:	20000a84 	.word	0x20000a84
 80a29c4:	20000a80 	.word	0x20000a80
 80a29c8:	20000a7c 	.word	0x20000a7c

080a29cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a29cc:	4b24      	ldr	r3, [pc, #144]	; (80a2a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a29ce:	681a      	ldr	r2, [r3, #0]
 80a29d0:	07d0      	lsls	r0, r2, #31
 80a29d2:	bf5c      	itt	pl
 80a29d4:	2201      	movpl	r2, #1
 80a29d6:	601a      	strpl	r2, [r3, #0]
 80a29d8:	4b22      	ldr	r3, [pc, #136]	; (80a2a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a29da:	681a      	ldr	r2, [r3, #0]
 80a29dc:	07d1      	lsls	r1, r2, #31
 80a29de:	bf5c      	itt	pl
 80a29e0:	2201      	movpl	r2, #1
 80a29e2:	601a      	strpl	r2, [r3, #0]
 80a29e4:	4b20      	ldr	r3, [pc, #128]	; (80a2a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a29e6:	681a      	ldr	r2, [r3, #0]
 80a29e8:	07d2      	lsls	r2, r2, #31
 80a29ea:	bf5c      	itt	pl
 80a29ec:	2201      	movpl	r2, #1
 80a29ee:	601a      	strpl	r2, [r3, #0]
 80a29f0:	4b1e      	ldr	r3, [pc, #120]	; (80a2a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a29f2:	681a      	ldr	r2, [r3, #0]
 80a29f4:	07d0      	lsls	r0, r2, #31
 80a29f6:	bf5c      	itt	pl
 80a29f8:	2201      	movpl	r2, #1
 80a29fa:	601a      	strpl	r2, [r3, #0]
 80a29fc:	4b1c      	ldr	r3, [pc, #112]	; (80a2a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a29fe:	681a      	ldr	r2, [r3, #0]
 80a2a00:	07d1      	lsls	r1, r2, #31
 80a2a02:	bf5c      	itt	pl
 80a2a04:	2201      	movpl	r2, #1
 80a2a06:	601a      	strpl	r2, [r3, #0]
 80a2a08:	4b1a      	ldr	r3, [pc, #104]	; (80a2a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2a0a:	681a      	ldr	r2, [r3, #0]
 80a2a0c:	07d2      	lsls	r2, r2, #31
 80a2a0e:	bf5c      	itt	pl
 80a2a10:	2201      	movpl	r2, #1
 80a2a12:	601a      	strpl	r2, [r3, #0]
 80a2a14:	4b18      	ldr	r3, [pc, #96]	; (80a2a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2a16:	681a      	ldr	r2, [r3, #0]
 80a2a18:	07d0      	lsls	r0, r2, #31
 80a2a1a:	bf5c      	itt	pl
 80a2a1c:	2201      	movpl	r2, #1
 80a2a1e:	601a      	strpl	r2, [r3, #0]
 80a2a20:	4b16      	ldr	r3, [pc, #88]	; (80a2a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2a22:	681a      	ldr	r2, [r3, #0]
 80a2a24:	07d1      	lsls	r1, r2, #31
 80a2a26:	bf5c      	itt	pl
 80a2a28:	2201      	movpl	r2, #1
 80a2a2a:	601a      	strpl	r2, [r3, #0]
 80a2a2c:	4b14      	ldr	r3, [pc, #80]	; (80a2a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2a2e:	681a      	ldr	r2, [r3, #0]
 80a2a30:	07d2      	lsls	r2, r2, #31
 80a2a32:	bf5c      	itt	pl
 80a2a34:	2201      	movpl	r2, #1
 80a2a36:	601a      	strpl	r2, [r3, #0]
 80a2a38:	4b12      	ldr	r3, [pc, #72]	; (80a2a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2a3a:	681a      	ldr	r2, [r3, #0]
 80a2a3c:	07d0      	lsls	r0, r2, #31
 80a2a3e:	bf5c      	itt	pl
 80a2a40:	2201      	movpl	r2, #1
 80a2a42:	601a      	strpl	r2, [r3, #0]
 80a2a44:	4b10      	ldr	r3, [pc, #64]	; (80a2a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2a46:	681a      	ldr	r2, [r3, #0]
 80a2a48:	07d1      	lsls	r1, r2, #31
 80a2a4a:	bf5c      	itt	pl
 80a2a4c:	2201      	movpl	r2, #1
 80a2a4e:	601a      	strpl	r2, [r3, #0]
 80a2a50:	4b0e      	ldr	r3, [pc, #56]	; (80a2a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2a52:	681a      	ldr	r2, [r3, #0]
 80a2a54:	07d2      	lsls	r2, r2, #31
 80a2a56:	bf5c      	itt	pl
 80a2a58:	2201      	movpl	r2, #1
 80a2a5a:	601a      	strpl	r2, [r3, #0]
 80a2a5c:	4770      	bx	lr
 80a2a5e:	bf00      	nop
 80a2a60:	20000ac8 	.word	0x20000ac8
 80a2a64:	20000ac4 	.word	0x20000ac4
 80a2a68:	20000ac0 	.word	0x20000ac0
 80a2a6c:	20000abc 	.word	0x20000abc
 80a2a70:	20000ab8 	.word	0x20000ab8
 80a2a74:	20000ab4 	.word	0x20000ab4
 80a2a78:	20000ab0 	.word	0x20000ab0
 80a2a7c:	20000aac 	.word	0x20000aac
 80a2a80:	20000aa8 	.word	0x20000aa8
 80a2a84:	20000aa4 	.word	0x20000aa4
 80a2a88:	20000aa0 	.word	0x20000aa0
 80a2a8c:	20000a9c 	.word	0x20000a9c

080a2a90 <__aeabi_drsub>:
 80a2a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2a94:	e002      	b.n	80a2a9c <__adddf3>
 80a2a96:	bf00      	nop

080a2a98 <__aeabi_dsub>:
 80a2a98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2a9c <__adddf3>:
 80a2a9c:	b530      	push	{r4, r5, lr}
 80a2a9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2aa2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2aa6:	ea94 0f05 	teq	r4, r5
 80a2aaa:	bf08      	it	eq
 80a2aac:	ea90 0f02 	teqeq	r0, r2
 80a2ab0:	bf1f      	itttt	ne
 80a2ab2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2ab6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2aba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2abe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ac2:	f000 80e2 	beq.w	80a2c8a <__adddf3+0x1ee>
 80a2ac6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2aca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2ace:	bfb8      	it	lt
 80a2ad0:	426d      	neglt	r5, r5
 80a2ad2:	dd0c      	ble.n	80a2aee <__adddf3+0x52>
 80a2ad4:	442c      	add	r4, r5
 80a2ad6:	ea80 0202 	eor.w	r2, r0, r2
 80a2ada:	ea81 0303 	eor.w	r3, r1, r3
 80a2ade:	ea82 0000 	eor.w	r0, r2, r0
 80a2ae2:	ea83 0101 	eor.w	r1, r3, r1
 80a2ae6:	ea80 0202 	eor.w	r2, r0, r2
 80a2aea:	ea81 0303 	eor.w	r3, r1, r3
 80a2aee:	2d36      	cmp	r5, #54	; 0x36
 80a2af0:	bf88      	it	hi
 80a2af2:	bd30      	pophi	{r4, r5, pc}
 80a2af4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2af8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2afc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2b00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2b04:	d002      	beq.n	80a2b0c <__adddf3+0x70>
 80a2b06:	4240      	negs	r0, r0
 80a2b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2b10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2b14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2b18:	d002      	beq.n	80a2b20 <__adddf3+0x84>
 80a2b1a:	4252      	negs	r2, r2
 80a2b1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2b20:	ea94 0f05 	teq	r4, r5
 80a2b24:	f000 80a7 	beq.w	80a2c76 <__adddf3+0x1da>
 80a2b28:	f1a4 0401 	sub.w	r4, r4, #1
 80a2b2c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2b30:	db0d      	blt.n	80a2b4e <__adddf3+0xb2>
 80a2b32:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2b36:	fa22 f205 	lsr.w	r2, r2, r5
 80a2b3a:	1880      	adds	r0, r0, r2
 80a2b3c:	f141 0100 	adc.w	r1, r1, #0
 80a2b40:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2b44:	1880      	adds	r0, r0, r2
 80a2b46:	fa43 f305 	asr.w	r3, r3, r5
 80a2b4a:	4159      	adcs	r1, r3
 80a2b4c:	e00e      	b.n	80a2b6c <__adddf3+0xd0>
 80a2b4e:	f1a5 0520 	sub.w	r5, r5, #32
 80a2b52:	f10e 0e20 	add.w	lr, lr, #32
 80a2b56:	2a01      	cmp	r2, #1
 80a2b58:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2b5c:	bf28      	it	cs
 80a2b5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2b62:	fa43 f305 	asr.w	r3, r3, r5
 80a2b66:	18c0      	adds	r0, r0, r3
 80a2b68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2b6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2b70:	d507      	bpl.n	80a2b82 <__adddf3+0xe6>
 80a2b72:	f04f 0e00 	mov.w	lr, #0
 80a2b76:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2b7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2b7e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2b82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2b86:	d31b      	bcc.n	80a2bc0 <__adddf3+0x124>
 80a2b88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2b8c:	d30c      	bcc.n	80a2ba8 <__adddf3+0x10c>
 80a2b8e:	0849      	lsrs	r1, r1, #1
 80a2b90:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2b94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2b98:	f104 0401 	add.w	r4, r4, #1
 80a2b9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2ba0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2ba4:	f080 809a 	bcs.w	80a2cdc <__adddf3+0x240>
 80a2ba8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2bac:	bf08      	it	eq
 80a2bae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2bb2:	f150 0000 	adcs.w	r0, r0, #0
 80a2bb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2bba:	ea41 0105 	orr.w	r1, r1, r5
 80a2bbe:	bd30      	pop	{r4, r5, pc}
 80a2bc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2bc4:	4140      	adcs	r0, r0
 80a2bc6:	eb41 0101 	adc.w	r1, r1, r1
 80a2bca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2bce:	f1a4 0401 	sub.w	r4, r4, #1
 80a2bd2:	d1e9      	bne.n	80a2ba8 <__adddf3+0x10c>
 80a2bd4:	f091 0f00 	teq	r1, #0
 80a2bd8:	bf04      	itt	eq
 80a2bda:	4601      	moveq	r1, r0
 80a2bdc:	2000      	moveq	r0, #0
 80a2bde:	fab1 f381 	clz	r3, r1
 80a2be2:	bf08      	it	eq
 80a2be4:	3320      	addeq	r3, #32
 80a2be6:	f1a3 030b 	sub.w	r3, r3, #11
 80a2bea:	f1b3 0220 	subs.w	r2, r3, #32
 80a2bee:	da0c      	bge.n	80a2c0a <__adddf3+0x16e>
 80a2bf0:	320c      	adds	r2, #12
 80a2bf2:	dd08      	ble.n	80a2c06 <__adddf3+0x16a>
 80a2bf4:	f102 0c14 	add.w	ip, r2, #20
 80a2bf8:	f1c2 020c 	rsb	r2, r2, #12
 80a2bfc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2c00:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c04:	e00c      	b.n	80a2c20 <__adddf3+0x184>
 80a2c06:	f102 0214 	add.w	r2, r2, #20
 80a2c0a:	bfd8      	it	le
 80a2c0c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2c10:	fa01 f102 	lsl.w	r1, r1, r2
 80a2c14:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2c18:	bfdc      	itt	le
 80a2c1a:	ea41 010c 	orrle.w	r1, r1, ip
 80a2c1e:	4090      	lslle	r0, r2
 80a2c20:	1ae4      	subs	r4, r4, r3
 80a2c22:	bfa2      	ittt	ge
 80a2c24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2c28:	4329      	orrge	r1, r5
 80a2c2a:	bd30      	popge	{r4, r5, pc}
 80a2c2c:	ea6f 0404 	mvn.w	r4, r4
 80a2c30:	3c1f      	subs	r4, #31
 80a2c32:	da1c      	bge.n	80a2c6e <__adddf3+0x1d2>
 80a2c34:	340c      	adds	r4, #12
 80a2c36:	dc0e      	bgt.n	80a2c56 <__adddf3+0x1ba>
 80a2c38:	f104 0414 	add.w	r4, r4, #20
 80a2c3c:	f1c4 0220 	rsb	r2, r4, #32
 80a2c40:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c44:	fa01 f302 	lsl.w	r3, r1, r2
 80a2c48:	ea40 0003 	orr.w	r0, r0, r3
 80a2c4c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2c50:	ea45 0103 	orr.w	r1, r5, r3
 80a2c54:	bd30      	pop	{r4, r5, pc}
 80a2c56:	f1c4 040c 	rsb	r4, r4, #12
 80a2c5a:	f1c4 0220 	rsb	r2, r4, #32
 80a2c5e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2c62:	fa01 f304 	lsl.w	r3, r1, r4
 80a2c66:	ea40 0003 	orr.w	r0, r0, r3
 80a2c6a:	4629      	mov	r1, r5
 80a2c6c:	bd30      	pop	{r4, r5, pc}
 80a2c6e:	fa21 f004 	lsr.w	r0, r1, r4
 80a2c72:	4629      	mov	r1, r5
 80a2c74:	bd30      	pop	{r4, r5, pc}
 80a2c76:	f094 0f00 	teq	r4, #0
 80a2c7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2c7e:	bf06      	itte	eq
 80a2c80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2c84:	3401      	addeq	r4, #1
 80a2c86:	3d01      	subne	r5, #1
 80a2c88:	e74e      	b.n	80a2b28 <__adddf3+0x8c>
 80a2c8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2c8e:	bf18      	it	ne
 80a2c90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2c94:	d029      	beq.n	80a2cea <__adddf3+0x24e>
 80a2c96:	ea94 0f05 	teq	r4, r5
 80a2c9a:	bf08      	it	eq
 80a2c9c:	ea90 0f02 	teqeq	r0, r2
 80a2ca0:	d005      	beq.n	80a2cae <__adddf3+0x212>
 80a2ca2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2ca6:	bf04      	itt	eq
 80a2ca8:	4619      	moveq	r1, r3
 80a2caa:	4610      	moveq	r0, r2
 80a2cac:	bd30      	pop	{r4, r5, pc}
 80a2cae:	ea91 0f03 	teq	r1, r3
 80a2cb2:	bf1e      	ittt	ne
 80a2cb4:	2100      	movne	r1, #0
 80a2cb6:	2000      	movne	r0, #0
 80a2cb8:	bd30      	popne	{r4, r5, pc}
 80a2cba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2cbe:	d105      	bne.n	80a2ccc <__adddf3+0x230>
 80a2cc0:	0040      	lsls	r0, r0, #1
 80a2cc2:	4149      	adcs	r1, r1
 80a2cc4:	bf28      	it	cs
 80a2cc6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2cca:	bd30      	pop	{r4, r5, pc}
 80a2ccc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2cd0:	bf3c      	itt	cc
 80a2cd2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2cd6:	bd30      	popcc	{r4, r5, pc}
 80a2cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2cdc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2ce0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2ce4:	f04f 0000 	mov.w	r0, #0
 80a2ce8:	bd30      	pop	{r4, r5, pc}
 80a2cea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2cee:	bf1a      	itte	ne
 80a2cf0:	4619      	movne	r1, r3
 80a2cf2:	4610      	movne	r0, r2
 80a2cf4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2cf8:	bf1c      	itt	ne
 80a2cfa:	460b      	movne	r3, r1
 80a2cfc:	4602      	movne	r2, r0
 80a2cfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2d02:	bf06      	itte	eq
 80a2d04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2d08:	ea91 0f03 	teqeq	r1, r3
 80a2d0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2d10:	bd30      	pop	{r4, r5, pc}
 80a2d12:	bf00      	nop

080a2d14 <__aeabi_ui2d>:
 80a2d14:	f090 0f00 	teq	r0, #0
 80a2d18:	bf04      	itt	eq
 80a2d1a:	2100      	moveq	r1, #0
 80a2d1c:	4770      	bxeq	lr
 80a2d1e:	b530      	push	{r4, r5, lr}
 80a2d20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2d24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2d28:	f04f 0500 	mov.w	r5, #0
 80a2d2c:	f04f 0100 	mov.w	r1, #0
 80a2d30:	e750      	b.n	80a2bd4 <__adddf3+0x138>
 80a2d32:	bf00      	nop

080a2d34 <__aeabi_i2d>:
 80a2d34:	f090 0f00 	teq	r0, #0
 80a2d38:	bf04      	itt	eq
 80a2d3a:	2100      	moveq	r1, #0
 80a2d3c:	4770      	bxeq	lr
 80a2d3e:	b530      	push	{r4, r5, lr}
 80a2d40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2d44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2d48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2d4c:	bf48      	it	mi
 80a2d4e:	4240      	negmi	r0, r0
 80a2d50:	f04f 0100 	mov.w	r1, #0
 80a2d54:	e73e      	b.n	80a2bd4 <__adddf3+0x138>
 80a2d56:	bf00      	nop

080a2d58 <__aeabi_f2d>:
 80a2d58:	0042      	lsls	r2, r0, #1
 80a2d5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2d5e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2d62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2d66:	bf1f      	itttt	ne
 80a2d68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2d6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2d70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2d74:	4770      	bxne	lr
 80a2d76:	f092 0f00 	teq	r2, #0
 80a2d7a:	bf14      	ite	ne
 80a2d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2d80:	4770      	bxeq	lr
 80a2d82:	b530      	push	{r4, r5, lr}
 80a2d84:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2d88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2d90:	e720      	b.n	80a2bd4 <__adddf3+0x138>
 80a2d92:	bf00      	nop

080a2d94 <__aeabi_ul2d>:
 80a2d94:	ea50 0201 	orrs.w	r2, r0, r1
 80a2d98:	bf08      	it	eq
 80a2d9a:	4770      	bxeq	lr
 80a2d9c:	b530      	push	{r4, r5, lr}
 80a2d9e:	f04f 0500 	mov.w	r5, #0
 80a2da2:	e00a      	b.n	80a2dba <__aeabi_l2d+0x16>

080a2da4 <__aeabi_l2d>:
 80a2da4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2da8:	bf08      	it	eq
 80a2daa:	4770      	bxeq	lr
 80a2dac:	b530      	push	{r4, r5, lr}
 80a2dae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2db2:	d502      	bpl.n	80a2dba <__aeabi_l2d+0x16>
 80a2db4:	4240      	negs	r0, r0
 80a2db6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2dba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2dbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2dc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2dc6:	f43f aedc 	beq.w	80a2b82 <__adddf3+0xe6>
 80a2dca:	f04f 0203 	mov.w	r2, #3
 80a2dce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2dd2:	bf18      	it	ne
 80a2dd4:	3203      	addne	r2, #3
 80a2dd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2dda:	bf18      	it	ne
 80a2ddc:	3203      	addne	r2, #3
 80a2dde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2de2:	f1c2 0320 	rsb	r3, r2, #32
 80a2de6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2dea:	fa20 f002 	lsr.w	r0, r0, r2
 80a2dee:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2df2:	ea40 000e 	orr.w	r0, r0, lr
 80a2df6:	fa21 f102 	lsr.w	r1, r1, r2
 80a2dfa:	4414      	add	r4, r2
 80a2dfc:	e6c1      	b.n	80a2b82 <__adddf3+0xe6>
 80a2dfe:	bf00      	nop

080a2e00 <__aeabi_dmul>:
 80a2e00:	b570      	push	{r4, r5, r6, lr}
 80a2e02:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2e06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2e0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2e0e:	bf1d      	ittte	ne
 80a2e10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2e14:	ea94 0f0c 	teqne	r4, ip
 80a2e18:	ea95 0f0c 	teqne	r5, ip
 80a2e1c:	f000 f8de 	bleq	80a2fdc <__aeabi_dmul+0x1dc>
 80a2e20:	442c      	add	r4, r5
 80a2e22:	ea81 0603 	eor.w	r6, r1, r3
 80a2e26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2e2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2e2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2e32:	bf18      	it	ne
 80a2e34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2e38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2e40:	d038      	beq.n	80a2eb4 <__aeabi_dmul+0xb4>
 80a2e42:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2e46:	f04f 0500 	mov.w	r5, #0
 80a2e4a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2e4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2e52:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2e56:	f04f 0600 	mov.w	r6, #0
 80a2e5a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2e5e:	f09c 0f00 	teq	ip, #0
 80a2e62:	bf18      	it	ne
 80a2e64:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2e68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2e6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2e70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2e74:	d204      	bcs.n	80a2e80 <__aeabi_dmul+0x80>
 80a2e76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2e7a:	416d      	adcs	r5, r5
 80a2e7c:	eb46 0606 	adc.w	r6, r6, r6
 80a2e80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2e84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2e88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2e8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2e90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2e94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2e98:	bf88      	it	hi
 80a2e9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2e9e:	d81e      	bhi.n	80a2ede <__aeabi_dmul+0xde>
 80a2ea0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2ea4:	bf08      	it	eq
 80a2ea6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2eaa:	f150 0000 	adcs.w	r0, r0, #0
 80a2eae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2eb2:	bd70      	pop	{r4, r5, r6, pc}
 80a2eb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2eb8:	ea46 0101 	orr.w	r1, r6, r1
 80a2ebc:	ea40 0002 	orr.w	r0, r0, r2
 80a2ec0:	ea81 0103 	eor.w	r1, r1, r3
 80a2ec4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2ec8:	bfc2      	ittt	gt
 80a2eca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2ece:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2ed2:	bd70      	popgt	{r4, r5, r6, pc}
 80a2ed4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ed8:	f04f 0e00 	mov.w	lr, #0
 80a2edc:	3c01      	subs	r4, #1
 80a2ede:	f300 80ab 	bgt.w	80a3038 <__aeabi_dmul+0x238>
 80a2ee2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2ee6:	bfde      	ittt	le
 80a2ee8:	2000      	movle	r0, #0
 80a2eea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2eee:	bd70      	pople	{r4, r5, r6, pc}
 80a2ef0:	f1c4 0400 	rsb	r4, r4, #0
 80a2ef4:	3c20      	subs	r4, #32
 80a2ef6:	da35      	bge.n	80a2f64 <__aeabi_dmul+0x164>
 80a2ef8:	340c      	adds	r4, #12
 80a2efa:	dc1b      	bgt.n	80a2f34 <__aeabi_dmul+0x134>
 80a2efc:	f104 0414 	add.w	r4, r4, #20
 80a2f00:	f1c4 0520 	rsb	r5, r4, #32
 80a2f04:	fa00 f305 	lsl.w	r3, r0, r5
 80a2f08:	fa20 f004 	lsr.w	r0, r0, r4
 80a2f0c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2f10:	ea40 0002 	orr.w	r0, r0, r2
 80a2f14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2f20:	fa21 f604 	lsr.w	r6, r1, r4
 80a2f24:	eb42 0106 	adc.w	r1, r2, r6
 80a2f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2f2c:	bf08      	it	eq
 80a2f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2f32:	bd70      	pop	{r4, r5, r6, pc}
 80a2f34:	f1c4 040c 	rsb	r4, r4, #12
 80a2f38:	f1c4 0520 	rsb	r5, r4, #32
 80a2f3c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2f40:	fa20 f005 	lsr.w	r0, r0, r5
 80a2f44:	fa01 f204 	lsl.w	r2, r1, r4
 80a2f48:	ea40 0002 	orr.w	r0, r0, r2
 80a2f4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2f54:	f141 0100 	adc.w	r1, r1, #0
 80a2f58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2f5c:	bf08      	it	eq
 80a2f5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2f62:	bd70      	pop	{r4, r5, r6, pc}
 80a2f64:	f1c4 0520 	rsb	r5, r4, #32
 80a2f68:	fa00 f205 	lsl.w	r2, r0, r5
 80a2f6c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2f70:	fa20 f304 	lsr.w	r3, r0, r4
 80a2f74:	fa01 f205 	lsl.w	r2, r1, r5
 80a2f78:	ea43 0302 	orr.w	r3, r3, r2
 80a2f7c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2f84:	fa21 f204 	lsr.w	r2, r1, r4
 80a2f88:	ea20 0002 	bic.w	r0, r0, r2
 80a2f8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2f90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2f94:	bf08      	it	eq
 80a2f96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2f9a:	bd70      	pop	{r4, r5, r6, pc}
 80a2f9c:	f094 0f00 	teq	r4, #0
 80a2fa0:	d10f      	bne.n	80a2fc2 <__aeabi_dmul+0x1c2>
 80a2fa2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2fa6:	0040      	lsls	r0, r0, #1
 80a2fa8:	eb41 0101 	adc.w	r1, r1, r1
 80a2fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fb0:	bf08      	it	eq
 80a2fb2:	3c01      	subeq	r4, #1
 80a2fb4:	d0f7      	beq.n	80a2fa6 <__aeabi_dmul+0x1a6>
 80a2fb6:	ea41 0106 	orr.w	r1, r1, r6
 80a2fba:	f095 0f00 	teq	r5, #0
 80a2fbe:	bf18      	it	ne
 80a2fc0:	4770      	bxne	lr
 80a2fc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2fc6:	0052      	lsls	r2, r2, #1
 80a2fc8:	eb43 0303 	adc.w	r3, r3, r3
 80a2fcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2fd0:	bf08      	it	eq
 80a2fd2:	3d01      	subeq	r5, #1
 80a2fd4:	d0f7      	beq.n	80a2fc6 <__aeabi_dmul+0x1c6>
 80a2fd6:	ea43 0306 	orr.w	r3, r3, r6
 80a2fda:	4770      	bx	lr
 80a2fdc:	ea94 0f0c 	teq	r4, ip
 80a2fe0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2fe4:	bf18      	it	ne
 80a2fe6:	ea95 0f0c 	teqne	r5, ip
 80a2fea:	d00c      	beq.n	80a3006 <__aeabi_dmul+0x206>
 80a2fec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2ff0:	bf18      	it	ne
 80a2ff2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2ff6:	d1d1      	bne.n	80a2f9c <__aeabi_dmul+0x19c>
 80a2ff8:	ea81 0103 	eor.w	r1, r1, r3
 80a2ffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3000:	f04f 0000 	mov.w	r0, #0
 80a3004:	bd70      	pop	{r4, r5, r6, pc}
 80a3006:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a300a:	bf06      	itte	eq
 80a300c:	4610      	moveq	r0, r2
 80a300e:	4619      	moveq	r1, r3
 80a3010:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3014:	d019      	beq.n	80a304a <__aeabi_dmul+0x24a>
 80a3016:	ea94 0f0c 	teq	r4, ip
 80a301a:	d102      	bne.n	80a3022 <__aeabi_dmul+0x222>
 80a301c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3020:	d113      	bne.n	80a304a <__aeabi_dmul+0x24a>
 80a3022:	ea95 0f0c 	teq	r5, ip
 80a3026:	d105      	bne.n	80a3034 <__aeabi_dmul+0x234>
 80a3028:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a302c:	bf1c      	itt	ne
 80a302e:	4610      	movne	r0, r2
 80a3030:	4619      	movne	r1, r3
 80a3032:	d10a      	bne.n	80a304a <__aeabi_dmul+0x24a>
 80a3034:	ea81 0103 	eor.w	r1, r1, r3
 80a3038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a303c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3040:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3044:	f04f 0000 	mov.w	r0, #0
 80a3048:	bd70      	pop	{r4, r5, r6, pc}
 80a304a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a304e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3052:	bd70      	pop	{r4, r5, r6, pc}

080a3054 <__aeabi_ddiv>:
 80a3054:	b570      	push	{r4, r5, r6, lr}
 80a3056:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a305a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a305e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3062:	bf1d      	ittte	ne
 80a3064:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3068:	ea94 0f0c 	teqne	r4, ip
 80a306c:	ea95 0f0c 	teqne	r5, ip
 80a3070:	f000 f8a7 	bleq	80a31c2 <__aeabi_ddiv+0x16e>
 80a3074:	eba4 0405 	sub.w	r4, r4, r5
 80a3078:	ea81 0e03 	eor.w	lr, r1, r3
 80a307c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3080:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3084:	f000 8088 	beq.w	80a3198 <__aeabi_ddiv+0x144>
 80a3088:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a308c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3090:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3094:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3098:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a309c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a30a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a30a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a30a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a30ac:	429d      	cmp	r5, r3
 80a30ae:	bf08      	it	eq
 80a30b0:	4296      	cmpeq	r6, r2
 80a30b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a30b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a30ba:	d202      	bcs.n	80a30c2 <__aeabi_ddiv+0x6e>
 80a30bc:	085b      	lsrs	r3, r3, #1
 80a30be:	ea4f 0232 	mov.w	r2, r2, rrx
 80a30c2:	1ab6      	subs	r6, r6, r2
 80a30c4:	eb65 0503 	sbc.w	r5, r5, r3
 80a30c8:	085b      	lsrs	r3, r3, #1
 80a30ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a30ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a30d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a30d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a30da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a30de:	bf22      	ittt	cs
 80a30e0:	1ab6      	subcs	r6, r6, r2
 80a30e2:	4675      	movcs	r5, lr
 80a30e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a30e8:	085b      	lsrs	r3, r3, #1
 80a30ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a30ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a30f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a30f6:	bf22      	ittt	cs
 80a30f8:	1ab6      	subcs	r6, r6, r2
 80a30fa:	4675      	movcs	r5, lr
 80a30fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3100:	085b      	lsrs	r3, r3, #1
 80a3102:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3106:	ebb6 0e02 	subs.w	lr, r6, r2
 80a310a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a310e:	bf22      	ittt	cs
 80a3110:	1ab6      	subcs	r6, r6, r2
 80a3112:	4675      	movcs	r5, lr
 80a3114:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3118:	085b      	lsrs	r3, r3, #1
 80a311a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a311e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3122:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3126:	bf22      	ittt	cs
 80a3128:	1ab6      	subcs	r6, r6, r2
 80a312a:	4675      	movcs	r5, lr
 80a312c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3130:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3134:	d018      	beq.n	80a3168 <__aeabi_ddiv+0x114>
 80a3136:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a313a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a313e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3142:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3146:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a314a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a314e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3152:	d1c0      	bne.n	80a30d6 <__aeabi_ddiv+0x82>
 80a3154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3158:	d10b      	bne.n	80a3172 <__aeabi_ddiv+0x11e>
 80a315a:	ea41 0100 	orr.w	r1, r1, r0
 80a315e:	f04f 0000 	mov.w	r0, #0
 80a3162:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3166:	e7b6      	b.n	80a30d6 <__aeabi_ddiv+0x82>
 80a3168:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a316c:	bf04      	itt	eq
 80a316e:	4301      	orreq	r1, r0
 80a3170:	2000      	moveq	r0, #0
 80a3172:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3176:	bf88      	it	hi
 80a3178:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a317c:	f63f aeaf 	bhi.w	80a2ede <__aeabi_dmul+0xde>
 80a3180:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3184:	bf04      	itt	eq
 80a3186:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a318a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a318e:	f150 0000 	adcs.w	r0, r0, #0
 80a3192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3196:	bd70      	pop	{r4, r5, r6, pc}
 80a3198:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a319c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a31a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a31a4:	bfc2      	ittt	gt
 80a31a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a31aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a31ae:	bd70      	popgt	{r4, r5, r6, pc}
 80a31b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a31b4:	f04f 0e00 	mov.w	lr, #0
 80a31b8:	3c01      	subs	r4, #1
 80a31ba:	e690      	b.n	80a2ede <__aeabi_dmul+0xde>
 80a31bc:	ea45 0e06 	orr.w	lr, r5, r6
 80a31c0:	e68d      	b.n	80a2ede <__aeabi_dmul+0xde>
 80a31c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a31c6:	ea94 0f0c 	teq	r4, ip
 80a31ca:	bf08      	it	eq
 80a31cc:	ea95 0f0c 	teqeq	r5, ip
 80a31d0:	f43f af3b 	beq.w	80a304a <__aeabi_dmul+0x24a>
 80a31d4:	ea94 0f0c 	teq	r4, ip
 80a31d8:	d10a      	bne.n	80a31f0 <__aeabi_ddiv+0x19c>
 80a31da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a31de:	f47f af34 	bne.w	80a304a <__aeabi_dmul+0x24a>
 80a31e2:	ea95 0f0c 	teq	r5, ip
 80a31e6:	f47f af25 	bne.w	80a3034 <__aeabi_dmul+0x234>
 80a31ea:	4610      	mov	r0, r2
 80a31ec:	4619      	mov	r1, r3
 80a31ee:	e72c      	b.n	80a304a <__aeabi_dmul+0x24a>
 80a31f0:	ea95 0f0c 	teq	r5, ip
 80a31f4:	d106      	bne.n	80a3204 <__aeabi_ddiv+0x1b0>
 80a31f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a31fa:	f43f aefd 	beq.w	80a2ff8 <__aeabi_dmul+0x1f8>
 80a31fe:	4610      	mov	r0, r2
 80a3200:	4619      	mov	r1, r3
 80a3202:	e722      	b.n	80a304a <__aeabi_dmul+0x24a>
 80a3204:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3208:	bf18      	it	ne
 80a320a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a320e:	f47f aec5 	bne.w	80a2f9c <__aeabi_dmul+0x19c>
 80a3212:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3216:	f47f af0d 	bne.w	80a3034 <__aeabi_dmul+0x234>
 80a321a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a321e:	f47f aeeb 	bne.w	80a2ff8 <__aeabi_dmul+0x1f8>
 80a3222:	e712      	b.n	80a304a <__aeabi_dmul+0x24a>

080a3224 <__aeabi_d2iz>:
 80a3224:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3228:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a322c:	d215      	bcs.n	80a325a <__aeabi_d2iz+0x36>
 80a322e:	d511      	bpl.n	80a3254 <__aeabi_d2iz+0x30>
 80a3230:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3234:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3238:	d912      	bls.n	80a3260 <__aeabi_d2iz+0x3c>
 80a323a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a323e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3242:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3246:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a324a:	fa23 f002 	lsr.w	r0, r3, r2
 80a324e:	bf18      	it	ne
 80a3250:	4240      	negne	r0, r0
 80a3252:	4770      	bx	lr
 80a3254:	f04f 0000 	mov.w	r0, #0
 80a3258:	4770      	bx	lr
 80a325a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a325e:	d105      	bne.n	80a326c <__aeabi_d2iz+0x48>
 80a3260:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3264:	bf08      	it	eq
 80a3266:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a326a:	4770      	bx	lr
 80a326c:	f04f 0000 	mov.w	r0, #0
 80a3270:	4770      	bx	lr
 80a3272:	bf00      	nop

080a3274 <__aeabi_d2f>:
 80a3274:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3278:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a327c:	bf24      	itt	cs
 80a327e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3282:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3286:	d90d      	bls.n	80a32a4 <__aeabi_d2f+0x30>
 80a3288:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a328c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3290:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3294:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3298:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a329c:	bf08      	it	eq
 80a329e:	f020 0001 	biceq.w	r0, r0, #1
 80a32a2:	4770      	bx	lr
 80a32a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a32a8:	d121      	bne.n	80a32ee <__aeabi_d2f+0x7a>
 80a32aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a32ae:	bfbc      	itt	lt
 80a32b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a32b4:	4770      	bxlt	lr
 80a32b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a32ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a32be:	f1c2 0218 	rsb	r2, r2, #24
 80a32c2:	f1c2 0c20 	rsb	ip, r2, #32
 80a32c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a32ca:	fa20 f002 	lsr.w	r0, r0, r2
 80a32ce:	bf18      	it	ne
 80a32d0:	f040 0001 	orrne.w	r0, r0, #1
 80a32d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a32d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a32dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a32e0:	ea40 000c 	orr.w	r0, r0, ip
 80a32e4:	fa23 f302 	lsr.w	r3, r3, r2
 80a32e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a32ec:	e7cc      	b.n	80a3288 <__aeabi_d2f+0x14>
 80a32ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a32f2:	d107      	bne.n	80a3304 <__aeabi_d2f+0x90>
 80a32f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a32f8:	bf1e      	ittt	ne
 80a32fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a32fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3302:	4770      	bxne	lr
 80a3304:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3308:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a330c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3310:	4770      	bx	lr
 80a3312:	bf00      	nop

080a3314 <__aeabi_frsub>:
 80a3314:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3318:	e002      	b.n	80a3320 <__addsf3>
 80a331a:	bf00      	nop

080a331c <__aeabi_fsub>:
 80a331c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3320 <__addsf3>:
 80a3320:	0042      	lsls	r2, r0, #1
 80a3322:	bf1f      	itttt	ne
 80a3324:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3328:	ea92 0f03 	teqne	r2, r3
 80a332c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3330:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3334:	d06a      	beq.n	80a340c <__addsf3+0xec>
 80a3336:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a333a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a333e:	bfc1      	itttt	gt
 80a3340:	18d2      	addgt	r2, r2, r3
 80a3342:	4041      	eorgt	r1, r0
 80a3344:	4048      	eorgt	r0, r1
 80a3346:	4041      	eorgt	r1, r0
 80a3348:	bfb8      	it	lt
 80a334a:	425b      	neglt	r3, r3
 80a334c:	2b19      	cmp	r3, #25
 80a334e:	bf88      	it	hi
 80a3350:	4770      	bxhi	lr
 80a3352:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a335a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a335e:	bf18      	it	ne
 80a3360:	4240      	negne	r0, r0
 80a3362:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3366:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a336a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a336e:	bf18      	it	ne
 80a3370:	4249      	negne	r1, r1
 80a3372:	ea92 0f03 	teq	r2, r3
 80a3376:	d03f      	beq.n	80a33f8 <__addsf3+0xd8>
 80a3378:	f1a2 0201 	sub.w	r2, r2, #1
 80a337c:	fa41 fc03 	asr.w	ip, r1, r3
 80a3380:	eb10 000c 	adds.w	r0, r0, ip
 80a3384:	f1c3 0320 	rsb	r3, r3, #32
 80a3388:	fa01 f103 	lsl.w	r1, r1, r3
 80a338c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3390:	d502      	bpl.n	80a3398 <__addsf3+0x78>
 80a3392:	4249      	negs	r1, r1
 80a3394:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3398:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a339c:	d313      	bcc.n	80a33c6 <__addsf3+0xa6>
 80a339e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a33a2:	d306      	bcc.n	80a33b2 <__addsf3+0x92>
 80a33a4:	0840      	lsrs	r0, r0, #1
 80a33a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a33aa:	f102 0201 	add.w	r2, r2, #1
 80a33ae:	2afe      	cmp	r2, #254	; 0xfe
 80a33b0:	d251      	bcs.n	80a3456 <__addsf3+0x136>
 80a33b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a33b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a33ba:	bf08      	it	eq
 80a33bc:	f020 0001 	biceq.w	r0, r0, #1
 80a33c0:	ea40 0003 	orr.w	r0, r0, r3
 80a33c4:	4770      	bx	lr
 80a33c6:	0049      	lsls	r1, r1, #1
 80a33c8:	eb40 0000 	adc.w	r0, r0, r0
 80a33cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a33d0:	f1a2 0201 	sub.w	r2, r2, #1
 80a33d4:	d1ed      	bne.n	80a33b2 <__addsf3+0x92>
 80a33d6:	fab0 fc80 	clz	ip, r0
 80a33da:	f1ac 0c08 	sub.w	ip, ip, #8
 80a33de:	ebb2 020c 	subs.w	r2, r2, ip
 80a33e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a33e6:	bfaa      	itet	ge
 80a33e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a33ec:	4252      	neglt	r2, r2
 80a33ee:	4318      	orrge	r0, r3
 80a33f0:	bfbc      	itt	lt
 80a33f2:	40d0      	lsrlt	r0, r2
 80a33f4:	4318      	orrlt	r0, r3
 80a33f6:	4770      	bx	lr
 80a33f8:	f092 0f00 	teq	r2, #0
 80a33fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3400:	bf06      	itte	eq
 80a3402:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3406:	3201      	addeq	r2, #1
 80a3408:	3b01      	subne	r3, #1
 80a340a:	e7b5      	b.n	80a3378 <__addsf3+0x58>
 80a340c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3410:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3414:	bf18      	it	ne
 80a3416:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a341a:	d021      	beq.n	80a3460 <__addsf3+0x140>
 80a341c:	ea92 0f03 	teq	r2, r3
 80a3420:	d004      	beq.n	80a342c <__addsf3+0x10c>
 80a3422:	f092 0f00 	teq	r2, #0
 80a3426:	bf08      	it	eq
 80a3428:	4608      	moveq	r0, r1
 80a342a:	4770      	bx	lr
 80a342c:	ea90 0f01 	teq	r0, r1
 80a3430:	bf1c      	itt	ne
 80a3432:	2000      	movne	r0, #0
 80a3434:	4770      	bxne	lr
 80a3436:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a343a:	d104      	bne.n	80a3446 <__addsf3+0x126>
 80a343c:	0040      	lsls	r0, r0, #1
 80a343e:	bf28      	it	cs
 80a3440:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3444:	4770      	bx	lr
 80a3446:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a344a:	bf3c      	itt	cc
 80a344c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3450:	4770      	bxcc	lr
 80a3452:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3456:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a345a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a345e:	4770      	bx	lr
 80a3460:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3464:	bf16      	itet	ne
 80a3466:	4608      	movne	r0, r1
 80a3468:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a346c:	4601      	movne	r1, r0
 80a346e:	0242      	lsls	r2, r0, #9
 80a3470:	bf06      	itte	eq
 80a3472:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3476:	ea90 0f01 	teqeq	r0, r1
 80a347a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a347e:	4770      	bx	lr

080a3480 <__aeabi_ui2f>:
 80a3480:	f04f 0300 	mov.w	r3, #0
 80a3484:	e004      	b.n	80a3490 <__aeabi_i2f+0x8>
 80a3486:	bf00      	nop

080a3488 <__aeabi_i2f>:
 80a3488:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a348c:	bf48      	it	mi
 80a348e:	4240      	negmi	r0, r0
 80a3490:	ea5f 0c00 	movs.w	ip, r0
 80a3494:	bf08      	it	eq
 80a3496:	4770      	bxeq	lr
 80a3498:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a349c:	4601      	mov	r1, r0
 80a349e:	f04f 0000 	mov.w	r0, #0
 80a34a2:	e01c      	b.n	80a34de <__aeabi_l2f+0x2a>

080a34a4 <__aeabi_ul2f>:
 80a34a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a34a8:	bf08      	it	eq
 80a34aa:	4770      	bxeq	lr
 80a34ac:	f04f 0300 	mov.w	r3, #0
 80a34b0:	e00a      	b.n	80a34c8 <__aeabi_l2f+0x14>
 80a34b2:	bf00      	nop

080a34b4 <__aeabi_l2f>:
 80a34b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a34b8:	bf08      	it	eq
 80a34ba:	4770      	bxeq	lr
 80a34bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a34c0:	d502      	bpl.n	80a34c8 <__aeabi_l2f+0x14>
 80a34c2:	4240      	negs	r0, r0
 80a34c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a34c8:	ea5f 0c01 	movs.w	ip, r1
 80a34cc:	bf02      	ittt	eq
 80a34ce:	4684      	moveq	ip, r0
 80a34d0:	4601      	moveq	r1, r0
 80a34d2:	2000      	moveq	r0, #0
 80a34d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a34d8:	bf08      	it	eq
 80a34da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a34de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a34e2:	fabc f28c 	clz	r2, ip
 80a34e6:	3a08      	subs	r2, #8
 80a34e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a34ec:	db10      	blt.n	80a3510 <__aeabi_l2f+0x5c>
 80a34ee:	fa01 fc02 	lsl.w	ip, r1, r2
 80a34f2:	4463      	add	r3, ip
 80a34f4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a34f8:	f1c2 0220 	rsb	r2, r2, #32
 80a34fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3500:	fa20 f202 	lsr.w	r2, r0, r2
 80a3504:	eb43 0002 	adc.w	r0, r3, r2
 80a3508:	bf08      	it	eq
 80a350a:	f020 0001 	biceq.w	r0, r0, #1
 80a350e:	4770      	bx	lr
 80a3510:	f102 0220 	add.w	r2, r2, #32
 80a3514:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3518:	f1c2 0220 	rsb	r2, r2, #32
 80a351c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3520:	fa21 f202 	lsr.w	r2, r1, r2
 80a3524:	eb43 0002 	adc.w	r0, r3, r2
 80a3528:	bf08      	it	eq
 80a352a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a352e:	4770      	bx	lr

080a3530 <__aeabi_fmul>:
 80a3530:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3534:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3538:	bf1e      	ittt	ne
 80a353a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a353e:	ea92 0f0c 	teqne	r2, ip
 80a3542:	ea93 0f0c 	teqne	r3, ip
 80a3546:	d06f      	beq.n	80a3628 <__aeabi_fmul+0xf8>
 80a3548:	441a      	add	r2, r3
 80a354a:	ea80 0c01 	eor.w	ip, r0, r1
 80a354e:	0240      	lsls	r0, r0, #9
 80a3550:	bf18      	it	ne
 80a3552:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3556:	d01e      	beq.n	80a3596 <__aeabi_fmul+0x66>
 80a3558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a355c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3560:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3564:	fba0 3101 	umull	r3, r1, r0, r1
 80a3568:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a356c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3570:	bf3e      	ittt	cc
 80a3572:	0049      	lslcc	r1, r1, #1
 80a3574:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3578:	005b      	lslcc	r3, r3, #1
 80a357a:	ea40 0001 	orr.w	r0, r0, r1
 80a357e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3582:	2afd      	cmp	r2, #253	; 0xfd
 80a3584:	d81d      	bhi.n	80a35c2 <__aeabi_fmul+0x92>
 80a3586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a358a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a358e:	bf08      	it	eq
 80a3590:	f020 0001 	biceq.w	r0, r0, #1
 80a3594:	4770      	bx	lr
 80a3596:	f090 0f00 	teq	r0, #0
 80a359a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a359e:	bf08      	it	eq
 80a35a0:	0249      	lsleq	r1, r1, #9
 80a35a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a35a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a35aa:	3a7f      	subs	r2, #127	; 0x7f
 80a35ac:	bfc2      	ittt	gt
 80a35ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a35b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a35b6:	4770      	bxgt	lr
 80a35b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a35bc:	f04f 0300 	mov.w	r3, #0
 80a35c0:	3a01      	subs	r2, #1
 80a35c2:	dc5d      	bgt.n	80a3680 <__aeabi_fmul+0x150>
 80a35c4:	f112 0f19 	cmn.w	r2, #25
 80a35c8:	bfdc      	itt	le
 80a35ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a35ce:	4770      	bxle	lr
 80a35d0:	f1c2 0200 	rsb	r2, r2, #0
 80a35d4:	0041      	lsls	r1, r0, #1
 80a35d6:	fa21 f102 	lsr.w	r1, r1, r2
 80a35da:	f1c2 0220 	rsb	r2, r2, #32
 80a35de:	fa00 fc02 	lsl.w	ip, r0, r2
 80a35e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a35e6:	f140 0000 	adc.w	r0, r0, #0
 80a35ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a35ee:	bf08      	it	eq
 80a35f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a35f4:	4770      	bx	lr
 80a35f6:	f092 0f00 	teq	r2, #0
 80a35fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a35fe:	bf02      	ittt	eq
 80a3600:	0040      	lsleq	r0, r0, #1
 80a3602:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3606:	3a01      	subeq	r2, #1
 80a3608:	d0f9      	beq.n	80a35fe <__aeabi_fmul+0xce>
 80a360a:	ea40 000c 	orr.w	r0, r0, ip
 80a360e:	f093 0f00 	teq	r3, #0
 80a3612:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3616:	bf02      	ittt	eq
 80a3618:	0049      	lsleq	r1, r1, #1
 80a361a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a361e:	3b01      	subeq	r3, #1
 80a3620:	d0f9      	beq.n	80a3616 <__aeabi_fmul+0xe6>
 80a3622:	ea41 010c 	orr.w	r1, r1, ip
 80a3626:	e78f      	b.n	80a3548 <__aeabi_fmul+0x18>
 80a3628:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a362c:	ea92 0f0c 	teq	r2, ip
 80a3630:	bf18      	it	ne
 80a3632:	ea93 0f0c 	teqne	r3, ip
 80a3636:	d00a      	beq.n	80a364e <__aeabi_fmul+0x11e>
 80a3638:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a363c:	bf18      	it	ne
 80a363e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3642:	d1d8      	bne.n	80a35f6 <__aeabi_fmul+0xc6>
 80a3644:	ea80 0001 	eor.w	r0, r0, r1
 80a3648:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a364c:	4770      	bx	lr
 80a364e:	f090 0f00 	teq	r0, #0
 80a3652:	bf17      	itett	ne
 80a3654:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3658:	4608      	moveq	r0, r1
 80a365a:	f091 0f00 	teqne	r1, #0
 80a365e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3662:	d014      	beq.n	80a368e <__aeabi_fmul+0x15e>
 80a3664:	ea92 0f0c 	teq	r2, ip
 80a3668:	d101      	bne.n	80a366e <__aeabi_fmul+0x13e>
 80a366a:	0242      	lsls	r2, r0, #9
 80a366c:	d10f      	bne.n	80a368e <__aeabi_fmul+0x15e>
 80a366e:	ea93 0f0c 	teq	r3, ip
 80a3672:	d103      	bne.n	80a367c <__aeabi_fmul+0x14c>
 80a3674:	024b      	lsls	r3, r1, #9
 80a3676:	bf18      	it	ne
 80a3678:	4608      	movne	r0, r1
 80a367a:	d108      	bne.n	80a368e <__aeabi_fmul+0x15e>
 80a367c:	ea80 0001 	eor.w	r0, r0, r1
 80a3680:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3684:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3688:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a368c:	4770      	bx	lr
 80a368e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3692:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3696:	4770      	bx	lr

080a3698 <__aeabi_fdiv>:
 80a3698:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a369c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a36a0:	bf1e      	ittt	ne
 80a36a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a36a6:	ea92 0f0c 	teqne	r2, ip
 80a36aa:	ea93 0f0c 	teqne	r3, ip
 80a36ae:	d069      	beq.n	80a3784 <__aeabi_fdiv+0xec>
 80a36b0:	eba2 0203 	sub.w	r2, r2, r3
 80a36b4:	ea80 0c01 	eor.w	ip, r0, r1
 80a36b8:	0249      	lsls	r1, r1, #9
 80a36ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a36be:	d037      	beq.n	80a3730 <__aeabi_fdiv+0x98>
 80a36c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a36c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a36c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a36cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a36d0:	428b      	cmp	r3, r1
 80a36d2:	bf38      	it	cc
 80a36d4:	005b      	lslcc	r3, r3, #1
 80a36d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a36da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a36de:	428b      	cmp	r3, r1
 80a36e0:	bf24      	itt	cs
 80a36e2:	1a5b      	subcs	r3, r3, r1
 80a36e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a36e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a36ec:	bf24      	itt	cs
 80a36ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a36f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a36f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a36fa:	bf24      	itt	cs
 80a36fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3700:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3704:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3708:	bf24      	itt	cs
 80a370a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a370e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3712:	011b      	lsls	r3, r3, #4
 80a3714:	bf18      	it	ne
 80a3716:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a371a:	d1e0      	bne.n	80a36de <__aeabi_fdiv+0x46>
 80a371c:	2afd      	cmp	r2, #253	; 0xfd
 80a371e:	f63f af50 	bhi.w	80a35c2 <__aeabi_fmul+0x92>
 80a3722:	428b      	cmp	r3, r1
 80a3724:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3728:	bf08      	it	eq
 80a372a:	f020 0001 	biceq.w	r0, r0, #1
 80a372e:	4770      	bx	lr
 80a3730:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3734:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3738:	327f      	adds	r2, #127	; 0x7f
 80a373a:	bfc2      	ittt	gt
 80a373c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3740:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3744:	4770      	bxgt	lr
 80a3746:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a374a:	f04f 0300 	mov.w	r3, #0
 80a374e:	3a01      	subs	r2, #1
 80a3750:	e737      	b.n	80a35c2 <__aeabi_fmul+0x92>
 80a3752:	f092 0f00 	teq	r2, #0
 80a3756:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a375a:	bf02      	ittt	eq
 80a375c:	0040      	lsleq	r0, r0, #1
 80a375e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3762:	3a01      	subeq	r2, #1
 80a3764:	d0f9      	beq.n	80a375a <__aeabi_fdiv+0xc2>
 80a3766:	ea40 000c 	orr.w	r0, r0, ip
 80a376a:	f093 0f00 	teq	r3, #0
 80a376e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3772:	bf02      	ittt	eq
 80a3774:	0049      	lsleq	r1, r1, #1
 80a3776:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a377a:	3b01      	subeq	r3, #1
 80a377c:	d0f9      	beq.n	80a3772 <__aeabi_fdiv+0xda>
 80a377e:	ea41 010c 	orr.w	r1, r1, ip
 80a3782:	e795      	b.n	80a36b0 <__aeabi_fdiv+0x18>
 80a3784:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3788:	ea92 0f0c 	teq	r2, ip
 80a378c:	d108      	bne.n	80a37a0 <__aeabi_fdiv+0x108>
 80a378e:	0242      	lsls	r2, r0, #9
 80a3790:	f47f af7d 	bne.w	80a368e <__aeabi_fmul+0x15e>
 80a3794:	ea93 0f0c 	teq	r3, ip
 80a3798:	f47f af70 	bne.w	80a367c <__aeabi_fmul+0x14c>
 80a379c:	4608      	mov	r0, r1
 80a379e:	e776      	b.n	80a368e <__aeabi_fmul+0x15e>
 80a37a0:	ea93 0f0c 	teq	r3, ip
 80a37a4:	d104      	bne.n	80a37b0 <__aeabi_fdiv+0x118>
 80a37a6:	024b      	lsls	r3, r1, #9
 80a37a8:	f43f af4c 	beq.w	80a3644 <__aeabi_fmul+0x114>
 80a37ac:	4608      	mov	r0, r1
 80a37ae:	e76e      	b.n	80a368e <__aeabi_fmul+0x15e>
 80a37b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a37b4:	bf18      	it	ne
 80a37b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a37ba:	d1ca      	bne.n	80a3752 <__aeabi_fdiv+0xba>
 80a37bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a37c0:	f47f af5c 	bne.w	80a367c <__aeabi_fmul+0x14c>
 80a37c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a37c8:	f47f af3c 	bne.w	80a3644 <__aeabi_fmul+0x114>
 80a37cc:	e75f      	b.n	80a368e <__aeabi_fmul+0x15e>
 80a37ce:	bf00      	nop

080a37d0 <__gesf2>:
 80a37d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a37d4:	e006      	b.n	80a37e4 <__cmpsf2+0x4>
 80a37d6:	bf00      	nop

080a37d8 <__lesf2>:
 80a37d8:	f04f 0c01 	mov.w	ip, #1
 80a37dc:	e002      	b.n	80a37e4 <__cmpsf2+0x4>
 80a37de:	bf00      	nop

080a37e0 <__cmpsf2>:
 80a37e0:	f04f 0c01 	mov.w	ip, #1
 80a37e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a37e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a37ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a37f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a37f4:	bf18      	it	ne
 80a37f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a37fa:	d011      	beq.n	80a3820 <__cmpsf2+0x40>
 80a37fc:	b001      	add	sp, #4
 80a37fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3802:	bf18      	it	ne
 80a3804:	ea90 0f01 	teqne	r0, r1
 80a3808:	bf58      	it	pl
 80a380a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a380e:	bf88      	it	hi
 80a3810:	17c8      	asrhi	r0, r1, #31
 80a3812:	bf38      	it	cc
 80a3814:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3818:	bf18      	it	ne
 80a381a:	f040 0001 	orrne.w	r0, r0, #1
 80a381e:	4770      	bx	lr
 80a3820:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3824:	d102      	bne.n	80a382c <__cmpsf2+0x4c>
 80a3826:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a382a:	d105      	bne.n	80a3838 <__cmpsf2+0x58>
 80a382c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3830:	d1e4      	bne.n	80a37fc <__cmpsf2+0x1c>
 80a3832:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3836:	d0e1      	beq.n	80a37fc <__cmpsf2+0x1c>
 80a3838:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a383c:	4770      	bx	lr
 80a383e:	bf00      	nop

080a3840 <__aeabi_cfrcmple>:
 80a3840:	4684      	mov	ip, r0
 80a3842:	4608      	mov	r0, r1
 80a3844:	4661      	mov	r1, ip
 80a3846:	e7ff      	b.n	80a3848 <__aeabi_cfcmpeq>

080a3848 <__aeabi_cfcmpeq>:
 80a3848:	b50f      	push	{r0, r1, r2, r3, lr}
 80a384a:	f7ff ffc9 	bl	80a37e0 <__cmpsf2>
 80a384e:	2800      	cmp	r0, #0
 80a3850:	bf48      	it	mi
 80a3852:	f110 0f00 	cmnmi.w	r0, #0
 80a3856:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3858 <__aeabi_fcmpeq>:
 80a3858:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a385c:	f7ff fff4 	bl	80a3848 <__aeabi_cfcmpeq>
 80a3860:	bf0c      	ite	eq
 80a3862:	2001      	moveq	r0, #1
 80a3864:	2000      	movne	r0, #0
 80a3866:	f85d fb08 	ldr.w	pc, [sp], #8
 80a386a:	bf00      	nop

080a386c <__aeabi_fcmplt>:
 80a386c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3870:	f7ff ffea 	bl	80a3848 <__aeabi_cfcmpeq>
 80a3874:	bf34      	ite	cc
 80a3876:	2001      	movcc	r0, #1
 80a3878:	2000      	movcs	r0, #0
 80a387a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a387e:	bf00      	nop

080a3880 <__aeabi_fcmple>:
 80a3880:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3884:	f7ff ffe0 	bl	80a3848 <__aeabi_cfcmpeq>
 80a3888:	bf94      	ite	ls
 80a388a:	2001      	movls	r0, #1
 80a388c:	2000      	movhi	r0, #0
 80a388e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3892:	bf00      	nop

080a3894 <__aeabi_fcmpge>:
 80a3894:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3898:	f7ff ffd2 	bl	80a3840 <__aeabi_cfrcmple>
 80a389c:	bf94      	ite	ls
 80a389e:	2001      	movls	r0, #1
 80a38a0:	2000      	movhi	r0, #0
 80a38a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a38a6:	bf00      	nop

080a38a8 <__aeabi_fcmpgt>:
 80a38a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a38ac:	f7ff ffc8 	bl	80a3840 <__aeabi_cfrcmple>
 80a38b0:	bf34      	ite	cc
 80a38b2:	2001      	movcc	r0, #1
 80a38b4:	2000      	movcs	r0, #0
 80a38b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a38ba:	bf00      	nop

080a38bc <__aeabi_f2iz>:
 80a38bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a38c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a38c4:	d30f      	bcc.n	80a38e6 <__aeabi_f2iz+0x2a>
 80a38c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a38ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a38ce:	d90d      	bls.n	80a38ec <__aeabi_f2iz+0x30>
 80a38d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a38d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a38d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a38dc:	fa23 f002 	lsr.w	r0, r3, r2
 80a38e0:	bf18      	it	ne
 80a38e2:	4240      	negne	r0, r0
 80a38e4:	4770      	bx	lr
 80a38e6:	f04f 0000 	mov.w	r0, #0
 80a38ea:	4770      	bx	lr
 80a38ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a38f0:	d101      	bne.n	80a38f6 <__aeabi_f2iz+0x3a>
 80a38f2:	0242      	lsls	r2, r0, #9
 80a38f4:	d105      	bne.n	80a3902 <__aeabi_f2iz+0x46>
 80a38f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a38fa:	bf08      	it	eq
 80a38fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3900:	4770      	bx	lr
 80a3902:	f04f 0000 	mov.w	r0, #0
 80a3906:	4770      	bx	lr

080a3908 <__cxa_atexit>:
 80a3908:	b510      	push	{r4, lr}
 80a390a:	4c05      	ldr	r4, [pc, #20]	; (80a3920 <__cxa_atexit+0x18>)
 80a390c:	4613      	mov	r3, r2
 80a390e:	b12c      	cbz	r4, 80a391c <__cxa_atexit+0x14>
 80a3910:	460a      	mov	r2, r1
 80a3912:	4601      	mov	r1, r0
 80a3914:	2002      	movs	r0, #2
 80a3916:	f3af 8000 	nop.w
 80a391a:	bd10      	pop	{r4, pc}
 80a391c:	4620      	mov	r0, r4
 80a391e:	bd10      	pop	{r4, pc}
 80a3920:	00000000 	.word	0x00000000

080a3924 <memcpy>:
 80a3924:	b510      	push	{r4, lr}
 80a3926:	1e43      	subs	r3, r0, #1
 80a3928:	440a      	add	r2, r1
 80a392a:	4291      	cmp	r1, r2
 80a392c:	d004      	beq.n	80a3938 <memcpy+0x14>
 80a392e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3932:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3936:	e7f8      	b.n	80a392a <memcpy+0x6>
 80a3938:	bd10      	pop	{r4, pc}

080a393a <memset>:
 80a393a:	4603      	mov	r3, r0
 80a393c:	4402      	add	r2, r0
 80a393e:	4293      	cmp	r3, r2
 80a3940:	d002      	beq.n	80a3948 <memset+0xe>
 80a3942:	f803 1b01 	strb.w	r1, [r3], #1
 80a3946:	e7fa      	b.n	80a393e <memset+0x4>
 80a3948:	4770      	bx	lr
	...

080a394c <srand>:
 80a394c:	b538      	push	{r3, r4, r5, lr}
 80a394e:	4b12      	ldr	r3, [pc, #72]	; (80a3998 <srand+0x4c>)
 80a3950:	4605      	mov	r5, r0
 80a3952:	681c      	ldr	r4, [r3, #0]
 80a3954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3956:	b9d3      	cbnz	r3, 80a398e <srand+0x42>
 80a3958:	2018      	movs	r0, #24
 80a395a:	f7fe f835 	bl	80a19c8 <malloc>
 80a395e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3962:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3964:	8003      	strh	r3, [r0, #0]
 80a3966:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a396a:	8043      	strh	r3, [r0, #2]
 80a396c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3970:	8083      	strh	r3, [r0, #4]
 80a3972:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3976:	80c3      	strh	r3, [r0, #6]
 80a3978:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a397c:	8103      	strh	r3, [r0, #8]
 80a397e:	2305      	movs	r3, #5
 80a3980:	8143      	strh	r3, [r0, #10]
 80a3982:	230b      	movs	r3, #11
 80a3984:	8183      	strh	r3, [r0, #12]
 80a3986:	2201      	movs	r2, #1
 80a3988:	2300      	movs	r3, #0
 80a398a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a398e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3990:	2200      	movs	r2, #0
 80a3992:	611d      	str	r5, [r3, #16]
 80a3994:	615a      	str	r2, [r3, #20]
 80a3996:	bd38      	pop	{r3, r4, r5, pc}
 80a3998:	2000038c 	.word	0x2000038c

080a399c <strcmp>:
 80a399c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a39a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a39a4:	2a01      	cmp	r2, #1
 80a39a6:	bf28      	it	cs
 80a39a8:	429a      	cmpcs	r2, r3
 80a39aa:	d0f7      	beq.n	80a399c <strcmp>
 80a39ac:	1ad0      	subs	r0, r2, r3
 80a39ae:	4770      	bx	lr

080a39b0 <strcpy>:
 80a39b0:	4603      	mov	r3, r0
 80a39b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a39b6:	f803 2b01 	strb.w	r2, [r3], #1
 80a39ba:	2a00      	cmp	r2, #0
 80a39bc:	d1f9      	bne.n	80a39b2 <strcpy+0x2>
 80a39be:	4770      	bx	lr

080a39c0 <strlen>:
 80a39c0:	4603      	mov	r3, r0
 80a39c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a39c6:	2a00      	cmp	r2, #0
 80a39c8:	d1fb      	bne.n	80a39c2 <strlen+0x2>
 80a39ca:	1a18      	subs	r0, r3, r0
 80a39cc:	3801      	subs	r0, #1
 80a39ce:	4770      	bx	lr

080a39d0 <strncpy>:
 80a39d0:	4603      	mov	r3, r0
 80a39d2:	b510      	push	{r4, lr}
 80a39d4:	b142      	cbz	r2, 80a39e8 <strncpy+0x18>
 80a39d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a39da:	3a01      	subs	r2, #1
 80a39dc:	f803 4b01 	strb.w	r4, [r3], #1
 80a39e0:	2c00      	cmp	r4, #0
 80a39e2:	d1f7      	bne.n	80a39d4 <strncpy+0x4>
 80a39e4:	441a      	add	r2, r3
 80a39e6:	e000      	b.n	80a39ea <strncpy+0x1a>
 80a39e8:	bd10      	pop	{r4, pc}
 80a39ea:	4293      	cmp	r3, r2
 80a39ec:	d002      	beq.n	80a39f4 <strncpy+0x24>
 80a39ee:	f803 4b01 	strb.w	r4, [r3], #1
 80a39f2:	e7fa      	b.n	80a39ea <strncpy+0x1a>
 80a39f4:	bd10      	pop	{r4, pc}

080a39f6 <link_code_end>:
	...

080a39f8 <dynalib_user>:
 80a39f8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3a08:	0000 0000 5846 5341 3132 3030 4332 0000     ....FXAS21002C..

080a3a18 <_ZTV19Adafruit_FXAS21002C>:
	...
 80a3a20:	00b5 080a 0265 080a 00b3 080a 00b9 080a     ....e...........
 80a3a30:	0271 080a 5846 534f 3738 3030 0000 0000     q...FXOS8700....

080a3a40 <_ZTV17Adafruit_FXOS8700>:
	...
 80a3a48:	03c1 080a 03c3 080a 00b3 080a 0711 080a     ................
 80a3a58:	07e5 080a 414d 5454 4820 4c41 0020 414d     ....MATT HAL .MA
 80a3a68:	5454 4820 4c41 3220 4600 4f58 3853 3037     TT HAL 2.FXOS870
 80a3a78:	2030 6554 7473 4f00 6f6f 7370 202c 6f6e     0 Test.Ooops, no
 80a3a88:	4620 4f58 3853 3037 2030 6564 6574 7463      FXOS8700 detect
 80a3a98:	6465 2e20 2e2e 4320 6568 6b63 7920 756f     ed ... Check you
 80a3aa8:	2072 6977 6972 676e 0021 7947 6f72 6373     r wiring!.Gyrosc
 80a3ab8:	706f 2065 6554 7473 4f00 6f6f 7370 202c     ope Test.Ooops, 
 80a3ac8:	6f6e 4620 4158 3253 3031 3230 2043 6564     no FXAS21002C de
 80a3ad8:	6574 7463 6465 2e20 2e2e 4320 6568 6b63     tected ... Check
 80a3ae8:	7920 756f 2072 6977 6972 676e 0021 4e49      your wiring!.IN
 80a3af8:	5449 2f00 6572 3376 6100 2f00 6572 3376     IT./rev3.a./rev3
 80a3b08:	0042 722f 7665 0032 722f 7665 4232 6c00     B./rev2./rev2B.l
 80a3b18:	6f6f 3a70 0020 6964 6967 6174 576c 6972     oop: .digitalWri
 80a3b28:	6574 6d28 6e79 4f74 656e 6f50 6577 5072     te(myntOnePowerP
 80a3b38:	6e69 202c 4f4c 3b57 6500 646e 6c00 6f6f     in, LOW;.end.loo
 80a3b48:	3270 203a 6400 6769 7469 6c61 7257 7469     p2: .digitalWrit
 80a3b58:	2865 796d 746e 7754 506f 776f 7265 6950     e(myntTwoPowerPi
 80a3b68:	2c6e 4c20 574f 003b 6964 6967 6174 576c     n, LOW;.digitalW
 80a3b78:	6972 6574 6d28 6e79 4f74 656e 6f50 6577     rite(myntOnePowe
 80a3b88:	5072 6e69 202c 4948 4847 003b 6420 6769     rPin, HIGH;. dig
 80a3b98:	7469 6c61 7257 7469 2865 796d 746e 6e4f     italWrite(myntOn
 80a3ba8:	5065 756c 5073 6e69 202c 4f4c 3b57 6400     ePlusPin, LOW;.d
 80a3bb8:	6769 7469 6c61 7257 7469 2865 796d 746e     igitalWrite(mynt
 80a3bc8:	6e4f 5065 756c 5073 6e69 202c 4948 4847     OnePlusPin, HIGH
 80a3bd8:	6400 6769 7469 6c61 7257 7469 2865 796d     .digitalWrite(my
 80a3be8:	746e 6e4f 5065 776f 7265 6950 2c6e 4820     ntOnePowerPin, H
 80a3bf8:	4749 0048 6964 6967 6174 576c 6972 6574     IGH.digitalWrite
 80a3c08:	6d28 6e79 5474 6f77 6f50 6577 5072 6e69     (myntTwoPowerPin
 80a3c18:	202c 4948 4847 003b 6420 6769 7469 6c61     , HIGH;. digital
 80a3c28:	7257 7469 2865 796d 746e 7754 506f 756c     Write(myntTwoPlu
 80a3c38:	5073 6e69 202c 4f4c 3b57 6400 6769 7469     sPin, LOW;.digit
 80a3c48:	6c61 7257 7469 2865 796d 746e 7754 506f     alWrite(myntTwoP
 80a3c58:	756c 5073 6e69 202c 4948 4847 6400 6769     lusPin, HIGH.dig
 80a3c68:	7469 6c61 7257 7469 2865 796d 746e 7754     italWrite(myntTw
 80a3c78:	506f 776f 7265 6950 2c6e 4820 4749 0048     oPowerPin, HIGH.
 80a3c88:	3a20 0020 2d0a 2d2d 002d 0000                : ..----...

080a3c94 <_ZTV7TwoWire>:
	...
 80a3c9c:	1a11 080a 1a5b 080a 1a33 080a 1a13 080a     ....[...3.......
 80a3cac:	1a3b 080a 1a43 080a 1a4b 080a 1a53 080a     ;...C...K...S...

080a3cbc <_ZTV9IPAddress>:
	...
 80a3cc4:	1ad5 080a 07f9 080a 0855 080a 0066 6e6c     ........U...f.ln
 80a3cd4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a3ce4:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a3cf4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a3d04:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a3d14:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a3d24:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a3d34:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a3d44:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a3d54:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a3d64:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a3d74:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a3d84:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a3d94:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3da4:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3db4 <_ZTV8SPIClass>:
	...
 80a3dbc:	1ce1 080a 1ce3 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a3dcc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3ddc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3dec:	0000 0000                                   ....

080a3df0 <_ZTV3UDP>:
	...
 80a3df8:	0835 080a 0861 080a 1ecd 080a 1fef 080a     5...a...........
 80a3e08:	1ec5 080a 1ee3 080a 1f01 080a 1f1b 080a     ................
 80a3e18:	1f3d 080a 1f89 080a 1fab 080a 2149 080a     =...........I!..
 80a3e28:	2055 080a 1eb5 080a 2257 080a 20c1 080a     U ......W"... ..
 80a3e38:	2181 080a 2285 080a 2019 080a 1ebb 080a     .!..."... ......
 80a3e48:	2129 080a 1ec1 080a 1f1d 080a fff0 ffff     )!..............
 80a3e58:	0000 0000 1f35 080a                         ....5...

080a3e60 <_ZTV11USARTSerial>:
	...
 80a3e68:	22bd 080a 22e1 080a 22ed 080a 1ba5 080a     ."..."..."......
 80a3e78:	22c9 080a 22d5 080a 22cf 080a 22db 080a     ."..."..."..."..
 80a3e88:	22bf 080a 22c3 080a                         ."..."..

080a3e90 <_ZTV9USBSerial>:
	...
 80a3e98:	2395 080a 23d9 080a 23b3 080a 1ba5 080a     .#...#...#......
 80a3ea8:	23ad 080a 2397 080a 239f 080a 23d3 080a     .#...#...#...#..
 80a3eb8:	23a7 080a 2391 080a                         .#...#..

080a3ec0 <_ZTVN5spark9WiFiClassE>:
	...
 80a3ec8:	2513 080a                                   .%..

080a3ecc <_ZN5spark7NetworkE>:
 80a3ecc:	09cc 2000                                   ... 

080a3ed0 <__sf_fake_stdin>:
	...

080a3ef0 <__sf_fake_stdout>:
	...

080a3f10 <__sf_fake_stderr>:
	...

080a3f30 <link_const_variable_data_end>:
 80a3f30:	080a03bd 	.word	0x080a03bd
 80a3f34:	080a07f5 	.word	0x080a07f5
 80a3f38:	080a1181 	.word	0x080a1181
 80a3f3c:	080a1629 	.word	0x080a1629
 80a3f40:	080a1b95 	.word	0x080a1b95
 80a3f44:	080a1cc5 	.word	0x080a1cc5
 80a3f48:	080a1e61 	.word	0x080a1e61
 80a3f4c:	080a1ea1 	.word	0x080a1ea1
 80a3f50:	080a251d 	.word	0x080a251d
 80a3f54:	080a2781 	.word	0x080a2781
 80a3f58:	080a27b1 	.word	0x080a27b1
 80a3f5c:	080a2801 	.word	0x080a2801
 80a3f60:	080a28c5 	.word	0x080a28c5
 80a3f64:	080a2949 	.word	0x080a2949
 80a3f68:	080a29cd 	.word	0x080a29cd

080a3f6c <link_constructors_end>:
 80a3f6c:	00000000 	.word	0x00000000
