

// This #include statement was automatically added by the Particle IDE.
#include "SparkIntervalTimer.h"

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_Sensor.h>

// This #include statement was automatically added by the Particle IDE.
#include "Adafruit_FXAS21002C.h"

// This #include statement was automatically added by the Particle IDE.
#include "Adafruit_FXOS8700.h"




/* Assign a unique ID to this sensor at the same time */
Adafruit_FXOS8700 accelmag = Adafruit_FXOS8700(0x8700A, 0x8700B);

/* Assign a unique ID to this sensor at the same time */
Adafruit_FXAS21002C gyro = Adafruit_FXAS21002C(0x0021002C);

  // publishme.ino -- Spark Publishing Example 
unsigned long lastTime = 0UL;
char publishString[128];
char publishString2[128];
float magXtemp;


//---HEARTBEAT (VARIABLES)-----------------------------------

// void interruptSetup(void);
// void serialOutput();
// void serialOutputWhenBeatHappens();
// void sendDataToSerial(char symbol, int data );
// void ledFadeToBeat();
// void arduinoSerialMonitorVisual(char symbol, int data );

// extern int pulsePin;
// // extern int blinkPin;
// extern volatile int BPM;;
// extern volatile int Signal;;
// extern volatile int IBI;
// extern volatile boolean Pulse;
// extern volatile boolean QS;
// const int numReadings = 10;
// int readings[numReadings];      // the readings from the analog input
// int readIndex = 0;              // the index of the current reading
// int total = 0;                  // the running total
// int average = 0; 
// int bpmm;
// // extern int fadePin;
// extern int fadeRate;

// SYSTEM_THREAD(ENABLED);
// SYSTEM_MODE(SEMI_AUTOMATIC);

// boolean connectToCloud = false;

//---MYNT (VARIABLES)-----------------------------------


int myntOnePowerPin = D5;
int myntOnePlusPin = D6;
int myntOneMinusPin = D7;

int myntTwoPowerPin = D2;
int myntTwoPlusPin = D3;
int myntTwoMinusPin = D4;

int flexSensePin1 = A1;

int flexValue1;

int flexSensePin2 = A0;

int flexValue2;

int val = 0; //variable for reading the pushbutton pin status
int temp = 0;
int val2 = 0; //variable for reading the pushbutton pin status
int temp2 = 0;

bool sendLedVal = false; //variable for keeping the state of the local pushbutton dependent LED (D2)
bool sendLedVal2 = false; //variable for keeping the state of the local pushbutton dependent LED (D2)
// int sendLedPin = D3; //choose the pin for the send (local) LED





//---SENSOR INFO (FUNCTION)-----------------------------------

void displaySensorDetails(void)
{
  sensor_t accel, mag;
  accelmag.getSensor(&accel, &mag);
  Serial.println("------------------------------------");
  Serial.println("ACCELEROMETER");
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(accel.name);
  Serial.print  ("Driver Ver:   "); Serial.println(accel.version);
  Serial.print  ("Unique ID:    0x"); Serial.println(accel.sensor_id, HEX);
  Serial.print  ("Min Delay:    "); Serial.print(accel.min_delay); Serial.println(" s");
  Serial.print  ("Max Value:    "); Serial.print(accel.max_value, 4); Serial.println(" m/s^2");
  Serial.print  ("Min Value:    "); Serial.print(accel.min_value, 4); Serial.println(" m/s^2");
  Serial.print  ("Resolution:   "); Serial.print(accel.resolution, 8); Serial.println(" m/s^2");
  Serial.println("------------------------------------");
  Serial.println("");
  Serial.println("------------------------------------");
  Serial.println("MAGNETOMETER");
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(mag.name);
  Serial.print  ("Driver Ver:   "); Serial.println(mag.version);
  Serial.print  ("Unique ID:    0x"); Serial.println(mag.sensor_id, HEX);
  Serial.print  ("Min Delay:    "); Serial.print(accel.min_delay); Serial.println(" s");
  Serial.print  ("Max Value:    "); Serial.print(mag.max_value); Serial.println(" uT");
  Serial.print  ("Min Value:    "); Serial.print(mag.min_value); Serial.println(" uT");
  Serial.print  ("Resolution:   "); Serial.print(mag.resolution); Serial.println(" uT");
  Serial.println("------------------------------------");
  Serial.println("");
    sensor_t sensor;
  gyro.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    0x"); Serial.println(sensor.sensor_id, HEX);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" rad/s");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" rad/s");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" rad/s");
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}

//---HANDLER-----------------------------------

void myntPowerToggle(const char *toggle, const char *onOff); 



//---SETUP-----------------------------------

void setup(void)
{
    
     
//   Serial.begin(9600);

  /* Wait for the Serial Monitor */
  while (!Serial) {
    delay(1);
  }

  Serial.println("FXOS8700 Test"); Serial.println("");

  /* Initialise the sensor */
  if(!accelmag.begin(ACCEL_RANGE_4G))
  {
    /* There was a problem detecting the FXOS8700 ... check your connections */
    Serial.println("Ooops, no FXOS8700 detected ... Check your wiring!");
    while(1);
  }


    Serial.println("Gyroscope Test"); Serial.println("");

  /* Initialise the sensor */
  if(!gyro.begin())
  {
    /* There was a problem detecting the FXAS21002C ... check your connections */
    Serial.println("Ooops, no FXAS21002C detected ... Check your wiring!");
    while(1);
  }

  /* Display some basic information on this sensor */
//   displaySensorDetails();



//---HEARTBEAT (SETUP)-----------------------------------


// 	Spark.variable("getpos", &bpmm, INT);
// 	pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!
// 	pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!
// 	Serial.begin(115200);             // we agree to talk fast!
// 	interruptSetup();                 // sets up to read Pulse Sensor signal every 2mS
// 	for (int thisReading = 0; thisReading < numReadings; thisReading++) {
//     readings[thisReading] = 0;
//   }
  
  
  //---MYNT (SETUP)-----------------------------------


pinMode(myntOnePowerPin, OUTPUT);
pinMode(myntOnePlusPin, OUTPUT);
pinMode(myntOneMinusPin, OUTPUT);
pinMode(myntTwoPowerPin, OUTPUT);
pinMode(myntTwoPlusPin, OUTPUT);
pinMode(myntTwoMinusPin, OUTPUT);

digitalWrite(myntOnePowerPin, HIGH);
digitalWrite(myntOnePlusPin, HIGH);
digitalWrite(myntOneMinusPin, HIGH);
digitalWrite(myntTwoPowerPin, HIGH);
digitalWrite(myntTwoPlusPin, HIGH);
digitalWrite(myntTwoMinusPin, HIGH);


// Particle.publish("Core1Toggle", "State", 0, PUBLIC); //Set up Spark.publish() so that the state of the local LED is published to the Spark Cloud PRIVATELY
// Particle.subscribe("Core2Toggle", myntPower, ALL_DEVICES); //Set up Spark.subscribe() so that the state of Core1's Led is recorded and handled by ledTwoToggle
  
    Particle.publish("Core2Toggle", "State", 0, PUBLIC); //Set up Spark.publish() so that the state of the local LED is published to the Spark Cloud PRIVATELY
    Particle.publish("Core2ToggleB", "State", 0, PUBLIC); //Set up Spark.publish() so that the state of the local LED is published to the Spark Cloud PRIVATELY
    Particle.subscribe("Core1Toggle", myntPowerToggle, ALL_DEVICES);
      Particle.subscribe("Core1ToggleB", myntPowerToggleB, ALL_DEVICES);
    
}


//---LOOP-----------------------------------

void loop(void)
{

  //init sensor events  
  sensors_event_t aevent, mevent;

  /* Get a new sensor event */
  accelmag.getEvent(&aevent, &mevent);
  
/* Get a new sensor event */
  sensors_event_t event;
  gyro.getEvent(&event);
  
  
  
  
  //---SERIAL INFO-----------------------------------

  /* Display the accel results (acceleration is measured in m/s^2) */
//  Serial.print("A ");
//  Serial.print("X: "); 
//   Serial.print(aevent.acceleration.x, 4); Serial.print("  ");
// //  Serial.print("Y: "); 
//   Serial.print(aevent.acceleration.y, 4); Serial.print("  ");
// //  Serial.print("Z: "); 
//   Serial.print(aevent.acceleration.z, 4); Serial.print("  ");
//  Serial.println("m/s^2");

  /* Display the mag results (mag data is in uTesla) */
//  Serial.print("M ");
//  Serial.print("X: "); 
  Serial.print(mevent.magnetic.x +100, 1); Serial.print("  ");
//  Serial.print("Y: "); 
  Serial.print(mevent.magnetic.y + 100, 1); Serial.print("  ");
//  Serial.print("Z: "); 
  Serial.print(mevent.magnetic.z + 100, 1); Serial.print("  ");
//  Serial.println("uT");

 Serial.println("");


//   /* Display the results (speed is measured in rad/s) */
//  Serial.print("X: "); 
//   Serial.print(event.gyro.x); Serial.print("  ");
// //  Serial.print("Y: ");
//   Serial.print(event.gyro.y); Serial.print("  ");
// //  Serial.print("Z: "); 
//   Serial.print(event.gyro.z); Serial.print("  ");
// //  Serial.println("rad/s ");
// Serial.println("");
//   delay(1000);


  //---OLD SEND-----------------------------------

    // unsigned long now = millis();
    //Every 15 seconds publish 
    // if (now-lastTime>250UL) {
        // lastTime = now;
        // now is in milliseconds
        // unsigned accX = (aevent.acceleration.x * 1000);
    //     unsigned accY = aevent.acceleration.y;
    //   float accZ = (aevent.acceleration.z);
        
        float magX = (mevent.magnetic.x + 100);
        float magY = (mevent.magnetic.y  + 100);
        float magZ = (mevent.magnetic.z  + 100);
        
        //  unsigned gyrX = event.gyro.x;
        // unsigned gyrY = event.gyro.y;
        // unsigned gyrZ = event.gyro.z;
        
        if((magX > (magXtemp + 2)) || (magX < (magXtemp - 2))){ 
    
        // sprintf(publishString,"%0.1f:%0.1f:%0.1f", magX,magY,magZ);
        sprintf(publishString,"%0.1f", magX);

        magXtemp = magX;

        delay(420);
        // sprintf(publishString, "%f", accZ);
        Spark.publish("UptimeA",publishString);
        }
    // }
    
    
     //---HEARTBEAT (LOOP)-----------------------------------
    
//      // subtract the last reading:
//   total = total - readings[readIndex];
//   // read from the sensor:
//   readings[readIndex] = BPM;
//   // add the reading to the total:
//   total = total + readings[readIndex];
//   // advance to the next position in the array:
//   readIndex = readIndex + 1;

//   // if we're at the end of the array...
//   if (readIndex >= numReadings) {
//     // ...wrap around to the beginning:
//     readIndex = 0;
//   }

//   // calculate the average:
//   average = total / numReadings;
//   // send it to the computer as ASCII digits
//     bpmm = average;
//     // Serial.println(BPM);
//     // Serial.println(bpmm);
//         sprintf(publishString2,"%d", bpmm);
//           Spark.publish("HB",publishString2);
//             delay(420);
    
    
//---MYNT (LOOP)-----------------------------------


    val = analogRead(flexSensePin1); //read value of pushbutton

        // delay(420);
        // sprintf(publishString, "%f", accZ);
       
   
     if((val < temp-50 ) || (val > temp +50) ) {
        //   sprintf(publishString2,"%d", val);
        //   Spark.publish("Flex",publishString2);
        //if clause activated if pushbutton pressed and thus inputPin reads LOW
        // Serial.println("press");
        sendLedVal = !sendLedVal; //if clause activated if pushbutton pressed and thus inputPin reads LOW
        // digitalWrite(sendLedPin, sendLedVal ? HIGH : LOW); //write the appropriate HIGH/LOW to the sendLed pin to turn it ON/OFF
        Particle.publish("Core2Toggle", sendLedVal ? "ON" : "OFF");
        // Particle.publish("Core1Toggle", sendLedVal ? "ON" : "OFF"); //publish the state to the Spark Cloud as ON/OFF
        delay(500); //primitive button debouncing
        
        // sendLedVal = !sendLedVal; //if clause activated if pushbutton pressed and thus inputPin reads LOW
        // // digitalWrite(sendLedPin, sendLedVal ? HIGH : LOW); //write the appropriate HIGH/LOW to the sendLed pin to turn it ON/OFF
        //  Particle.publish("Core2Toggle", sendLedVal ? "ON" : "OFF");
    }
    
      temp = val;
    
       val2 = analogRead(flexSensePin2); //read value of pushbutton

        // delay(420);
        // sprintf(publishString, "%f", accZ);
       
   
     if((val2 < temp2-50 ) || (val2 > temp2 +50) ) {
        //   sprintf(publishString2,"%d", val);
        //   Spark.publish("Flex",publishString2);
        //if clause activated if pushbutton pressed and thus inputPin reads LOW
        // Serial.println("press");
        sendLedVal2 = !sendLedVal2; //if clause activated if pushbutton pressed and thus inputPin reads LOW
        // digitalWrite(sendLedPin, sendLedVal ? HIGH : LOW); //write the appropriate HIGH/LOW to the sendLed pin to turn it ON/OFF
        Particle.publish("Core2ToggleB", sendLedVal2 ? "ON" : "OFF");
        // Particle.publish("Core1Toggle", sendLedVal ? "ON" : "OFF"); //publish the state to the Spark Cloud as ON/OFF
        delay(500); //primitive button debouncing
        
        // sendLedVal = !sendLedVal; //if clause activated if pushbutton pressed and thus inputPin reads LOW
        // // digitalWrite(sendLedPin, sendLedVal ? HIGH : LOW); //write the appropriate HIGH/LOW to the sendLed pin to turn it ON/OFF
        //  Particle.publish("Core2Toggle", sendLedVal ? "ON" : "OFF");
    }
    
      temp2 = val2;
}


void myntPowerToggle(const char *toggle, const char *onOff){ //handler function for Spark.subscribe()

    if (strcmp(onOff, "ON") == 0){ //if sendLed on Core2 is ON according to Spark.publish()
    
        myntOnePower();
        myntOnePlus();
        myntOnePlus();
        // delay(2000);
        myntOnePower();
        
    } if (strcmp(onOff, "OFF") == 0){ //if sendLed on Core2 is OFF according to Spark.publish()
    
        
        
    }
}

void myntPowerToggleB(const char *toggle, const char *onOff){ //handler function for Spark.subscribe()

    if (strcmp(onOff, "ON") == 0){ //if sendLed on Core2 is ON according to Spark.publish()
    
        myntTwoPower();
        myntTwoPlus();
        myntTwoPlus();
        // delay(2000);
        myntTwoPower();
        
    } if (strcmp(onOff, "OFF") == 0){ //if sendLed on Core2 is OFF according to Spark.publish()
    
        
        
    }
}

void myntOnePower(){
    digitalWrite(myntOnePowerPin, LOW);
    delay(2000);
    digitalWrite(myntOnePowerPin, HIGH);
    delay(500);
}

void myntTwoPower(){
    digitalWrite(myntTwoPowerPin, LOW);
    delay(2000);
    digitalWrite(myntTwoPowerPin, HIGH);
    delay(500);
}

void myntOnePlus(){
    digitalWrite(myntOnePlusPin, LOW);
    delay(500);
    digitalWrite(myntOnePlusPin, HIGH);
    delay(500);
}

void myntTwoPlus(){
    digitalWrite(myntTwoPlusPin, LOW);
    delay(500);
    digitalWrite(myntTwoPlusPin, HIGH);
    delay(500);
}

void myntOneMinus(){
    digitalWrite(myntOneMinusPin, LOW);
    delay(500);
    digitalWrite(myntOneMinusPin, HIGH);
    delay(500);
}

void myntTwoMinus(){
    digitalWrite(myntTwoMinusPin, LOW);
    delay(500);
    digitalWrite(myntTwoMinusPin, HIGH);
    delay(500);
}

